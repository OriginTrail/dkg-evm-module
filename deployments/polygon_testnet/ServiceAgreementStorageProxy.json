{
  "address": "0x160f3fedE8019cE64a339AA1fb3316Ee323A6A41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "agreementV1Exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agreementV1StorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "agreementV1U1Exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agreementV1U1StorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "commitSubmissionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "commitV1Exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "commitV1U1Exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "prevIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "nextIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "score",
          "type": "uint40"
        }
      ],
      "name": "createV1CommitSubmissionObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint8",
          "name": "scoreFunctionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "proofWindowOffsetPerc",
          "type": "uint8"
        }
      ],
      "name": "createV1ServiceAgreementObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "prevIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "nextIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "score",
          "type": "uint40"
        }
      ],
      "name": "createV1U1CommitSubmissionObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint8",
          "name": "scoreFunctionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "proofWindowOffsetPerc",
          "type": "uint8"
        }
      ],
      "name": "createV1U1ServiceAgreementObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "decrementAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "decrementCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "deleteAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "deleteCommitSubmissionsObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "deleteCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "deleteServiceAgreementObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stateId",
          "type": "bytes32"
        }
      ],
      "name": "deleteUpdateCommitsDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        },
        {
          "internalType": "uint96[2]",
          "name": "tokens",
          "type": "uint96[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "scoreFunctionIdAndProofWindowOffsetPerc",
          "type": "uint8[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementEpochLength",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementEpochsNumber",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementProofWindowOffsetPerc",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "getAgreementRewardedNodesNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementScoreFunctionId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementTokenAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementUpdateTokenAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getCommitSubmission",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "prevIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "nextIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "score",
              "type": "uint40"
            }
          ],
          "internalType": "struct ServiceAgreementStructsV1.CommitSubmission",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getCommitSubmissionIdentityId",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getCommitSubmissionNextIdentityId",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getCommitSubmissionPrevIdentityId",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getCommitSubmissionScore",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "getCommitsCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stateId",
          "type": "bytes32"
        }
      ],
      "name": "getUpdateCommitsDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "getV1AgreementEpochSubmissionHead",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        }
      ],
      "name": "getV1U1AgreementEpochSubmissionHead",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "incrementAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "incrementCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "migrateV1ServiceAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "serviceAgreementExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        }
      ],
      "name": "setAgreementEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        }
      ],
      "name": "setAgreementEpochsNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "proofWindowOffsetPerc",
          "type": "uint8"
        }
      ],
      "name": "setAgreementProofWindowOffsetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "rewardedNodesNumber",
          "type": "uint32"
        }
      ],
      "name": "setAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "newScoreFunctionId",
          "type": "uint8"
        }
      ],
      "name": "setAgreementScoreFunctionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "setAgreementStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        }
      ],
      "name": "setAgreementTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "updateTokenAmount",
          "type": "uint96"
        }
      ],
      "name": "setAgreementUpdateTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "setCommitSubmissionIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "nextIdentityId",
          "type": "uint72"
        }
      ],
      "name": "setCommitSubmissionNextIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "prevIdentityId",
          "type": "uint72"
        }
      ],
      "name": "setCommitSubmissionPrevIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "score",
          "type": "uint40"
        }
      ],
      "name": "setCommitSubmissionScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "epochStateCommitsCount",
          "type": "uint8"
        }
      ],
      "name": "setCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "setUpdateCommitsDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "headCommitId",
          "type": "bytes32"
        }
      ],
      "name": "setV1AgreementEpochSubmissionHead",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "headCommitId",
          "type": "bytes32"
        }
      ],
      "name": "setV1U1AgreementEpochSubmissionHead",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageV1",
      "outputs": [
        {
          "internalType": "contract ServiceAgreementStorageV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageV1U1",
      "outputs": [
        {
          "internalType": "contract ServiceAgreementStorageV1U1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        }
      ],
      "name": "transferAgreementTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        }
      ],
      "name": "transferV1AgreementTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        }
      ],
      "name": "transferV1U1AgreementTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x82b19cd836868ad6cd18341a98ba31212913292eebe69c8c790c4281ef679e85",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0x160f3fedE8019cE64a339AA1fb3316Ee323A6A41",
    "transactionIndex": 27,
    "gasUsed": "3420435",
    "logsBloom": "0x
    "blockHash": "0x8cc87ba6086a157084645df8437c4310e6f84e439ff60239d519e8acd9c8ba63",
    "transactionHash": "0x82b19cd836868ad6cd18341a98ba31212913292eebe69c8c790c4281ef679e85",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 37384465,
        "transactionHash": "0x82b19cd836868ad6cd18341a98ba31212913292eebe69c8c790c4281ef679e85",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003cc256667fe4d0000000000000000000000000000000000000000000000000885a2405e857d6a6000000000000000000000000000000000000000000000c05a0a4bdad86c8bb3a000000000000000000000000000000000000000000000000881d61af81d7f1d6000000000000000000000000000000000000000000000c05a0e18003ed48a00a",
        "logIndex": 64,
        "blockHash": "0x8cc87ba6086a157084645df8437c4310e6f84e439ff60239d519e8acd9c8ba63"
      }
    ],
    "blockNumber": 37384465,
    "cumulativeGasUsed": "4781527",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"agreementV1Exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agreementV1StorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"agreementV1U1Exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agreementV1U1StorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"commitSubmissionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"commitV1Exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"commitV1U1Exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"name\":\"createV1CommitSubmissionObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"scoreFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"proofWindowOffsetPerc\",\"type\":\"uint8\"}],\"name\":\"createV1ServiceAgreementObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"name\":\"createV1U1CommitSubmissionObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"scoreFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"proofWindowOffsetPerc\",\"type\":\"uint8\"}],\"name\":\"createV1U1ServiceAgreementObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"decrementAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"decrementCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"deleteAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"deleteCommitSubmissionsObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"deleteCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"deleteServiceAgreementObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateId\",\"type\":\"bytes32\"}],\"name\":\"deleteUpdateCommitsDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"},{\"internalType\":\"uint96[2]\",\"name\":\"tokens\",\"type\":\"uint96[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"scoreFunctionIdAndProofWindowOffsetPerc\",\"type\":\"uint8[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementEpochLength\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementEpochsNumber\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementProofWindowOffsetPerc\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"getAgreementRewardedNodesNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementScoreFunctionId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementTokenAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementUpdateTokenAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getCommitSubmission\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"internalType\":\"struct ServiceAgreementStructsV1.CommitSubmission\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getCommitSubmissionIdentityId\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getCommitSubmissionNextIdentityId\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getCommitSubmissionPrevIdentityId\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getCommitSubmissionScore\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"getCommitsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateId\",\"type\":\"bytes32\"}],\"name\":\"getUpdateCommitsDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"getV1AgreementEpochSubmissionHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"}],\"name\":\"getV1U1AgreementEpochSubmissionHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"incrementAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"incrementCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"migrateV1ServiceAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"serviceAgreementExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"}],\"name\":\"setAgreementEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"}],\"name\":\"setAgreementEpochsNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"proofWindowOffsetPerc\",\"type\":\"uint8\"}],\"name\":\"setAgreementProofWindowOffsetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"rewardedNodesNumber\",\"type\":\"uint32\"}],\"name\":\"setAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"newScoreFunctionId\",\"type\":\"uint8\"}],\"name\":\"setAgreementScoreFunctionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setAgreementStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"setAgreementTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"updateTokenAmount\",\"type\":\"uint96\"}],\"name\":\"setAgreementUpdateTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"setCommitSubmissionIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"}],\"name\":\"setCommitSubmissionNextIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"}],\"name\":\"setCommitSubmissionPrevIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"name\":\"setCommitSubmissionScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"epochStateCommitsCount\",\"type\":\"uint8\"}],\"name\":\"setCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"setUpdateCommitsDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"headCommitId\",\"type\":\"bytes32\"}],\"name\":\"setV1AgreementEpochSubmissionHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"headCommitId\",\"type\":\"bytes32\"}],\"name\":\"setV1U1AgreementEpochSubmissionHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageV1\",\"outputs\":[{\"internalType\":\"contract ServiceAgreementStorageV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageV1U1\",\"outputs\":[{\"internalType\":\"contract ServiceAgreementStorageV1U1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"transferAgreementTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"transferV1AgreementTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"transferV1U1AgreementTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/storage/ServiceAgreementStorageProxy.sol\":\"ServiceAgreementStorageProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ICustodian} from \\\"./interface/ICustodian.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Guardian is HubDependent {\\n    event TokenTransferred(address indexed custodian, uint256 amount);\\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\\n\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function transferTokens(address payable custodian) external onlyHubOwner {\\n        require(custodian != address(0x0), \\\"Custodian cannot be a zero address\\\");\\n        uint contractSize;\\n        assembly {\\n            contractSize := extcodesize(custodian)\\n        }\\n        require(contractSize > 0, \\\"Cannot transfer tokens to custodian that is not a contract!\\\");\\n\\n        ICustodian custodianContract = ICustodian(custodian);\\n        bool hasOwnersFunction = false;\\n        try custodianContract.getOwners() returns (address[] memory owners) {\\n            hasOwnersFunction = true;\\n            require(owners.length > 0, \\\"Cannot transfer tokens to custodian without owners defined!\\\");\\n        } catch {}\\n        require(hasOwnersFunction, \\\"Cannot transfer tokens to custodian without getOwners function!\\\");\\n\\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\\n        require(transactionResult, \\\"Token transaction execution failed!\\\");\\n\\n        emit TokenTransferred(custodian, balanceTransferred);\\n    }\\n\\n    function withdrawMisplacedOTP() external onlyHubOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\\n    }\\n\\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\\n        require(tokenContractAddress != address(tokenContract), \\\"Cannot use this function with the TRAC contract\\\");\\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\\n\\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\\n        if (balance > 0) {\\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\\n            require(transactionResult, \\\"Token transaction execution failed\\\");\\n        }\\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcef9797032f7c9aae94d003e52a83ae8e978b1ca5b3fbca261e552252d3de8\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/errors/GeneralErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary GeneralErrors {\\n    error OnlyHubOwnerFunction(address caller);\\n    error OnlyHubContractsFunction(address caller);\\n}\\n\",\"keccak256\":\"0x8b4676f9bcab2615efa6de8c4dd9a6b56a51388dd3dc4f3cab46b2951f3d53eb\",\"license\":\"MIT\"},\"contracts/interface/ICustodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ICustodian {\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf9c1575729c595ec1c4c6cec71e0890774efda80299b476b3c243b4fd168c69d\",\"license\":\"MIT\"},\"contracts/interface/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Initializable {\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0xac823de4540de0fac2d1ec548a5083404ab8abd858c34a69f4f8947b24789507\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ServiceAgreementStorageV1} from \\\"./ServiceAgreementStorageV1.sol\\\";\\nimport {ServiceAgreementStorageV1U1} from \\\"./ServiceAgreementStorageV1U1.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Initializable} from \\\"../interface/Initializable.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {GeneralErrors} from \\\"../errors/GeneralErrors.sol\\\";\\n\\ncontract ServiceAgreementStorageProxy is Named, Versioned, HubDependent, Initializable {\\n    string private constant _NAME = \\\"ServiceAgreementStorageProxy\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    ServiceAgreementStorageV1 public storageV1;\\n    ServiceAgreementStorageV1U1 public storageV1U1;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        storageV1 = ServiceAgreementStorageV1(hub.getContractAddress(\\\"ServiceAgreementStorageV1\\\"));\\n        storageV1U1 = ServiceAgreementStorageV1U1(hub.getContractAddress(\\\"ServiceAgreementStorageV1U1\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function migrateV1ServiceAgreement(bytes32 agreementId) external onlyContracts {\\n        ServiceAgreementStorageV1 sasV1 = storageV1;\\n        ServiceAgreementStorageV1U1 sasV1U1 = storageV1U1;\\n\\n        uint96 tokenAmount = sasV1.getAgreementTokenAmount(agreementId);\\n\\n        sasV1.deleteServiceAgreementObject(agreementId);\\n\\n        sasV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        sasV1.transferAgreementTokens(address(sasV1U1), tokenAmount);\\n    }\\n\\n    function createV1U1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1U1.createServiceAgreementObject(\\n            agreementId,\\n            startTime,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function createV1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1.createServiceAgreementObject(\\n            agreementId,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.deleteServiceAgreementObject(agreementId);\\n        } else {\\n            storageV1U1.deleteServiceAgreementObject(agreementId);\\n        }\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        if (this.agreementV1Exists(agreementId)) {\\n            uint96 tokenAmount;\\n            (startTime, epochsNumber, epochLength, tokenAmount, scoreFunctionIdAndProofWindowOffsetPerc) = storageV1\\n                .getAgreementData(agreementId);\\n            return (\\n                startTime,\\n                epochsNumber,\\n                epochLength,\\n                [tokenAmount, storageV1U1.getAgreementUpdateTokenAmount(agreementId)],\\n                scoreFunctionIdAndProofWindowOffsetPerc\\n            );\\n        } else {\\n            return storageV1U1.getAgreementData(agreementId);\\n        }\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementStartTime(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementStartTime(agreementId);\\n        }\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementStartTime(agreementId, startTime);\\n        } else {\\n            storageV1U1.setAgreementStartTime(agreementId, startTime);\\n        }\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochsNumber(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochsNumber(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        } else {\\n            storageV1U1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        }\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochLength(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochLength(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochLength(agreementId, epochLength);\\n        } else {\\n            storageV1U1.setAgreementEpochLength(agreementId, epochLength);\\n        }\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementTokenAmount(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementTokenAmount(agreementId);\\n        }\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        } else {\\n            storageV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        }\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return storageV1U1.getAgreementUpdateTokenAmount(agreementId);\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        storageV1U1.setAgreementUpdateTokenAmount(agreementId, updateTokenAmount);\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementScoreFunctionId(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementScoreFunctionId(agreementId);\\n        }\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        } else {\\n            storageV1U1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        }\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementProofWindowOffsetPerc(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementProofWindowOffsetPerc(agreementId);\\n        }\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        } else {\\n            storageV1U1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        }\\n    }\\n\\n    function getV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return storageV1U1.getAgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\\n    }\\n\\n    function getV1AgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return storageV1.getAgreementEpochSubmissionHead(agreementId, epoch);\\n    }\\n\\n    function setV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1U1.setAgreementEpochSubmissionHead(agreementId, epoch, stateIndex, headCommitId);\\n    }\\n\\n    function setV1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1.setAgreementEpochSubmissionHead(agreementId, epoch, headCommitId);\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            return storageV1U1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        } else {\\n            storageV1U1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        }\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, 0);\\n        } else {\\n            storageV1U1.deleteAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function createV1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1.createCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function createV1U1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1U1.createEpochStateCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.deleteEpochStateCommitSubmissionsObject(commitId);\\n        } else {\\n            storageV1.deleteCommitSubmissionsObject(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmission(commitId);\\n        } else {\\n            return storageV1.getCommitSubmission(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionIdentityId(commitId, identityId);\\n        } else {\\n            storageV1.setCommitSubmissionIdentityId(commitId, identityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionPrevIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionPrevIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionNextIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionNextIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionScore(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionScore(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionScore(commitId, score);\\n        } else {\\n            storageV1.setCommitSubmissionScore(commitId, score);\\n        }\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n        } else {\\n            return storageV1.commitSubmissionExists(commitId);\\n        }\\n    }\\n\\n    function incrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.incrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function decrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.decrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return storageV1U1.getEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function setCommitsCount(bytes32 epochStateId, uint8 epochStateCommitsCount) external onlyContracts {\\n        storageV1U1.setEpochStateCommitsCount(epochStateId, epochStateCommitsCount);\\n    }\\n\\n    function deleteCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.deleteEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return storageV1U1.getUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        storageV1U1.setUpdateCommitsDeadline(stateId, deadline);\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        storageV1U1.deleteUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function transferAgreementTokens(bytes32 agreementId, address receiver, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.transferAgreementTokens(receiver, tokenAmount);\\n        } else {\\n            storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n        }\\n    }\\n\\n    function transferV1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function transferV1U1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function agreementV1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function agreementV1U1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId) || storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function commitV1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1.commitSubmissionExists(commitId);\\n    }\\n\\n    function commitV1U1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n    }\\n\\n    function agreementV1StorageAddress() external view returns (address) {\\n        return address(storageV1);\\n    }\\n\\n    function agreementV1U1StorageAddress() external view returns (address) {\\n        return address(storageV1U1);\\n    }\\n}\\n\",\"keccak256\":\"0x3615c48f64deb12c57692b15a052d523c3da362dd3c927ec3f2902a7c5307a06\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // CommitId [keccak256(agreementId + epoch + identityId)] => CommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal commitSubmissions;\\n\\n    // AgreementId [hash(asset type contract + tokenId + key)] => ServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ServiceAgreement) internal serviceAgreements;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = block.timestamp;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96 tokenAmount,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            serviceAgreements[agreementId].tokenAmount,\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[epoch];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[epoch] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        commitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].identityId;\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        commitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return commitSubmissions[commitId].score;\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        commitSubmissions[commitId].score = score;\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return commitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c2b2d43615369d9fe71beb9d4267ea40c46fb416d4c7b22ab81272a2c690117\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1U1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // AgreementId [hash(assetStorage + tokenId + key)] => ExtendedServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ExtendedServiceAgreement) internal serviceAgreements;\\n\\n    // CommitId [keccak256(agreementId + epoch + stateIndex + identityId)] => stateCommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal epochStateCommitSubmissions;\\n\\n    // EpochStateId [keccak256(agreementId + epoch + stateIndex)] => epochStateCommitsCount\\n    mapping(bytes32 => uint8) internal epochStateCommitsCount;\\n\\n    // StateId [keccak256(agreementId + stateIndex)] => updateCommitsDeadline\\n    mapping(bytes32 => uint256) internal updateCommitsDeadlines;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ExtendedServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = startTime;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            [serviceAgreements[agreementId].tokenAmount, serviceAgreements[agreementId].updateTokenAmount],\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].updateTokenAmount;\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].updateTokenAmount = updateTokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[keccak256(abi.encodePacked(epoch, stateIndex))];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[\\n            keccak256(abi.encodePacked(epoch, stateIndex))\\n        ] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        delete serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createEpochStateCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteEpochStateCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].identityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionPrevIdentityId(\\n        bytes32 commitId,\\n        uint72 prevIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionNextIdentityId(\\n        bytes32 commitId,\\n        uint72 nextIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return epochStateCommitSubmissions[commitId].score;\\n    }\\n\\n    function setEpochStateCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].score = score;\\n    }\\n\\n    function epochStateCommitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return epochStateCommitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function incrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]++;\\n    }\\n\\n    function decrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]--;\\n    }\\n\\n    function getEpochStateCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function setEpochStateCommitsCount(bytes32 epochStateId, uint8 newEpochStateCommitsCount) external onlyContracts {\\n        epochStateCommitsCount[epochStateId] = newEpochStateCommitsCount;\\n    }\\n\\n    function deleteEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        delete epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return updateCommitsDeadlines[stateId];\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        updateCommitsDeadlines[stateId] = deadline;\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        delete updateCommitsDeadlines[stateId];\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d25de399b6bccc3a892d0f71abd185892b50a717106fe88328a42fc1e52d98\",\"license\":\"MIT\"},\"contracts/structs/ServiceAgreementStructsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementStructsV1 {\\n    struct CommitSubmission {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n        uint40 score;\\n    }\\n\\n    struct ServiceAgreementInputArgs {\\n        address assetCreator;\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epochsNumber;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n    }\\n\\n    struct ServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // epoch => headCommitId\\n        mapping(uint16 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct ExtendedServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint96 updateTokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // keccak256(epoch + stateIndex) => headCommitId\\n        mapping(bytes32 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct CommitInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n    }\\n\\n    struct ProofInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n        bytes32[] proof;\\n        bytes32 chunkHash;\\n    }\\n}\\n\",\"keccak256\":\"0x5b33bc12e685dacf652dfe81b7fff14806297132be7df872c45a598ff783d638\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620000c657601f62003d4438819003918201601f19168301916001600160401b03831184841017620000cb57808492602094604052833981010312620000c657516001600160a01b03811690819003620000c65780156200008157600080546001600160a01b031916919091179055604051613c629081620000e28239f35b60405162461bcd60e51b815260206004820152601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063018e0c1e146127945783816302482f4714612736578163038fed731461264857508063054fd4001461262057806306fdde03146125cb5780630925ffd9146124f85780630f26d926146124a0578381630f3a549d146123a5575080630f3ee6d4146122dd578063146269ac146121d157806315ce5a4514612258578381631834ff78146121fa5750806319109b291461085f57806324bdf843146121d157806329131d4114612179578381632c640e6d146120fa57508063365a86fc146120d25780633c96f02b146120aa5780633d63171614611fa05780634089a17d14611f7857806344c990b014611ed4578381634603f99e14611e5c5781634750b9f414611d57575080634849174114611cb4578063484a47e714611c8c57806354fd4d5014611c4b57806357e1255714611bde5780635c6c1fef14611bb85783816362f2fe2e14611b4e5781636441a27614611a555781636a8be7dc146119cf575080636ff015ae14611930578063720eb84a146118d85780638129fc1c146116ea57806386e0cc881461160957806388f7a9b4146115b1578381638a0f01b5146114ac5781638bea143b1461142c5781638f04d1c1146113ce5781638f8a68e614611344578163932e9c291461125c5750806399149f771461123a5780639c70b3c014611213578063a18d654814611191578063a63148961461108157838163ac64112e14610f8857508063ac9d7cf414610f5b57838163b2ffa99714610e6057508063b67b6e1e14610e3857838163b768747214610d3057508063bec3db4314610c7357838163beca40f314610b7857508063c45d174914610b4f57838163cb327c7d14610a2857508063ce60dc6114610a06578063d1a640c7146109d857838163d311873a1461097a578163d66fca081461088857508063d9616f061461085f57838163db0d1038146107fd578163e184b9e8146106f8578163e25aa72514610684578163e54b26ff14610557578163f36359eb146104d8575063fc75b3fb1461030857600080fd5b82903461044857602036600319011261044857803590610326612aee565b6001546002548551634089a17d60e01b81528381018590526001600160a01b0391821694909290911690602083602481855afa92831561047157869361049d575b50813b1561047b578651631acdf94160e31b8152848101829052868160248183875af190811561049357879161047f575b5050843b1561047b57865163e54b26ff60e01b81528481019182526001600160601b038416602083015290869082908190604001038183895af190811561047157869161045d575b5050803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b03909116602083015283918391908290849082906040015b03925af1801561044c5761043857505051f35b61044190612a1f565b6104485751f35b5080fd5b50505051903d90823e3d90fd5b8480fd5b61046690612a1f565b6104595784386103e0565b87513d88823e3d90fd5b8580fd5b61048890612a1f565b61047b578538610398565b88513d89823e3d90fd5b9092506020813d82116104d0575b816104b860209383612a81565b8101031261047b576104c990612ac2565b9138610367565b3d91506104ab565b919050346104485782600319360112610448576104f36128fa565b906104fc612910565b610504612aee565b6001546001600160a01b0316803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b0390911660208301528391839190829084908290604001610425565b91905034610448578260031936011261044857803590610575612910565b61057d612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a57859161064c575b5015610603576001546001600160a01b0316803b1561045957855163e54b26ff60e01b81529283019384526001600160601b03909116602084015290918391839182908490829060400103925af1801561044c5761043857505051f35b6002546001600160a01b0316803b1561045957855163e54b26ff60e01b81529283019384526001600160601b039091166020840152909183918391829084908290604001610425565b61066d915060203d8111610673575b6106658183612a81565b810190612ad6565b386105a6565b503d61065b565b86513d87823e3d90fd5b9190503461044857826003193601126104485761069f612910565b906106a8612aee565b6002546001600160a01b031691823b156106f457845163e25aa72560e01b815282359281019283526001600160601b039091166020830152918391839190829084908290604001610425565b8380fd5b919050346104485782600319360112610448578035906107166129b6565b61071e612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a5785916107df575b5015610796576002546001600160a01b0316803b1561045957855163ca58ef7d60e01b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b15610459578551631c30973d60e31b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6107f7915060203d8111610673576106658183612a81565b38610747565b9190503461044857602036600319011261044857610819612aee565b6002546001600160a01b031690813b1561085b5782916024839286519485938492631b61a20760e31b84528035908401525af1801561044c5761043857505051f35b8280fd5b50503461044857816003193601126104485760025490516001600160a01b039091168152602090f35b91905034610448576020366003190112610448578035906108a7612aee565b83516339075c2560e11b8152818101839052602081602481305afa908115610970578491610952575b5015610914576001546001600160a01b031691823b156106f457602484928387519586948593631acdf94160e31b85528401525af1801561044c5761043857505051f35b6002546001600160a01b031691823b156106f457602484928387519586948593631acdf94160e31b85528401525af1801561044c5761043857505051f35b61096a915060203d8111610673576106658183612a81565b386108d0565b85513d86823e3d90fd5b919050346104485761098b36612926565b9190610995612aee565b6002546001600160a01b0316803b156104595784928360449288519687958694636988c39d60e11b865285015260248401525af1801561044c5761043857505051f35b509134610a03576020366003190112610a03575061ffff6109fb60209335613006565b915191168152f35b80fd5b509134610a03576020366003190112610a03575060ff6109fb6020933561330a565b9190503461044857606036600319011261044857803590610a47612985565b6044359263ffffffff8416840361045957610a60612aee565b85516339075c2560e11b8152838101829052602081602481305afa908115610471578691610b31575b5015610ae0576001546001600160a01b031690813b1561047b5785809461042589519788968795869463cb327c7d60e01b8652850191604091949361ffff63ffffffff926060860197865216602085015216910152565b6002546001600160a01b031690813b1561047b5785809461042589519788968795869463cb327c7d60e01b8652850191604091949361ffff63ffffffff926060860197865216602085015216910152565b610b49915060203d8111610673576106658183612a81565b38610a89565b509134610a03576020366003190112610a035750610b6f60209235613b46565b90519015158152f35b91905034610448578260031936011261044857803590610b96612985565b610b9e612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591610c55575b5015610c11576001546001600160a01b0316803b1561045957855163beca40f360e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b1561045957855163beca40f360e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b610c6d915060203d8111610673576106658183612a81565b38610bc7565b509190346104485780600319360112610448576020610cd193610c94612985565b600154845163572943f760e01b8152833593810193845261ffff9092166020840152909586926001600160a01b0392909216918391829160400190565b03915afa918215610d255791610cec575b6020925051908152f35b90506020823d8211610d1d575b81610d0660209383612a81565b81010312610d18576020915190610ce2565b600080fd5b3d9150610cf9565b9051903d90823e3d90fd5b91905034610448578260031936011261044857803590610d4e612985565b91610d57612aee565b84516339075c2560e11b8152828101829052602081602481305afa90811561067a578591610e1a575b5015610dd3576001546001600160a01b0316803b156104595784928360649261ffff8951978896879563cb327c7d60e01b87528601521660248401528160448401525af1801561044c5761043857505051f35b6002549092906001600160a01b0316803b15610459578551635bb43a3960e11b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b610e32915060203d8111610673576106658183612a81565b38610d80565b509134610a03576020366003190112610a0357506001600160481b036109fb60209335613975565b91905034610448578260031936011261044857803590610e7e612985565b610e86612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591610f3d575b5015610ef9576001546001600160a01b0316803b1561045957855163b2ffa99760e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b1561045957855163b2ffa99760e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b610f55915060203d8111610673576106658183612a81565b38610eaf565b509134610a035781600319360112610a03575063ffffffff6109fb602093610f81612985565b90356134f7565b91905034610448578260031936011261044857803590610fa66129a6565b610fae612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591611063575b5015611020576001546001600160a01b0316803b15610459578551635632089760e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551635632089760e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b61107b915060203d8111610673576106658183612a81565b38610fd7565b503461085b578160031936011261085b578035602435916001600160801b0383168303610d185784926110b2612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591611173575b501561112a576001546001600160a01b0316803b15610459578551635318a44b60e11b81529283019384526001600160801b039091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551635318a44b60e11b81529283019384526001600160801b039091166020840152909183918391829084908290604001610425565b61118b915060203d8111610673576106658183612a81565b386110db565b50903461085b57602036600319011261085b57600154815163c45d174960e01b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea575b50519015158152f35b611202919250833d8111610673576106658183612a81565b90386111e1565b81513d85823e3d90fd5b509134610a03576020366003190112610a03575061123360209235612efc565b9051908152f35b509134610a03576020366003190112610a03575060ff6109fb60209335613409565b919050346104485760203660031901126104485780359061127b612aee565b83516329131d4160e01b8152818101839052602081602481305afa908115610970578491611326575b50156112e8576002546001600160a01b031691823b156106f45760248492838751958694859363026b8fa760e41b85528401525af1801561044c5761043857505051f35b6001546001600160a01b031691823b156106f45760248492838751958694859363932e9c2960e01b85528401525af1801561044c5761043857505051f35b61133e915060203d8111610673576106658183612a81565b386112a4565b9190503461044857611355366129cc565b611363959295949194612aee565b6001546001600160a01b031692833b156113ca57885163cf57ca2f60e01b81529081019283526001600160481b039485166020840152958416604083015293909216606083015264ffffffffff90921660808201528391839182908490829060a001610425565b8780fd5b91905034610448576020366003190112610448576113ea612aee565b6002546001600160a01b031690813b1561085b578291602483928651948593849263848e591160e01b84528035908401525af1801561044c5761043857505051f35b9190503461044857608036600319011261044857611448612985565b90611451612aee565b6002546001600160a01b031691823b156106f457608484928361ffff9588519687958694631cc2476760e31b8652803590860152166024840152604435604484015260643560648401525af1801561044c5761043857505051f35b919050346104485782600319360112610448578035906114ca6129b6565b6114d2612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a578591611593575b501561154a576002546001600160a01b0316803b15610459578551630607a63f60e41b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b15610459578551638a0f01b560e01b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6115ab915060203d8111610673576106658183612a81565b386114fb565b509134610a03576020366003190112610a03575064ffffffffff60606115d96080943561367d565b8351936001600160481b038083511686528060208401511660208701528183015116908501520151166060820152f35b50903461085b5760209283600319360112610a0357823560018060a01b0393846001541684519587876024816310dc199160e31b9586825288888301525afa96871561067a57908893929186986116cb575b50871561166e575b838888519015158152f35b602492939495969750600254168751958694859384528301525afa9182156116c057916116a3575b5090388084818080611663565b6116ba9150833d8511610673576106658183612a81565b38611696565b8351903d90823e3d90fd5b6116e3919850843d8611610673576106658183612a81565b963861165b565b503461085b578260031936011261085b5782548251638da5cb5b60e01b81526001600160a01b039182169260209182818381885afa80156118ce57849188916118b1575b50163303611871578451630110ceef60e21b808252828201849052601960248301527f5365727669636541677265656d656e7453746f72616765563100000000000000604483015290948386606481845afa95861561186757889661183d575b509160648493928493876001600160601b0360a01b9916896001541617600155895195869485938452830152601b60248301527f5365727669636541677265656d656e7453746f7261676556315531000000000060448301525afa918215611833578692611806575b50501690600254161760025551f35b6118259250803d1061182c575b61181d8183612a81565b810190612aa3565b38806117f7565b503d611813565b85513d88823e3d90fd5b8493919650839261185c606492853d871161182c5761181d8183612a81565b97929450925061178e565b87513d8a823e3d90fd5b8160649286519262461bcd60e51b845283015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b6118c89150843d861161182c5761181d8183612a81565b3861172e565b86513d89823e3d90fd5b50903461085b57602036600319011261085b5760015481516310dc199160e31b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea5750519015158152f35b503461085b57602090816003193601126106f4579161ffff61195b6001600160801b03959435612c1d565b959398928495919551998a52168689015216908601526060850184905b600282106119b05750505060a084019092905b600282106119985760e085f35b828060019260ff87511681520194019101909261198b565b82516001600160601b0316815291840191600191909101908401611978565b91905034610448576119e0366129cc565b6119ee959295949194612aee565b6002546001600160a01b031692833b156113ca57885163dbe3177160e01b81529081019283526001600160481b039485166020840152958416604083015293909216606083015264ffffffffff90921660808201528391839182908490829060a001610425565b91905034610448578260031936011261044857803590611a736129a6565b611a7b612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591611b30575b5015611aed576001546001600160a01b0316803b15610459578551633220d13b60e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551633220d13b60e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b611b48915060203d8111610673576106658183612a81565b38611aa4565b91905034610448578260031936011261044857611b696129a6565b90611b72612aee565b6002546001600160a01b031691823b156106f457845163c332964760e01b8152823592810192835260ff9091166020830152918391839190829084908290604001610425565b509134610a03576020366003190112610a03575064ffffffffff6109fb60209335613a47565b5091903461044857606036600319011261044857602061ffff936064611c02612985565b9160018060a01b03600254168551978894859363c6b25e5760e01b855280359085015216602483015260443560448301525afa918215610d255791610cec576020925051908152f35b5050346104485781600319360112610448578051611c8891611c6c82612a65565b60058252640312e302e360dc1b6020830152519182918261293c565b0390f35b509134610a03576020366003190112610a0357506001600160801b036109fb6020933561310c565b50919034610448576020928360031936011261085b57600254825163eb59834560e01b81528235928101929092528490829060249082906001600160a01b03165afa928315611d4c578093611d10575b505060ff905191168152f35b909192508382813d8311611d45575b611d298183612a81565b81010312610a035750611d3d60ff91612bc2565b919038611d04565b503d611d1f565b8251903d90823e3d90fd5b91905034610448578260031936011261044857803590611d756129b6565b611d7d612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a578591611e3e575b5015611df5576002546001600160a01b0316803b15610459578551631101ca9560e01b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b156104595785516311d42e7d60e21b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b611e56915060203d8111610673576106658183612a81565b38611da6565b9190503461044857606036600319011261044857611e78612985565b90611e81612aee565b6001546001600160a01b031691823b156106f457606484928361ffff958851968795869463447b6fab60e11b865280359086015216602484015260443560448401525af1801561044c5761043857505051f35b50919034610448576020928360031936011261085b57600254825163044c990b60e41b81528235928101929092528490829060249082906001600160a01b03165afa928315611d4c578093611f36575b50506001600160601b03905191168152f35b909192508382813d8311611f71575b611f4f8183612a81565b81010312610a035750611f696001600160601b0391612ac2565b919038611f24565b503d611f45565b509134610a03576020366003190112610a0357506001600160601b036109fb6020933561320b565b503461085b578160031936011261085b5780356024359164ffffffffff83168303610d18578492611fcf612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a57859161208c575b5015612045576002546001600160a01b0316803b1561045957855163e022f23f60e01b815292830193845264ffffffffff9091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b15610459578551631eb18b8b60e11b815292830193845264ffffffffff9091166020840152909183918391829084908290604001610425565b6120a4915060203d8111610673576106658183612a81565b38611ff8565b509134610a03576020366003190112610a0357506001600160481b036109fb602093356138a3565b505034610448578160031936011261044857905490516001600160a01b039091168152602090f35b919050346104485782600319360112610448576121156128fa565b9061211e612910565b612126612aee565b6002546001600160a01b0316803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b0390911660208301528391839190829084908290604001610425565b50903461085b57602036600319011261085b5760025481516399eb184d60e01b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea5750519015158152f35b50503461044857816003193601126104485760015490516001600160a01b039091168152602090f35b9190503461044857602036600319011261044857612216612aee565b6002546001600160a01b031690813b1561085b578291602483928651948593849263ad7ae2c360e01b84528035908401525af1801561044c5761043857505051f35b50919034610448576020928360031936011261085b5760025482516315ce5a4560e01b81528235928101929092528490829060249082906001600160a01b03165afa928315611d4c57926122ae575b5051908152f35b9091508281813d83116122d6575b6122c68183612a81565b81010312610d18575190386122a7565b503d6122bc565b503461085b5760c036600319011261085b576122f7612985565b604435906001600160801b038216809203610d1857606435906001600160601b038216809203610d185760843560ff8116809103610d18578694612339612996565b93612342612aee565b6001546001600160a01b0316803b156113ca5760ff889660c495889461ffff9a8d519b8c9a8b9963131cbfbf60e21b8b528035908b01521660248901526044880152606487015260848601521660a48401525af1801561044c5761043857505051f35b919050346104485782600319360112610448578035906123c3612985565b6123cb612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591612482575b501561243e576001546001600160a01b0316803b15610459578551630f3a549d60e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551630f3a549d60e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b61249a915060203d8111610673576106658183612a81565b386123f4565b50903461085b57602036600319011261085b5760025481516310dc199160e31b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea5750519015158152f35b503461085b5760e036600319011261085b576044359061ffff8216809203610d1857606435906001600160801b038216809203610d1857608435926001600160601b038416809403610d185761254c612996565b9360c4359260ff8416809403610d18578795612566612aee565b6002546001600160a01b0316803b156113ca57879560ff879360e4968c519a8b998a98620486e160e01b8a528035908a015260243560248a01526044890152606488015260848701521660a485015260c48401525af1801561044c5761043857505051f35b5050346104485781600319360112610448578051611c88916125ec82612a65565b601c82527f5365727669636541677265656d656e7453746f7261676550726f7879000000006020830152519182918261293c565b509134610a03576020366003190112610a0357506001600160481b036109fb602093356137a5565b919050346104485761265936612926565b9190612663612aee565b84516339075c2560e11b8152828101829052602081602481305afa90811561067a578591612718575b50156126d5576001546001600160a01b0316803b15610459578492836044928851968795869463038fed7360e01b865285015260248401525af1801561044c5761043857505051f35b6002546001600160a01b0316803b15610459578492836044928851968795869463038fed7360e01b865285015260248401525af1801561044c5761043857505051f35b612730915060203d8111610673576106658183612a81565b3861268c565b9190503461044857602036600319011261044857612752612aee565b6002546001600160a01b031690813b1561085b5782916024839286519485938492635310aaaf60e01b84528035908401525af1801561044c5761043857505051f35b5082903461044857606036600319011261044857602435906001600160a01b0380831683036106f457604435906001600160601b0382168203610459576127d9612aee565b85516339075c2560e11b8152833584820152602081602481305afa9081156104715786916128dc575b5015612868579084959493929160015416803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b039091166020830152839183919082908490829060400103925af1801561044c5761043857505051f35b6002939193541691823b1561045957855163e941005360e01b81526001600160a01b039092169082019081526001600160601b039093166020840152918391839182908490829060400103925af180156128d2576128c557509051f35b6128ce90612a1f565b9051f35b83513d84823e3d90fd5b6128f4915060203d8111610673576106658183612a81565b87612802565b600435906001600160a01b0382168203610d1857565b602435906001600160601b0382168203610d1857565b6040906003190112610d18576004359060243590565b6020808252825181830181905290939260005b82811061297157505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161294f565b6024359061ffff82168203610d1857565b60a4359060ff82168203610d1857565b6024359060ff82168203610d1857565b602435906001600160481b0382168203610d1857565b60a0906003190112610d1857600435906001600160481b036024358181168103610d1857916044358281168103610d1857916064359081168103610d18579060843564ffffffffff81168103610d185790565b67ffffffffffffffff8111612a3357604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117612a3357604052565b6040810190811067ffffffffffffffff821117612a3357604052565b90601f8019910116810190811067ffffffffffffffff821117612a3357604052565b90816020910312610d1857516001600160a01b0381168103610d185790565b51906001600160601b0382168203610d1857565b90816020910312610d1857518015158103610d185790565b600054604051631627905560e01b815233600482015290602090829060249082906001600160a01b03165afa908115612b9357600091612b75575b5015612b3157565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b612b8d915060203d8111610673576106658183612a81565b38612b29565b6040513d6000823e3d90fd5b519061ffff82168203610d1857565b51906001600160801b0382168203610d1857565b519060ff82168203610d1857565b9080601f83011215610d185760405191612be983612a65565b829060408101928311610d1857905b828210612c055750505090565b60208091612c1284612bc2565b815201910190612bf8565b604091828051612c2c81612a65565b369037828051612c3b81612a65565b36903782516339075c2560e11b8152600481018390526020908181602481305afa908115612ef157600091612ed4575b5015612dd65760015484516337f80ad760e11b8152600481018590526001600160a01b03939160c0908290602490829088165afa928315612dcb576000918297839784928597612d5c575b508151978289019089821067ffffffffffffffff831117612a3357859184526001600160601b038095168a526002541691602484518094819363044c990b60e41b835260048301525afa918215612d525750600091612d1d575b5016908501529493929190565b908382813d8311612d4b575b612d338183612a81565b81010312610a035750612d4590612ac2565b38612d10565b503d612d29565b513d6000823e3d90fd5b985095509297505060c03d8111612dc4575b612d788188612a81565b86019660c087890312610a0357508551612d93828801612b9f565b92612db8612da2828a01612bae565b996080612db160608c01612ac2565b9a01612bd0565b91939897919538612cb6565b503d612d6e565b86513d6000823e3d90fd5b9060e060018060a01b03600254169360248651809681936337f80ad760e11b835260048301525afa908115612ec95760008095819582958395612e1e575b5050509493929190565b945095509550925060e03d8111612ec2575b612e3a8186612a81565b840160e0858203126106f457845193612e54848701612b9f565b93612e60888801612bae565b9783607f8901121561085b575196612e7788612a65565b879060a0810193858511610a035750606001905b838210612eab5750505090612e9f91612bd0565b91949392388080612e14565b828091612eb784612ac2565b815201910190612e8b565b503d612e30565b84513d6000823e3d90fd5b612eeb9150823d8411610673576106658183612a81565b38612c6b565b85513d6000823e3d90fd5b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb57600091612fde575b5015612f9e576001548251630271c2cf60e61b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091612f72575b50905090565b82813d8311612f97575b612f868183612a81565b81010312610a035750518038612f6c565b503d612f7c565b6002548251630271c2cf60e61b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091612f725750905090565b612ff59150823d8411610673576106658183612a81565b38612f2b565b83513d6000823e3d90fd5b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916130ef575b50156130af57600154825163d1a640c760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161307b5750905090565b82813d83116130a8575b61308f8183612a81565b81010312610a0357506130a190612b9f565b8038612f6c565b503d613085565b600254825163d1a640c760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161307b5750905090565b6131069150823d8411610673576106658183612a81565b38613035565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916131ee575b50156131ae57600154825163484a47e760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916131815750905090565b82813d83116131a7575b6131958183612a81565b81010312610a0357506130a190612bae565b503d61318b565b600254825163484a47e760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916131815750905090565b6132059150823d8411610673576106658183612a81565b3861313b565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916132ed575b50156132ad576001548251634089a17d60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916132805750905090565b82813d83116132a6575b6132948183612a81565b81010312610a0357506130a190612ac2565b503d61328a565b6002548251634089a17d60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916132805750905090565b6133049150823d8411610673576106658183612a81565b3861323a565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916133ec575b50156133ac57600154825163ce60dc6160e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b82813d83116133a5575b6133938183612a81565b81010312610a0357506130a190612bc2565b503d613389565b600254825163ce60dc6160e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b6134039150823d8411610673576106658183612a81565b38613339565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916134be575b501561347e5760015482516399149f7760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b60025482516399149f7760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b6134d59150823d8411610673576106658183612a81565b38613438565b90816020910312610d18575163ffffffff81168103610d185790565b604080516339075c2560e11b8152600481018390529092916020918281602481305afa908115612ef1576000916135e2575b50156135a7576001548451632b275f3d60e21b8152600481019290925261ffff909316602482015291819083906001600160a01b03168180604481015b03915afa928315612d52575060009261357e57505090565b61359d9250803d106135a0575b6135958183612a81565b8101906134db565b90565b503d61358b565b6002548451632b275f3d60e21b8152600481019290925261ffff909316602482015291819083906001600160a01b0316818060448101613566565b6135f99150833d8511610673576106658183612a81565b38613529565b51906001600160481b0382168203610d1857565b519064ffffffffff82168203610d1857565b90816080910312610d185761367560606040519261364284612a49565b61364b816135ff565b8452613659602082016135ff565b602085015261366a604082016135ff565b604085015201613613565b606082015290565b6040906060825161368d81612a49565b60009181838093528260208201528286820152015282516329131d4160e01b8152826004820152602081602481305afa90811561379b57829161377d575b50156137405760025483516361f31d6d60e01b81526004810193909352608090839060249082906001600160a01b03165afa92831561373657509161370e575090565b61359d915060803d811161372f575b6137278183612a81565b810190613625565b503d61371d565b51903d90823e3d90fd5b600154835163223dea6d60e21b81526004810193909352608090839060249082906001600160a01b03165afa92831561373657509161370e575090565b613795915060203d8111610673576106658183612a81565b386136cb565b84513d84823e3d90fd5b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613886575b50156138475760025482516322f7db5960e21b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b82813d8311613840575b61382e8183612a81565b81010312610a0357506130a1906135ff565b503d613824565b6001548251620153f560ea1b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b61389d9150823d8411610673576106658183612a81565b386137d4565b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613958575b501561391857600254825163583436f560e11b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b6001548251633c96f02b60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b61396f9150823d8411610673576106658183612a81565b386138d2565b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613a2a575b50156139ea5760025482516303ddf88560e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b6001548251635b3db70f60e11b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b613a419150823d8411610673576106658183612a81565b386139a4565b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613b29575b5015613ae957600254825163ecd431db60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091613abc5750905090565b82813d8311613ae2575b613ad08183612a81565b81010312610a0357506130a190613613565b503d613ac6565b6001548251635c6c1fef60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091613abc5750905090565b613b409150823d8411610673576106658183612a81565b38613a76565b60409081516329131d4160e01b81528160048201526020908181602481305afa908115612ec957600091613c0f575b5015613bd05760025483516399eb184d60e01b815260048101939093528190839060249082906001600160a01b03165afa928315612d525750600092613bba57505090565b61359d9250803d10610673576106658183612a81565b600154835163c45d174960e01b815260048101939093528190839060249082906001600160a01b03165afa928315612d525750600092613bba57505090565b613c269150823d8411610673576106658183612a81565b38613b7556fea2646970667358221220a2fbdf93c09648eca4584d0ae0b2881c7e78b9bde01a7af1b1cdc54e3fa3c3c864736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8063018e0c1e146127945783816302482f4714612736578163038fed731461264857508063054fd4001461262057806306fdde03146125cb5780630925ffd9146124f85780630f26d926146124a0578381630f3a549d146123a5575080630f3ee6d4146122dd578063146269ac146121d157806315ce5a4514612258578381631834ff78146121fa5750806319109b291461085f57806324bdf843146121d157806329131d4114612179578381632c640e6d146120fa57508063365a86fc146120d25780633c96f02b146120aa5780633d63171614611fa05780634089a17d14611f7857806344c990b014611ed4578381634603f99e14611e5c5781634750b9f414611d57575080634849174114611cb4578063484a47e714611c8c57806354fd4d5014611c4b57806357e1255714611bde5780635c6c1fef14611bb85783816362f2fe2e14611b4e5781636441a27614611a555781636a8be7dc146119cf575080636ff015ae14611930578063720eb84a146118d85780638129fc1c146116ea57806386e0cc881461160957806388f7a9b4146115b1578381638a0f01b5146114ac5781638bea143b1461142c5781638f04d1c1146113ce5781638f8a68e614611344578163932e9c291461125c5750806399149f771461123a5780639c70b3c014611213578063a18d654814611191578063a63148961461108157838163ac64112e14610f8857508063ac9d7cf414610f5b57838163b2ffa99714610e6057508063b67b6e1e14610e3857838163b768747214610d3057508063bec3db4314610c7357838163beca40f314610b7857508063c45d174914610b4f57838163cb327c7d14610a2857508063ce60dc6114610a06578063d1a640c7146109d857838163d311873a1461097a578163d66fca081461088857508063d9616f061461085f57838163db0d1038146107fd578163e184b9e8146106f8578163e25aa72514610684578163e54b26ff14610557578163f36359eb146104d8575063fc75b3fb1461030857600080fd5b82903461044857602036600319011261044857803590610326612aee565b6001546002548551634089a17d60e01b81528381018590526001600160a01b0391821694909290911690602083602481855afa92831561047157869361049d575b50813b1561047b578651631acdf94160e31b8152848101829052868160248183875af190811561049357879161047f575b5050843b1561047b57865163e54b26ff60e01b81528481019182526001600160601b038416602083015290869082908190604001038183895af190811561047157869161045d575b5050803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b03909116602083015283918391908290849082906040015b03925af1801561044c5761043857505051f35b61044190612a1f565b6104485751f35b5080fd5b50505051903d90823e3d90fd5b8480fd5b61046690612a1f565b6104595784386103e0565b87513d88823e3d90fd5b8580fd5b61048890612a1f565b61047b578538610398565b88513d89823e3d90fd5b9092506020813d82116104d0575b816104b860209383612a81565b8101031261047b576104c990612ac2565b9138610367565b3d91506104ab565b919050346104485782600319360112610448576104f36128fa565b906104fc612910565b610504612aee565b6001546001600160a01b0316803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b0390911660208301528391839190829084908290604001610425565b91905034610448578260031936011261044857803590610575612910565b61057d612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a57859161064c575b5015610603576001546001600160a01b0316803b1561045957855163e54b26ff60e01b81529283019384526001600160601b03909116602084015290918391839182908490829060400103925af1801561044c5761043857505051f35b6002546001600160a01b0316803b1561045957855163e54b26ff60e01b81529283019384526001600160601b039091166020840152909183918391829084908290604001610425565b61066d915060203d8111610673575b6106658183612a81565b810190612ad6565b386105a6565b503d61065b565b86513d87823e3d90fd5b9190503461044857826003193601126104485761069f612910565b906106a8612aee565b6002546001600160a01b031691823b156106f457845163e25aa72560e01b815282359281019283526001600160601b039091166020830152918391839190829084908290604001610425565b8380fd5b919050346104485782600319360112610448578035906107166129b6565b61071e612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a5785916107df575b5015610796576002546001600160a01b0316803b1561045957855163ca58ef7d60e01b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b15610459578551631c30973d60e31b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6107f7915060203d8111610673576106658183612a81565b38610747565b9190503461044857602036600319011261044857610819612aee565b6002546001600160a01b031690813b1561085b5782916024839286519485938492631b61a20760e31b84528035908401525af1801561044c5761043857505051f35b8280fd5b50503461044857816003193601126104485760025490516001600160a01b039091168152602090f35b91905034610448576020366003190112610448578035906108a7612aee565b83516339075c2560e11b8152818101839052602081602481305afa908115610970578491610952575b5015610914576001546001600160a01b031691823b156106f457602484928387519586948593631acdf94160e31b85528401525af1801561044c5761043857505051f35b6002546001600160a01b031691823b156106f457602484928387519586948593631acdf94160e31b85528401525af1801561044c5761043857505051f35b61096a915060203d8111610673576106658183612a81565b386108d0565b85513d86823e3d90fd5b919050346104485761098b36612926565b9190610995612aee565b6002546001600160a01b0316803b156104595784928360449288519687958694636988c39d60e11b865285015260248401525af1801561044c5761043857505051f35b509134610a03576020366003190112610a03575061ffff6109fb60209335613006565b915191168152f35b80fd5b509134610a03576020366003190112610a03575060ff6109fb6020933561330a565b9190503461044857606036600319011261044857803590610a47612985565b6044359263ffffffff8416840361045957610a60612aee565b85516339075c2560e11b8152838101829052602081602481305afa908115610471578691610b31575b5015610ae0576001546001600160a01b031690813b1561047b5785809461042589519788968795869463cb327c7d60e01b8652850191604091949361ffff63ffffffff926060860197865216602085015216910152565b6002546001600160a01b031690813b1561047b5785809461042589519788968795869463cb327c7d60e01b8652850191604091949361ffff63ffffffff926060860197865216602085015216910152565b610b49915060203d8111610673576106658183612a81565b38610a89565b509134610a03576020366003190112610a035750610b6f60209235613b46565b90519015158152f35b91905034610448578260031936011261044857803590610b96612985565b610b9e612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591610c55575b5015610c11576001546001600160a01b0316803b1561045957855163beca40f360e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b1561045957855163beca40f360e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b610c6d915060203d8111610673576106658183612a81565b38610bc7565b509190346104485780600319360112610448576020610cd193610c94612985565b600154845163572943f760e01b8152833593810193845261ffff9092166020840152909586926001600160a01b0392909216918391829160400190565b03915afa918215610d255791610cec575b6020925051908152f35b90506020823d8211610d1d575b81610d0660209383612a81565b81010312610d18576020915190610ce2565b600080fd5b3d9150610cf9565b9051903d90823e3d90fd5b91905034610448578260031936011261044857803590610d4e612985565b91610d57612aee565b84516339075c2560e11b8152828101829052602081602481305afa90811561067a578591610e1a575b5015610dd3576001546001600160a01b0316803b156104595784928360649261ffff8951978896879563cb327c7d60e01b87528601521660248401528160448401525af1801561044c5761043857505051f35b6002549092906001600160a01b0316803b15610459578551635bb43a3960e11b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b610e32915060203d8111610673576106658183612a81565b38610d80565b509134610a03576020366003190112610a0357506001600160481b036109fb60209335613975565b91905034610448578260031936011261044857803590610e7e612985565b610e86612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591610f3d575b5015610ef9576001546001600160a01b0316803b1561045957855163b2ffa99760e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b1561045957855163b2ffa99760e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b610f55915060203d8111610673576106658183612a81565b38610eaf565b509134610a035781600319360112610a03575063ffffffff6109fb602093610f81612985565b90356134f7565b91905034610448578260031936011261044857803590610fa66129a6565b610fae612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591611063575b5015611020576001546001600160a01b0316803b15610459578551635632089760e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551635632089760e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b61107b915060203d8111610673576106658183612a81565b38610fd7565b503461085b578160031936011261085b578035602435916001600160801b0383168303610d185784926110b2612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591611173575b501561112a576001546001600160a01b0316803b15610459578551635318a44b60e11b81529283019384526001600160801b039091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551635318a44b60e11b81529283019384526001600160801b039091166020840152909183918391829084908290604001610425565b61118b915060203d8111610673576106658183612a81565b386110db565b50903461085b57602036600319011261085b57600154815163c45d174960e01b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea575b50519015158152f35b611202919250833d8111610673576106658183612a81565b90386111e1565b81513d85823e3d90fd5b509134610a03576020366003190112610a03575061123360209235612efc565b9051908152f35b509134610a03576020366003190112610a03575060ff6109fb60209335613409565b919050346104485760203660031901126104485780359061127b612aee565b83516329131d4160e01b8152818101839052602081602481305afa908115610970578491611326575b50156112e8576002546001600160a01b031691823b156106f45760248492838751958694859363026b8fa760e41b85528401525af1801561044c5761043857505051f35b6001546001600160a01b031691823b156106f45760248492838751958694859363932e9c2960e01b85528401525af1801561044c5761043857505051f35b61133e915060203d8111610673576106658183612a81565b386112a4565b9190503461044857611355366129cc565b611363959295949194612aee565b6001546001600160a01b031692833b156113ca57885163cf57ca2f60e01b81529081019283526001600160481b039485166020840152958416604083015293909216606083015264ffffffffff90921660808201528391839182908490829060a001610425565b8780fd5b91905034610448576020366003190112610448576113ea612aee565b6002546001600160a01b031690813b1561085b578291602483928651948593849263848e591160e01b84528035908401525af1801561044c5761043857505051f35b9190503461044857608036600319011261044857611448612985565b90611451612aee565b6002546001600160a01b031691823b156106f457608484928361ffff9588519687958694631cc2476760e31b8652803590860152166024840152604435604484015260643560648401525af1801561044c5761043857505051f35b919050346104485782600319360112610448578035906114ca6129b6565b6114d2612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a578591611593575b501561154a576002546001600160a01b0316803b15610459578551630607a63f60e41b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b15610459578551638a0f01b560e01b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6115ab915060203d8111610673576106658183612a81565b386114fb565b509134610a03576020366003190112610a03575064ffffffffff60606115d96080943561367d565b8351936001600160481b038083511686528060208401511660208701528183015116908501520151166060820152f35b50903461085b5760209283600319360112610a0357823560018060a01b0393846001541684519587876024816310dc199160e31b9586825288888301525afa96871561067a57908893929186986116cb575b50871561166e575b838888519015158152f35b602492939495969750600254168751958694859384528301525afa9182156116c057916116a3575b5090388084818080611663565b6116ba9150833d8511610673576106658183612a81565b38611696565b8351903d90823e3d90fd5b6116e3919850843d8611610673576106658183612a81565b963861165b565b503461085b578260031936011261085b5782548251638da5cb5b60e01b81526001600160a01b039182169260209182818381885afa80156118ce57849188916118b1575b50163303611871578451630110ceef60e21b808252828201849052601960248301527f5365727669636541677265656d656e7453746f72616765563100000000000000604483015290948386606481845afa95861561186757889661183d575b509160648493928493876001600160601b0360a01b9916896001541617600155895195869485938452830152601b60248301527f5365727669636541677265656d656e7453746f7261676556315531000000000060448301525afa918215611833578692611806575b50501690600254161760025551f35b6118259250803d1061182c575b61181d8183612a81565b810190612aa3565b38806117f7565b503d611813565b85513d88823e3d90fd5b8493919650839261185c606492853d871161182c5761181d8183612a81565b97929450925061178e565b87513d8a823e3d90fd5b8160649286519262461bcd60e51b845283015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b6118c89150843d861161182c5761181d8183612a81565b3861172e565b86513d89823e3d90fd5b50903461085b57602036600319011261085b5760015481516310dc199160e31b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea5750519015158152f35b503461085b57602090816003193601126106f4579161ffff61195b6001600160801b03959435612c1d565b959398928495919551998a52168689015216908601526060850184905b600282106119b05750505060a084019092905b600282106119985760e085f35b828060019260ff87511681520194019101909261198b565b82516001600160601b0316815291840191600191909101908401611978565b91905034610448576119e0366129cc565b6119ee959295949194612aee565b6002546001600160a01b031692833b156113ca57885163dbe3177160e01b81529081019283526001600160481b039485166020840152958416604083015293909216606083015264ffffffffff90921660808201528391839182908490829060a001610425565b91905034610448578260031936011261044857803590611a736129a6565b611a7b612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591611b30575b5015611aed576001546001600160a01b0316803b15610459578551633220d13b60e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551633220d13b60e11b815292830193845260ff9091166020840152909183918391829084908290604001610425565b611b48915060203d8111610673576106658183612a81565b38611aa4565b91905034610448578260031936011261044857611b696129a6565b90611b72612aee565b6002546001600160a01b031691823b156106f457845163c332964760e01b8152823592810192835260ff9091166020830152918391839190829084908290604001610425565b509134610a03576020366003190112610a03575064ffffffffff6109fb60209335613a47565b5091903461044857606036600319011261044857602061ffff936064611c02612985565b9160018060a01b03600254168551978894859363c6b25e5760e01b855280359085015216602483015260443560448301525afa918215610d255791610cec576020925051908152f35b5050346104485781600319360112610448578051611c8891611c6c82612a65565b60058252640312e302e360dc1b6020830152519182918261293c565b0390f35b509134610a03576020366003190112610a0357506001600160801b036109fb6020933561310c565b50919034610448576020928360031936011261085b57600254825163eb59834560e01b81528235928101929092528490829060249082906001600160a01b03165afa928315611d4c578093611d10575b505060ff905191168152f35b909192508382813d8311611d45575b611d298183612a81565b81010312610a035750611d3d60ff91612bc2565b919038611d04565b503d611d1f565b8251903d90823e3d90fd5b91905034610448578260031936011261044857803590611d756129b6565b611d7d612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a578591611e3e575b5015611df5576002546001600160a01b0316803b15610459578551631101ca9560e01b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b156104595785516311d42e7d60e21b81529283019384526001600160481b039091166020840152909183918391829084908290604001610425565b611e56915060203d8111610673576106658183612a81565b38611da6565b9190503461044857606036600319011261044857611e78612985565b90611e81612aee565b6001546001600160a01b031691823b156106f457606484928361ffff958851968795869463447b6fab60e11b865280359086015216602484015260443560448401525af1801561044c5761043857505051f35b50919034610448576020928360031936011261085b57600254825163044c990b60e41b81528235928101929092528490829060249082906001600160a01b03165afa928315611d4c578093611f36575b50506001600160601b03905191168152f35b909192508382813d8311611f71575b611f4f8183612a81565b81010312610a035750611f696001600160601b0391612ac2565b919038611f24565b503d611f45565b509134610a03576020366003190112610a0357506001600160601b036109fb6020933561320b565b503461085b578160031936011261085b5780356024359164ffffffffff83168303610d18578492611fcf612aee565b84516329131d4160e01b8152828101849052602081602481305afa90811561067a57859161208c575b5015612045576002546001600160a01b0316803b1561045957855163e022f23f60e01b815292830193845264ffffffffff9091166020840152909183918391829084908290604001610425565b6001546001600160a01b0316803b15610459578551631eb18b8b60e11b815292830193845264ffffffffff9091166020840152909183918391829084908290604001610425565b6120a4915060203d8111610673576106658183612a81565b38611ff8565b509134610a03576020366003190112610a0357506001600160481b036109fb602093356138a3565b505034610448578160031936011261044857905490516001600160a01b039091168152602090f35b919050346104485782600319360112610448576121156128fa565b9061211e612910565b612126612aee565b6002546001600160a01b0316803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b0390911660208301528391839190829084908290604001610425565b50903461085b57602036600319011261085b5760025481516399eb184d60e01b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea5750519015158152f35b50503461044857816003193601126104485760015490516001600160a01b039091168152602090f35b9190503461044857602036600319011261044857612216612aee565b6002546001600160a01b031690813b1561085b578291602483928651948593849263ad7ae2c360e01b84528035908401525af1801561044c5761043857505051f35b50919034610448576020928360031936011261085b5760025482516315ce5a4560e01b81528235928101929092528490829060249082906001600160a01b03165afa928315611d4c57926122ae575b5051908152f35b9091508281813d83116122d6575b6122c68183612a81565b81010312610d18575190386122a7565b503d6122bc565b503461085b5760c036600319011261085b576122f7612985565b604435906001600160801b038216809203610d1857606435906001600160601b038216809203610d185760843560ff8116809103610d18578694612339612996565b93612342612aee565b6001546001600160a01b0316803b156113ca5760ff889660c495889461ffff9a8d519b8c9a8b9963131cbfbf60e21b8b528035908b01521660248901526044880152606487015260848601521660a48401525af1801561044c5761043857505051f35b919050346104485782600319360112610448578035906123c3612985565b6123cb612aee565b84516339075c2560e11b8152828101849052602081602481305afa90811561067a578591612482575b501561243e576001546001600160a01b0316803b15610459578551630f3a549d60e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b6002546001600160a01b0316803b15610459578551630f3a549d60e01b815292830193845261ffff9091166020840152909183918391829084908290604001610425565b61249a915060203d8111610673576106658183612a81565b386123f4565b50903461085b57602036600319011261085b5760025481516310dc199160e31b8152833593810193909352602090839060249082906001600160a01b03165afa91821561120957602093926111ea5750519015158152f35b503461085b5760e036600319011261085b576044359061ffff8216809203610d1857606435906001600160801b038216809203610d1857608435926001600160601b038416809403610d185761254c612996565b9360c4359260ff8416809403610d18578795612566612aee565b6002546001600160a01b0316803b156113ca57879560ff879360e4968c519a8b998a98620486e160e01b8a528035908a015260243560248a01526044890152606488015260848701521660a485015260c48401525af1801561044c5761043857505051f35b5050346104485781600319360112610448578051611c88916125ec82612a65565b601c82527f5365727669636541677265656d656e7453746f7261676550726f7879000000006020830152519182918261293c565b509134610a03576020366003190112610a0357506001600160481b036109fb602093356137a5565b919050346104485761265936612926565b9190612663612aee565b84516339075c2560e11b8152828101829052602081602481305afa90811561067a578591612718575b50156126d5576001546001600160a01b0316803b15610459578492836044928851968795869463038fed7360e01b865285015260248401525af1801561044c5761043857505051f35b6002546001600160a01b0316803b15610459578492836044928851968795869463038fed7360e01b865285015260248401525af1801561044c5761043857505051f35b612730915060203d8111610673576106658183612a81565b3861268c565b9190503461044857602036600319011261044857612752612aee565b6002546001600160a01b031690813b1561085b5782916024839286519485938492635310aaaf60e01b84528035908401525af1801561044c5761043857505051f35b5082903461044857606036600319011261044857602435906001600160a01b0380831683036106f457604435906001600160601b0382168203610459576127d9612aee565b85516339075c2560e11b8152833584820152602081602481305afa9081156104715786916128dc575b5015612868579084959493929160015416803b1561045957855163e941005360e01b81526001600160a01b039094169284019283526001600160601b039091166020830152839183919082908490829060400103925af1801561044c5761043857505051f35b6002939193541691823b1561045957855163e941005360e01b81526001600160a01b039092169082019081526001600160601b039093166020840152918391839182908490829060400103925af180156128d2576128c557509051f35b6128ce90612a1f565b9051f35b83513d84823e3d90fd5b6128f4915060203d8111610673576106658183612a81565b87612802565b600435906001600160a01b0382168203610d1857565b602435906001600160601b0382168203610d1857565b6040906003190112610d18576004359060243590565b6020808252825181830181905290939260005b82811061297157505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161294f565b6024359061ffff82168203610d1857565b60a4359060ff82168203610d1857565b6024359060ff82168203610d1857565b602435906001600160481b0382168203610d1857565b60a0906003190112610d1857600435906001600160481b036024358181168103610d1857916044358281168103610d1857916064359081168103610d18579060843564ffffffffff81168103610d185790565b67ffffffffffffffff8111612a3357604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117612a3357604052565b6040810190811067ffffffffffffffff821117612a3357604052565b90601f8019910116810190811067ffffffffffffffff821117612a3357604052565b90816020910312610d1857516001600160a01b0381168103610d185790565b51906001600160601b0382168203610d1857565b90816020910312610d1857518015158103610d185790565b600054604051631627905560e01b815233600482015290602090829060249082906001600160a01b03165afa908115612b9357600091612b75575b5015612b3157565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b612b8d915060203d8111610673576106658183612a81565b38612b29565b6040513d6000823e3d90fd5b519061ffff82168203610d1857565b51906001600160801b0382168203610d1857565b519060ff82168203610d1857565b9080601f83011215610d185760405191612be983612a65565b829060408101928311610d1857905b828210612c055750505090565b60208091612c1284612bc2565b815201910190612bf8565b604091828051612c2c81612a65565b369037828051612c3b81612a65565b36903782516339075c2560e11b8152600481018390526020908181602481305afa908115612ef157600091612ed4575b5015612dd65760015484516337f80ad760e11b8152600481018590526001600160a01b03939160c0908290602490829088165afa928315612dcb576000918297839784928597612d5c575b508151978289019089821067ffffffffffffffff831117612a3357859184526001600160601b038095168a526002541691602484518094819363044c990b60e41b835260048301525afa918215612d525750600091612d1d575b5016908501529493929190565b908382813d8311612d4b575b612d338183612a81565b81010312610a035750612d4590612ac2565b38612d10565b503d612d29565b513d6000823e3d90fd5b985095509297505060c03d8111612dc4575b612d788188612a81565b86019660c087890312610a0357508551612d93828801612b9f565b92612db8612da2828a01612bae565b996080612db160608c01612ac2565b9a01612bd0565b91939897919538612cb6565b503d612d6e565b86513d6000823e3d90fd5b9060e060018060a01b03600254169360248651809681936337f80ad760e11b835260048301525afa908115612ec95760008095819582958395612e1e575b5050509493929190565b945095509550925060e03d8111612ec2575b612e3a8186612a81565b840160e0858203126106f457845193612e54848701612b9f565b93612e60888801612bae565b9783607f8901121561085b575196612e7788612a65565b879060a0810193858511610a035750606001905b838210612eab5750505090612e9f91612bd0565b91949392388080612e14565b828091612eb784612ac2565b815201910190612e8b565b503d612e30565b84513d6000823e3d90fd5b612eeb9150823d8411610673576106658183612a81565b38612c6b565b85513d6000823e3d90fd5b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb57600091612fde575b5015612f9e576001548251630271c2cf60e61b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091612f72575b50905090565b82813d8311612f97575b612f868183612a81565b81010312610a035750518038612f6c565b503d612f7c565b6002548251630271c2cf60e61b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091612f725750905090565b612ff59150823d8411610673576106658183612a81565b38612f2b565b83513d6000823e3d90fd5b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916130ef575b50156130af57600154825163d1a640c760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161307b5750905090565b82813d83116130a8575b61308f8183612a81565b81010312610a0357506130a190612b9f565b8038612f6c565b503d613085565b600254825163d1a640c760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161307b5750905090565b6131069150823d8411610673576106658183612a81565b38613035565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916131ee575b50156131ae57600154825163484a47e760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916131815750905090565b82813d83116131a7575b6131958183612a81565b81010312610a0357506130a190612bae565b503d61318b565b600254825163484a47e760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916131815750905090565b6132059150823d8411610673576106658183612a81565b3861313b565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916132ed575b50156132ad576001548251634089a17d60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916132805750905090565b82813d83116132a6575b6132948183612a81565b81010312610a0357506130a190612ac2565b503d61328a565b6002548251634089a17d60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d5257506000916132805750905090565b6133049150823d8411610673576106658183612a81565b3861323a565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916133ec575b50156133ac57600154825163ce60dc6160e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b82813d83116133a5575b6133938183612a81565b81010312610a0357506130a190612bc2565b503d613389565b600254825163ce60dc6160e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b6134039150823d8411610673576106658183612a81565b38613339565b604080516339075c2560e11b8152600481018390526020908181602481305afa908115612ffb576000916134be575b501561347e5760015482516399149f7760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b60025482516399149f7760e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161337f5750905090565b6134d59150823d8411610673576106658183612a81565b38613438565b90816020910312610d18575163ffffffff81168103610d185790565b604080516339075c2560e11b8152600481018390529092916020918281602481305afa908115612ef1576000916135e2575b50156135a7576001548451632b275f3d60e21b8152600481019290925261ffff909316602482015291819083906001600160a01b03168180604481015b03915afa928315612d52575060009261357e57505090565b61359d9250803d106135a0575b6135958183612a81565b8101906134db565b90565b503d61358b565b6002548451632b275f3d60e21b8152600481019290925261ffff909316602482015291819083906001600160a01b0316818060448101613566565b6135f99150833d8511610673576106658183612a81565b38613529565b51906001600160481b0382168203610d1857565b519064ffffffffff82168203610d1857565b90816080910312610d185761367560606040519261364284612a49565b61364b816135ff565b8452613659602082016135ff565b602085015261366a604082016135ff565b604085015201613613565b606082015290565b6040906060825161368d81612a49565b60009181838093528260208201528286820152015282516329131d4160e01b8152826004820152602081602481305afa90811561379b57829161377d575b50156137405760025483516361f31d6d60e01b81526004810193909352608090839060249082906001600160a01b03165afa92831561373657509161370e575090565b61359d915060803d811161372f575b6137278183612a81565b810190613625565b503d61371d565b51903d90823e3d90fd5b600154835163223dea6d60e21b81526004810193909352608090839060249082906001600160a01b03165afa92831561373657509161370e575090565b613795915060203d8111610673576106658183612a81565b386136cb565b84513d84823e3d90fd5b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613886575b50156138475760025482516322f7db5960e21b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b82813d8311613840575b61382e8183612a81565b81010312610a0357506130a1906135ff565b503d613824565b6001548251620153f560ea1b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b61389d9150823d8411610673576106658183612a81565b386137d4565b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613958575b501561391857600254825163583436f560e11b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b6001548251633c96f02b60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b61396f9150823d8411610673576106658183612a81565b386138d2565b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613a2a575b50156139ea5760025482516303ddf88560e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b6001548251635b3db70f60e11b815260048101949094528190849060249082906001600160a01b03165afa918215612d52575060009161381a5750905090565b613a419150823d8411610673576106658183612a81565b386139a4565b604080516329131d4160e01b8152600481018390526020908181602481305afa908115612ffb57600091613b29575b5015613ae957600254825163ecd431db60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091613abc5750905090565b82813d8311613ae2575b613ad08183612a81565b81010312610a0357506130a190613613565b503d613ac6565b6001548251635c6c1fef60e01b815260048101949094528190849060249082906001600160a01b03165afa918215612d525750600091613abc5750905090565b613b409150823d8411610673576106658183612a81565b38613a76565b60409081516329131d4160e01b81528160048201526020908181602481305afa908115612ec957600091613c0f575b5015613bd05760025483516399eb184d60e01b815260048101939093528190839060249082906001600160a01b03165afa928315612d525750600092613bba57505090565b61359d9250803d10610673576106658183612a81565b600154835163c45d174960e01b815260048101939093528190839060249082906001600160a01b03165afa928315612d525750600092613bba57505090565b613c269150823d8411610673576106658183612a81565b38613b7556fea2646970667358221220a2fbdf93c09648eca4584d0ae0b2881c7e78b9bde01a7af1b1cdc54e3fa3c3c864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/storage/ServiceAgreementStorageProxy.sol:ServiceAgreementStorageProxy",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 19617,
        "contract": "contracts/storage/ServiceAgreementStorageProxy.sol:ServiceAgreementStorageProxy",
        "label": "storageV1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ServiceAgreementStorageV1)21793"
      },
      {
        "astId": 19620,
        "contract": "contracts/storage/ServiceAgreementStorageProxy.sol:ServiceAgreementStorageProxy",
        "label": "storageV1U1",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ServiceAgreementStorageV1U1)22676"
      }
    ],
    "types": {
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_contract(ServiceAgreementStorageV1)21793": {
        "encoding": "inplace",
        "label": "contract ServiceAgreementStorageV1",
        "numberOfBytes": "20"
      },
      "t_contract(ServiceAgreementStorageV1U1)22676": {
        "encoding": "inplace",
        "label": "contract ServiceAgreementStorageV1U1",
        "numberOfBytes": "20"
      }
    }
  }
}
