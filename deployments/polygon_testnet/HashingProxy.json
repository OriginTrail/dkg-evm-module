{
  "address": "0xEa997D7156f1EC53FF585285359e2B860114Bed5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newContractAddress",
          "type": "address"
        }
      ],
      "name": "HashFunctionContractChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newContractAddress",
          "type": "address"
        }
      ],
      "name": "NewHashFunctionContract",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callHashFunction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHashFunctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            }
          ],
          "internalType": "struct UnorderedIndexableContractDynamicSetLib.Contract[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        }
      ],
      "name": "getHashFunctionContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        }
      ],
      "name": "getHashFunctionName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        }
      ],
      "name": "isHashFunction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        }
      ],
      "name": "removeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "hashingContractAddress",
          "type": "address"
        }
      ],
      "name": "setContractAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bbbb73213eb6f98acb253280615a99938123be8fdf82812d3c835ac2e1ed559",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0xEa997D7156f1EC53FF585285359e2B860114Bed5",
    "transactionIndex": 11,
    "gasUsed": "808404",
    "logsBloom": "0x
    "blockHash": "0xf5bf2414eb5bbbd25de21f93d9e733f6a41d709803ebdfdeac55396ce43b53e4",
    "transactionHash": "0x2bbbb73213eb6f98acb253280615a99938123be8fdf82812d3c835ac2e1ed559",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 37384388,
        "transactionHash": "0x2bbbb73213eb6f98acb253280615a99938123be8fdf82812d3c835ac2e1ed559",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000044edbd5e1ec0000000000000000000000000000000000000000000000000088e2a642d834a547000000000000000000000000000000000000000000000c058be08c1d5cb3bd0500000000000000000000000000000000000000000000000088de57670252b947000000000000000000000000000000000000000000000c058be4daf93295a905",
        "logIndex": 27,
        "blockHash": "0xf5bf2414eb5bbbd25de21f93d9e733f6a41d709803ebdfdeac55396ce43b53e4"
      }
    ],
    "blockNumber": 37384388,
    "cumulativeGasUsed": "1259021",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"HashFunctionContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"NewHashFunctionContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callHashFunction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHashFunctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"internalType\":\"struct UnorderedIndexableContractDynamicSetLib.Contract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"}],\"name\":\"getHashFunctionContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"}],\"name\":\"getHashFunctionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"}],\"name\":\"isHashFunction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"hashingContractAddress\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HashingProxy.sol\":\"HashingProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HashingProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {IHashFunction} from \\\"./interface/IHashFunction.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedIndexableContractDynamicSetLib} from \\\"./utils/UnorderedIndexableContractDynamicSet.sol\\\";\\n\\ncontract HashingProxy is Named, Versioned, ContractStatus {\\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\\n\\n    event NewHashFunctionContract(uint8 indexed hashFunctionId, address newContractAddress);\\n    event HashFunctionContractChanged(uint8 indexed hashFunctionId, address newContractAddress);\\n\\n    string private constant _NAME = \\\"HashingProxy\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    UnorderedIndexableContractDynamicSetLib.Set internal hashFunctionSet;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(uint8 hashFunctionId, address hashingContractAddress) external onlyHubOwner {\\n        if (hashFunctionSet.exists(hashFunctionId)) {\\n            hashFunctionSet.update(hashFunctionId, hashingContractAddress);\\n            emit HashFunctionContractChanged(hashFunctionId, hashingContractAddress);\\n        } else {\\n            hashFunctionSet.append(hashFunctionId, hashingContractAddress);\\n            emit NewHashFunctionContract(hashFunctionId, hashingContractAddress);\\n        }\\n    }\\n\\n    function removeContract(uint8 hashFunctionId) external onlyHubOwner {\\n        hashFunctionSet.remove(hashFunctionId);\\n    }\\n\\n    function callHashFunction(uint8 hashFunctionId, bytes calldata data) external view returns (bytes32) {\\n        return IHashFunction(hashFunctionSet.get(hashFunctionId).addr).hash(data);\\n    }\\n\\n    function getHashFunctionName(uint8 hashFunctionId) external view returns (string memory) {\\n        return Named(hashFunctionSet.get(hashFunctionId).addr).name();\\n    }\\n\\n    function getHashFunctionContractAddress(uint8 hashFunctionId) external view returns (address) {\\n        return hashFunctionSet.get(hashFunctionId).addr;\\n    }\\n\\n    function getAllHashFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\\n        return hashFunctionSet.getAll();\\n    }\\n\\n    function isHashFunction(uint8 hashFunctionId) external view returns (bool) {\\n        return hashFunctionSet.exists(hashFunctionId);\\n    }\\n}\\n\",\"keccak256\":\"0x025adfeec4c165b83247442a9d36fee0bf311c01c3527bbd23401ce9879f5eee\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/abstract/ContractStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./HubDependent.sol\\\";\\n\\nabstract contract ContractStatus is HubDependent {\\n    bool public status;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function setStatus(bool _status) external onlyHubOwner {\\n        status = _status;\\n    }\\n}\\n\",\"keccak256\":\"0x1a770a3dea223c33b0d6d7e522186af2b41e6d1012209f329cd4b3cf4180ef61\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/interface/IHashFunction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IHashFunction {\\n    function hash(bytes calldata data) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2fca3d77fdcb26c5026f75259e19b326354d5c759775838fd070b49a766c75bd\",\"license\":\"MIT\"},\"contracts/interface/Indexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Indexable {\\n    function id() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa5142e26633487e63c7448e3419186e24b97353b5d5c0b5b2886c2d15884cd9d\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/utils/UnorderedIndexableContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Indexable} from \\\"../interface/Indexable.sol\\\";\\n\\nlibrary UnorderedIndexableContractDynamicSetLib {\\n    struct Contract {\\n        uint8 id;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(uint8 => uint256) indexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, uint8 id, address addr) internal {\\n        require(id != 0, \\\"IndexableContractSet: ID canot be 0\\\");\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, id), \\\"IndexableContractSet: Contract with given ID already exists\\\");\\n        self.indexPointers[id] = size(self);\\n        self.contractList.push(Contract(id, addr));\\n    }\\n\\n    function update(Set storage self, uint8 id, address addr) internal {\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        self.contractList[self.indexPointers[id]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, uint8 id) internal {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        uint256 contractToRemoveIndex = self.indexPointers[id];\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n        uint8 contractToMoveId = Indexable(contractToMove.addr).id();\\n\\n        self.indexPointers[contractToMoveId] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.indexPointers[id];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, uint8 id) internal view returns (Contract memory) {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        return self.contractList[self.indexPointers[id]];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, uint8 id) internal view returns (uint256) {\\n        return self.indexPointers[id];\\n    }\\n\\n    function getByIndex(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function exists(Set storage self, uint8 id) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return self.contractList[self.indexPointers[id]].id == id;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0xc255ea1ea548b3deb7384a5e8f2b706c53688631ca423c73c24ec5cf674055d6\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100bf57601f610e0d38819003918201601f19168301916001600160401b038311848410176100c4578084926020946040528339810103126100bf57516001600160a01b038116908190036100bf57801561007a57600080546001600160a01b031916919091179055604051610d3290816100db8239f35b60405162461bcd60e51b815260206004820152601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146108ce57508163200d2ed2146108a9578163365a86fc1461088157816344a7c8d31461085257816345ed59e51461075357816354fd4d50146107165781635c40f6f4146106d5578163802f2368146105e25781638b6602d814610451578163b58abd4614610347578163c413e5be146100e4575063f75a30a9146100a957600080fd5b346100e05760203660031901126100e0576020906001600160a01b03826100d66100d1610961565b610c2f565b0151169051908152f35b5080fd5b9050346103435781600319360112610343576100fe610961565b906024356001600160a01b0381169182820361033f5761011c6109ca565b61012584610c70565b156101c3575060ff82936101b86020936101617f87344d3e74d17609f4e724277f74dda482a7dec50d0dc2e62d7c93101dd968bc961515610a98565b61017261016d84610c70565b610b95565b61019261018c8460ff166000526001602052604060002090565b54610af8565b508054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b85519485521692a251f35b905060ff83169283156102f0576101db831515610a98565b6101e481610c70565b610287576102059060025491829160ff166000526001602052604060002090565b5584519161021283610976565b8483528360208401526801000000000000000082101561027457509161026b6020926102658560017f9f9bb0dfe32a0f6d822a9eebfa9002f04cc064f036f9dabd0b95d694bffb52899701600255610af8565b90610b45565b8451908152a251f35b634e487b7160e01b875260419052602486fd5b845162461bcd60e51b8152602081840152603b60248201527f496e64657861626c65436f6e74726163745365743a20436f6e7472616374207760448201527f69746820676976656e20494420616c72656164792065786973747300000000006064820152608490fd5b845162461bcd60e51b8152602081840152602360248201527f496e64657861626c65436f6e74726163745365743a2049442063616e6f74206260448201526206520360ec1b6064820152608490fd5b8580fd5b8280fd5b9050823461044e578060031936011261044e576002549167ffffffffffffffff831161043b57509190815192602093610385858460051b01826109a8565b8281526002825284810192827f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace855b8383106104135750505050835194859481860192828752518093528086019493905b8382106103e35786860387f35b8451805160ff1687528301516001600160a01b0316868401528796509485019493820193600191909101906103d6565b6001898192610427859c99989a9b9c610c07565b8152019201920191909796959394976103b4565b634e487b7160e01b825260419052602490fd5b80fd5b905034610343576020806003193601126105de5761046d610961565b906104766109ca565b61048261016d83610c70565b6104998260ff166000526001602052604060002090565b546002546000199391908481019081116105cb57906104c36104bd89959493610af8565b50610c07565b83810151885163af640d0f60e01b815291949190829082908a9082906001600160a01b03165afa9182156105c1578692610581575b505092610265826105239361051d6105369760ff166000526001602052604060002090565b55610af8565b60ff166000526001602052604060002090565b55600254801561056e57019061054b82610af8565b91909161055c575083905560025551f35b634e487b7160e01b8552849052602484fd5b634e487b7160e01b855260318352602485fd5b90809250813d83116105ba575b61059881836109a8565b810103126105b657519260ff841684036105b65792610265826104f8565b8480fd5b503d61058e565b89513d88823e3d90fd5b634e487b7160e01b885260118652602488fd5b8380fd5b8383346100e0576020918260031936011261044e5783816001600160a01b038561060d6100d1610961565b0151168451968780926306fdde0360e01b82525afa9384156106cb578294610641575b83518061063d8782610935565b0390f35b90919293503d8084873e61065581876109a8565b850192818685031261044e57855167ffffffffffffffff9687821161034357019284601f850112156100e057835196871161043b57508451936106a1601f8801601f19168401866109a8565b86855282878501011161044e5750936106c2918561063d9685019101610912565b90838080610630565b83513d84823e3d90fd5b9050346103435760203660031901126103435735801515809103610343576106fb6109ca565b825460ff60a01b191660a09190911b60ff60a01b1617825551f35b5050346100e057816003193601126100e057805161063d9161073782610976565b6005825264312e302e3160d81b60208301525191829182610935565b8383346100e057806003193601126100e05761076d610961565b6024359067ffffffffffffffff908183116105b657366023840112156105b657828601359182116105b65736602483850101116105b657916044959160249360209788948592836107c460018060a01b0392610c2f565b015116938089519889978896879563550f426f60e11b87528601528282860152018484013781810183018a9052601f01601f191681010301915afa928315610847578093610815575b505051908152f35b909192508382813d8311610840575b61082e81836109a8565b8101031261044e57505190838061080d565b503d610824565b8251903d90823e3d90fd5b5050346100e05760203660031901126100e057602090610878610873610961565b610c70565b90519015158152f35b5050346100e057816003193601126100e057905490516001600160a01b039091168152602090f35b5050346100e057816003193601126100e05760ff6020925460a01c1690519015158152f35b8490843461034357826003193601126103435761063d92506108ef82610976565b600c82526b48617368696e6750726f787960a01b60208301525191829182610935565b60005b8381106109255750506000910152565b8181015183820152602001610915565b604091602082526109558151809281602086015260208686019101610912565b601f01601f1916010190565b6004359060ff8216820361097157565b600080fd5b6040810190811067ffffffffffffffff82111761099257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761099257604052565b60008054604051638da5cb5b60e01b81526020926001600160a01b039284908390600490829087165afa918215610a8b578192610a51575b5050163303610a0e5750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b9091508381813d8311610a84575b610a6981836109a8565b810103126100e0575190828216820361044e57503880610a02565b503d610a5f565b50604051903d90823e3d90fd5b15610a9f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e64657861626c65436f6e74726163745365743a204164647265737320636160448201526a06e6e6f74206265203078360ac1b6064820152608490fd5b600254811015610b2f5760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b90610b7f57815181546020909301516001600160a81b031990931660ff919091161760089290921b610100600160a81b0316919091179055565b634e487b7160e01b600052600060045260246000fd5b15610b9c57565b60405162461bcd60e51b815260206004820152603b60248201527f496e64657861626c65436f6e74726163745365743a20436f6e7472616374207760448201527f69746820676976656e20494420646f65736e27742065786973747300000000006064820152608490fd5b90604051610c1481610976565b915460ff8116835260081c6001600160a01b03166020830152565b60ff9060006020604051610c4281610976565b8281520152610c5361016d82610ca1565b166000526001602052610c6d6104bd604060002054610af8565b90565b60025415610c9b5760ff1680600052600160205260ff610c94604060002054610af8565b5054161490565b50600090565b600254908115610cf55760ff169081600052600160205260406000205490811015610b2f5760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015460ff161490565b505060009056fea264697066735822122051848961b61f880e607d8d78c00f5733c2b8331a0215cd88ed1db8fe30454ea864736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146108ce57508163200d2ed2146108a9578163365a86fc1461088157816344a7c8d31461085257816345ed59e51461075357816354fd4d50146107165781635c40f6f4146106d5578163802f2368146105e25781638b6602d814610451578163b58abd4614610347578163c413e5be146100e4575063f75a30a9146100a957600080fd5b346100e05760203660031901126100e0576020906001600160a01b03826100d66100d1610961565b610c2f565b0151169051908152f35b5080fd5b9050346103435781600319360112610343576100fe610961565b906024356001600160a01b0381169182820361033f5761011c6109ca565b61012584610c70565b156101c3575060ff82936101b86020936101617f87344d3e74d17609f4e724277f74dda482a7dec50d0dc2e62d7c93101dd968bc961515610a98565b61017261016d84610c70565b610b95565b61019261018c8460ff166000526001602052604060002090565b54610af8565b508054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b85519485521692a251f35b905060ff83169283156102f0576101db831515610a98565b6101e481610c70565b610287576102059060025491829160ff166000526001602052604060002090565b5584519161021283610976565b8483528360208401526801000000000000000082101561027457509161026b6020926102658560017f9f9bb0dfe32a0f6d822a9eebfa9002f04cc064f036f9dabd0b95d694bffb52899701600255610af8565b90610b45565b8451908152a251f35b634e487b7160e01b875260419052602486fd5b845162461bcd60e51b8152602081840152603b60248201527f496e64657861626c65436f6e74726163745365743a20436f6e7472616374207760448201527f69746820676976656e20494420616c72656164792065786973747300000000006064820152608490fd5b845162461bcd60e51b8152602081840152602360248201527f496e64657861626c65436f6e74726163745365743a2049442063616e6f74206260448201526206520360ec1b6064820152608490fd5b8580fd5b8280fd5b9050823461044e578060031936011261044e576002549167ffffffffffffffff831161043b57509190815192602093610385858460051b01826109a8565b8281526002825284810192827f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace855b8383106104135750505050835194859481860192828752518093528086019493905b8382106103e35786860387f35b8451805160ff1687528301516001600160a01b0316868401528796509485019493820193600191909101906103d6565b6001898192610427859c99989a9b9c610c07565b8152019201920191909796959394976103b4565b634e487b7160e01b825260419052602490fd5b80fd5b905034610343576020806003193601126105de5761046d610961565b906104766109ca565b61048261016d83610c70565b6104998260ff166000526001602052604060002090565b546002546000199391908481019081116105cb57906104c36104bd89959493610af8565b50610c07565b83810151885163af640d0f60e01b815291949190829082908a9082906001600160a01b03165afa9182156105c1578692610581575b505092610265826105239361051d6105369760ff166000526001602052604060002090565b55610af8565b60ff166000526001602052604060002090565b55600254801561056e57019061054b82610af8565b91909161055c575083905560025551f35b634e487b7160e01b8552849052602484fd5b634e487b7160e01b855260318352602485fd5b90809250813d83116105ba575b61059881836109a8565b810103126105b657519260ff841684036105b65792610265826104f8565b8480fd5b503d61058e565b89513d88823e3d90fd5b634e487b7160e01b885260118652602488fd5b8380fd5b8383346100e0576020918260031936011261044e5783816001600160a01b038561060d6100d1610961565b0151168451968780926306fdde0360e01b82525afa9384156106cb578294610641575b83518061063d8782610935565b0390f35b90919293503d8084873e61065581876109a8565b850192818685031261044e57855167ffffffffffffffff9687821161034357019284601f850112156100e057835196871161043b57508451936106a1601f8801601f19168401866109a8565b86855282878501011161044e5750936106c2918561063d9685019101610912565b90838080610630565b83513d84823e3d90fd5b9050346103435760203660031901126103435735801515809103610343576106fb6109ca565b825460ff60a01b191660a09190911b60ff60a01b1617825551f35b5050346100e057816003193601126100e057805161063d9161073782610976565b6005825264312e302e3160d81b60208301525191829182610935565b8383346100e057806003193601126100e05761076d610961565b6024359067ffffffffffffffff908183116105b657366023840112156105b657828601359182116105b65736602483850101116105b657916044959160249360209788948592836107c460018060a01b0392610c2f565b015116938089519889978896879563550f426f60e11b87528601528282860152018484013781810183018a9052601f01601f191681010301915afa928315610847578093610815575b505051908152f35b909192508382813d8311610840575b61082e81836109a8565b8101031261044e57505190838061080d565b503d610824565b8251903d90823e3d90fd5b5050346100e05760203660031901126100e057602090610878610873610961565b610c70565b90519015158152f35b5050346100e057816003193601126100e057905490516001600160a01b039091168152602090f35b5050346100e057816003193601126100e05760ff6020925460a01c1690519015158152f35b8490843461034357826003193601126103435761063d92506108ef82610976565b600c82526b48617368696e6750726f787960a01b60208301525191829182610935565b60005b8381106109255750506000910152565b8181015183820152602001610915565b604091602082526109558151809281602086015260208686019101610912565b601f01601f1916010190565b6004359060ff8216820361097157565b600080fd5b6040810190811067ffffffffffffffff82111761099257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761099257604052565b60008054604051638da5cb5b60e01b81526020926001600160a01b039284908390600490829087165afa918215610a8b578192610a51575b5050163303610a0e5750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b9091508381813d8311610a84575b610a6981836109a8565b810103126100e0575190828216820361044e57503880610a02565b503d610a5f565b50604051903d90823e3d90fd5b15610a9f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e64657861626c65436f6e74726163745365743a204164647265737320636160448201526a06e6e6f74206265203078360ac1b6064820152608490fd5b600254811015610b2f5760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b90610b7f57815181546020909301516001600160a81b031990931660ff919091161760089290921b610100600160a81b0316919091179055565b634e487b7160e01b600052600060045260246000fd5b15610b9c57565b60405162461bcd60e51b815260206004820152603b60248201527f496e64657861626c65436f6e74726163745365743a20436f6e7472616374207760448201527f69746820676976656e20494420646f65736e27742065786973747300000000006064820152608490fd5b90604051610c1481610976565b915460ff8116835260081c6001600160a01b03166020830152565b60ff9060006020604051610c4281610976565b8281520152610c5361016d82610ca1565b166000526001602052610c6d6104bd604060002054610af8565b90565b60025415610c9b5760ff1680600052600160205260ff610c94604060002054610af8565b5054161490565b50600090565b600254908115610cf55760ff169081600052600160205260406000205490811015610b2f5760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015460ff161490565b505060009056fea264697066735822122051848961b61f880e607d8d78c00f5733c2b8331a0215cd88ed1db8fe30454ea864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/HashingProxy.sol:HashingProxy",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 15379,
        "contract": "contracts/HashingProxy.sol:HashingProxy",
        "label": "status",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8789,
        "contract": "contracts/HashingProxy.sol:HashingProxy",
        "label": "hashFunctionSet",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Set)24090_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Contract)24081_storage)dyn_storage": {
        "base": "t_struct(Contract)24081_storage",
        "encoding": "dynamic_array",
        "label": "struct UnorderedIndexableContractDynamicSetLib.Contract[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Contract)24081_storage": {
        "encoding": "inplace",
        "label": "struct UnorderedIndexableContractDynamicSetLib.Contract",
        "members": [
          {
            "astId": 24078,
            "contract": "contracts/HashingProxy.sol:HashingProxy",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 24080,
            "contract": "contracts/HashingProxy.sol:HashingProxy",
            "label": "addr",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)24090_storage": {
        "encoding": "inplace",
        "label": "struct UnorderedIndexableContractDynamicSetLib.Set",
        "members": [
          {
            "astId": 24085,
            "contract": "contracts/HashingProxy.sol:HashingProxy",
            "label": "indexPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_uint256)"
          },
          {
            "astId": 24089,
            "contract": "contracts/HashingProxy.sol:HashingProxy",
            "label": "contractList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Contract)24081_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
