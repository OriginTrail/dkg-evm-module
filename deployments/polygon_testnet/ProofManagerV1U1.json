{
  "address": "0x88D43b01E99D55B73733F5a791a7a9DC82946d9f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        }
      ],
      "name": "NodeAlreadyRewarded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "rank",
          "type": "uint8"
        }
      ],
      "name": "NodeNotAwarded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proofWindowOpen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proofWindowClose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeNow",
          "type": "uint256"
        }
      ],
      "name": "ProofWindowClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "ServiceAgreementDoesntExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        }
      ],
      "name": "ServiceAgreementHasBeenExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "chunkHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "challenge",
          "type": "uint256"
        }
      ],
      "name": "WrongMerkleProof",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "keyword",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "ProofSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assertionStorage",
      "outputs": [
        {
          "internalType": "contract AssertionStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "assertionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "challenge",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashingProxy",
      "outputs": [
        {
          "internalType": "contract HashingProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityStorage",
      "outputs": [
        {
          "internalType": "contract IdentityStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "isProofWindowOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parametersStorage",
      "outputs": [
        {
          "internalType": "contract ParametersStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profileStorage",
      "outputs": [
        {
          "internalType": "contract ProfileStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reqs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "keyword",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "hashFunctionId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "epoch",
              "type": "uint16"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "chunkHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ServiceAgreementStructsV1.ProofInputArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "sendProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceAgreementStorageProxy",
      "outputs": [
        {
          "internalType": "contract ServiceAgreementStorageProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "req",
          "type": "bool"
        }
      ],
      "name": "setReq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x934bdd2be04116f121c3cac5aae93303af2fd5d73707199eb529942d7e9bc65b",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0x88D43b01E99D55B73733F5a791a7a9DC82946d9f",
    "transactionIndex": 19,
    "gasUsed": "1967918",
    "logsBloom": "0x
    "blockHash": "0x5cd67dd39568f3cc273667d436f24181c9533a73b8686a69a45f3a68c133a253",
    "transactionHash": "0x934bdd2be04116f121c3cac5aae93303af2fd5d73707199eb529942d7e9bc65b",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 37384546,
        "transactionHash": "0x934bdd2be04116f121c3cac5aae93303af2fd5d73707199eb529942d7e9bc65b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f19fde4077a4200000000000000000000000000000000000000000000000084c5a3d9da5c9a4800000000000000000000000000000000000000000000207c4693f4718f035b8100000000000000000000000000000000000000000000000084b689dbf655200600000000000000000000000000000000000000000000207c46a30e6f730ad5c3",
        "logIndex": 54,
        "blockHash": "0x5cd67dd39568f3cc273667d436f24181c9533a73b8686a69a45f3a68c133a253"
      }
    ],
    "blockNumber": 37384546,
    "cumulativeGasUsed": "2964201",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"}],\"name\":\"NodeAlreadyRewarded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"rank\",\"type\":\"uint8\"}],\"name\":\"NodeNotAwarded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proofWindowOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proofWindowClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"ProofWindowClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"ServiceAgreementDoesntExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"}],\"name\":\"ServiceAgreementHasBeenExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"chunkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"}],\"name\":\"WrongMerkleProof\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyword\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assertionStorage\",\"outputs\":[{\"internalType\":\"contract AssertionStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"getChallenge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashingProxy\",\"outputs\":[{\"internalType\":\"contract HashingProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IdentityStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"isProofWindowOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parametersStorage\",\"outputs\":[{\"internalType\":\"contract ParametersStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileStorage\",\"outputs\":[{\"internalType\":\"contract ProfileStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reqs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"keyword\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"chunkHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ServiceAgreementStructsV1.ProofInputArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"sendProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceAgreementStorageProxy\",\"outputs\":[{\"internalType\":\"contract ServiceAgreementStorageProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"req\",\"type\":\"bool\"}],\"name\":\"setReq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProofManagerV1U1.sol\":\"ProofManagerV1U1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ICustodian} from \\\"./interface/ICustodian.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Guardian is HubDependent {\\n    event TokenTransferred(address indexed custodian, uint256 amount);\\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\\n\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function transferTokens(address payable custodian) external onlyHubOwner {\\n        require(custodian != address(0x0), \\\"Custodian cannot be a zero address\\\");\\n        uint contractSize;\\n        assembly {\\n            contractSize := extcodesize(custodian)\\n        }\\n        require(contractSize > 0, \\\"Cannot transfer tokens to custodian that is not a contract!\\\");\\n\\n        ICustodian custodianContract = ICustodian(custodian);\\n        bool hasOwnersFunction = false;\\n        try custodianContract.getOwners() returns (address[] memory owners) {\\n            hasOwnersFunction = true;\\n            require(owners.length > 0, \\\"Cannot transfer tokens to custodian without owners defined!\\\");\\n        } catch {}\\n        require(hasOwnersFunction, \\\"Cannot transfer tokens to custodian without getOwners function!\\\");\\n\\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\\n        require(transactionResult, \\\"Token transaction execution failed!\\\");\\n\\n        emit TokenTransferred(custodian, balanceTransferred);\\n    }\\n\\n    function withdrawMisplacedOTP() external onlyHubOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\\n    }\\n\\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\\n        require(tokenContractAddress != address(tokenContract), \\\"Cannot use this function with the TRAC contract\\\");\\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\\n\\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\\n        if (balance > 0) {\\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\\n            require(transactionResult, \\\"Token transaction execution failed\\\");\\n        }\\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcef9797032f7c9aae94d003e52a83ae8e978b1ca5b3fbca261e552252d3de8\",\"license\":\"MIT\"},\"contracts/HashingProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {IHashFunction} from \\\"./interface/IHashFunction.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedIndexableContractDynamicSetLib} from \\\"./utils/UnorderedIndexableContractDynamicSet.sol\\\";\\n\\ncontract HashingProxy is Named, Versioned, ContractStatus {\\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\\n\\n    event NewHashFunctionContract(uint8 indexed hashFunctionId, address newContractAddress);\\n    event HashFunctionContractChanged(uint8 indexed hashFunctionId, address newContractAddress);\\n\\n    string private constant _NAME = \\\"HashingProxy\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    UnorderedIndexableContractDynamicSetLib.Set internal hashFunctionSet;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(uint8 hashFunctionId, address hashingContractAddress) external onlyHubOwner {\\n        if (hashFunctionSet.exists(hashFunctionId)) {\\n            hashFunctionSet.update(hashFunctionId, hashingContractAddress);\\n            emit HashFunctionContractChanged(hashFunctionId, hashingContractAddress);\\n        } else {\\n            hashFunctionSet.append(hashFunctionId, hashingContractAddress);\\n            emit NewHashFunctionContract(hashFunctionId, hashingContractAddress);\\n        }\\n    }\\n\\n    function removeContract(uint8 hashFunctionId) external onlyHubOwner {\\n        hashFunctionSet.remove(hashFunctionId);\\n    }\\n\\n    function callHashFunction(uint8 hashFunctionId, bytes calldata data) external view returns (bytes32) {\\n        return IHashFunction(hashFunctionSet.get(hashFunctionId).addr).hash(data);\\n    }\\n\\n    function getHashFunctionName(uint8 hashFunctionId) external view returns (string memory) {\\n        return Named(hashFunctionSet.get(hashFunctionId).addr).name();\\n    }\\n\\n    function getHashFunctionContractAddress(uint8 hashFunctionId) external view returns (address) {\\n        return hashFunctionSet.get(hashFunctionId).addr;\\n    }\\n\\n    function getAllHashFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\\n        return hashFunctionSet.getAll();\\n    }\\n\\n    function isHashFunction(uint8 hashFunctionId) external view returns (bool) {\\n        return hashFunctionSet.exists(hashFunctionId);\\n    }\\n}\\n\",\"keccak256\":\"0x025adfeec4c165b83247442a9d36fee0bf311c01c3527bbd23401ce9879f5eee\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/ProofManagerV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HashingProxy} from \\\"./HashingProxy.sol\\\";\\nimport {Staking} from \\\"./Staking.sol\\\";\\nimport {AssertionStorage} from \\\"./storage/AssertionStorage.sol\\\";\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ParametersStorage} from \\\"./storage/ParametersStorage.sol\\\";\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ServiceAgreementStorageProxy} from \\\"./storage/ServiceAgreementStorageProxy.sol\\\";\\nimport {AbstractAsset} from \\\"./abstract/AbstractAsset.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"./structs/ServiceAgreementStructsV1.sol\\\";\\nimport {ContentAssetErrors} from \\\"./errors/assets/ContentAssetErrors.sol\\\";\\nimport {GeneralErrors} from \\\"./errors/GeneralErrors.sol\\\";\\nimport {ServiceAgreementErrorsV1U1} from \\\"./errors/ServiceAgreementErrorsV1U1.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract ProofManagerV1U1 is Named, Versioned, ContractStatus, Initializable {\\n    event ProofSubmitted(\\n        address indexed assetContract,\\n        uint256 indexed tokenId,\\n        bytes keyword,\\n        uint8 hashFunctionId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 indexed identityId\\n    );\\n\\n    string private constant _NAME = \\\"ProofManagerV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    bool[4] public reqs = [false, false, false, false];\\n\\n    HashingProxy public hashingProxy;\\n    Staking public stakingContract;\\n    AssertionStorage public assertionStorage;\\n    IdentityStorage public identityStorage;\\n    ParametersStorage public parametersStorage;\\n    ProfileStorage public profileStorage;\\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        hashingProxy = HashingProxy(hub.getContractAddress(\\\"HashingProxy\\\"));\\n        stakingContract = Staking(hub.getContractAddress(\\\"Staking\\\"));\\n        assertionStorage = AssertionStorage(hub.getContractAddress(\\\"AssertionStorage\\\"));\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n        parametersStorage = ParametersStorage(hub.getContractAddress(\\\"ParametersStorage\\\"));\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\\n            hub.getContractAddress(\\\"ServiceAgreementStorageProxy\\\")\\n        );\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function isProofWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n        uint256 startTime = sasProxy.getAgreementStartTime(agreementId);\\n\\n        if (startTime == 0) revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\\n                agreementId,\\n                startTime,\\n                sasProxy.getAgreementEpochsNumber(agreementId),\\n                sasProxy.getAgreementEpochLength(agreementId)\\n            );\\n\\n        uint256 timeNow = block.timestamp;\\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\\n        uint8 proofWindowOffsetPerc = sasProxy.getAgreementProofWindowOffsetPerc(agreementId);\\n\\n        uint256 proofWindowOffset = (epochLength * proofWindowOffsetPerc) / 100;\\n        uint256 proofWindowDuration = (epochLength * parametersStorage.proofWindowDurationPerc()) / 100;\\n\\n        return (timeNow >= (startTime + epochLength * epoch + proofWindowOffset) &&\\n            timeNow < (startTime + epochLength * epoch + proofWindowOffset + proofWindowDuration));\\n    }\\n\\n    function getChallenge(\\n        address assetContract,\\n        uint256 tokenId,\\n        uint16 epoch\\n    ) public view returns (bytes32 assertionId, uint256 challenge) {\\n        return _getChallenge(msg.sender, assetContract, tokenId, epoch);\\n    }\\n\\n    function sendProof(ServiceAgreementStructsV1.ProofInputArgs calldata args) external {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        bytes32 agreementId = hashingProxy.callHashFunction(\\n            args.hashFunctionId,\\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\\n        );\\n\\n        if (!sasProxy.serviceAgreementExists(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n\\n        uint256 latestFinalizedStateIndex = AbstractAsset(args.assetContract).getAssertionIdsLength(args.tokenId) - 1;\\n\\n        if (!reqs[0] && !isProofWindowOpen(agreementId, args.epoch)) {\\n            uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\\n\\n            uint256 actualProofWindowStart = (sasProxy.getAgreementStartTime(agreementId) +\\n                args.epoch *\\n                epochLength +\\n                (sasProxy.getAgreementProofWindowOffsetPerc(agreementId) * epochLength) /\\n                100);\\n\\n            revert ServiceAgreementErrorsV1U1.ProofWindowClosed(\\n                agreementId,\\n                args.epoch,\\n                latestFinalizedStateIndex,\\n                actualProofWindowStart,\\n                actualProofWindowStart + (parametersStorage.proofWindowDurationPerc() * epochLength) / 100,\\n                block.timestamp\\n            );\\n        }\\n\\n        IdentityStorage ids = identityStorage;\\n\\n        uint72 identityId = ids.getIdentityId(msg.sender);\\n        bytes32 commitId = keccak256(abi.encodePacked(agreementId, args.epoch, latestFinalizedStateIndex, identityId));\\n\\n        if (!reqs[1] && (sasProxy.getCommitSubmissionScore(commitId) == 0))\\n            revert ServiceAgreementErrorsV1U1.NodeAlreadyRewarded(\\n                agreementId,\\n                args.epoch,\\n                latestFinalizedStateIndex,\\n                identityId,\\n                profileStorage.getNodeId(identityId)\\n            );\\n\\n        bytes32 nextCommitId = sasProxy.getV1U1AgreementEpochSubmissionHead(\\n            agreementId,\\n            args.epoch,\\n            latestFinalizedStateIndex\\n        );\\n        uint32 r0 = parametersStorage.r0();\\n        uint8 i;\\n        while ((identityId != sasProxy.getCommitSubmissionIdentityId(nextCommitId)) && (i < r0)) {\\n            nextCommitId = keccak256(\\n                abi.encodePacked(\\n                    agreementId,\\n                    args.epoch,\\n                    latestFinalizedStateIndex,\\n                    sasProxy.getCommitSubmissionNextIdentityId(nextCommitId)\\n                )\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (!reqs[2] && (i >= r0))\\n            revert ServiceAgreementErrorsV1U1.NodeNotAwarded(\\n                agreementId,\\n                args.epoch,\\n                latestFinalizedStateIndex,\\n                identityId,\\n                profileStorage.getNodeId(identityId),\\n                i\\n            );\\n\\n        bytes32 merkleRoot;\\n        uint256 challenge;\\n        (merkleRoot, challenge) = _getChallenge(msg.sender, args.assetContract, args.tokenId, args.epoch);\\n\\n        if (\\n            !reqs[3] &&\\n            !MerkleProof.verify(args.proof, merkleRoot, keccak256(abi.encodePacked(args.chunkHash, challenge)))\\n        )\\n            revert ServiceAgreementErrorsV1U1.WrongMerkleProof(\\n                agreementId,\\n                args.epoch,\\n                latestFinalizedStateIndex,\\n                identityId,\\n                profileStorage.getNodeId(identityId),\\n                args.proof,\\n                merkleRoot,\\n                args.chunkHash,\\n                challenge\\n            );\\n\\n        emit ProofSubmitted(\\n            args.assetContract,\\n            args.tokenId,\\n            args.keyword,\\n            args.hashFunctionId,\\n            args.epoch,\\n            latestFinalizedStateIndex,\\n            identityId\\n        );\\n\\n        uint96 reward = (sasProxy.getAgreementTokenAmount(agreementId) /\\n            (sasProxy.getAgreementEpochsNumber(agreementId) - args.epoch + 1) /\\n            (r0 - sasProxy.getAgreementRewardedNodesNumber(agreementId, args.epoch)));\\n\\n        stakingContract.addReward(agreementId, identityId, reward);\\n        sasProxy.setAgreementTokenAmount(agreementId, sasProxy.getAgreementTokenAmount(agreementId) - reward);\\n        sasProxy.incrementAgreementRewardedNodesNumber(agreementId, args.epoch);\\n\\n        // To make sure that node already received reward\\n        sasProxy.setCommitSubmissionScore(commitId, 0);\\n    }\\n\\n    function setReq(uint256 index, bool req) external onlyHubOwner {\\n        reqs[index] = req;\\n    }\\n\\n    function _getChallenge(\\n        address sender,\\n        address assetContract,\\n        uint256 tokenId,\\n        uint16 epoch\\n    ) internal view returns (bytes32 assertionId, uint256 challenge) {\\n        uint72 identityId = identityStorage.getIdentityId(sender);\\n\\n        AbstractAsset generalAssetInterface = AbstractAsset(assetContract);\\n        bytes32 latestFinalizedState = generalAssetInterface.getLatestAssertionId(tokenId);\\n\\n        uint256 assertionChunksNumber = assertionStorage.getAssertionChunksNumber(latestFinalizedState);\\n\\n        // blockchash() function only works for last 256 blocks (25.6 min window in case of 6s block time)\\n        // TODO: figure out how to achieve randomness\\n        return (latestFinalizedState, uint256(sha256(abi.encodePacked(epoch, identityId))) % assertionChunksNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xceb62332b709d93d2c6b6d5605fde81b6c7d6418454acfdf76abe3fdfaf612d5\",\"license\":\"MIT\"},\"contracts/ShardingTable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"./structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"./constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTable is Named, Versioned, ContractStatus, Initializable {\\n    event NodeAdded(uint72 indexed identityId, bytes nodeId, uint96 ask, uint96 stake);\\n    event NodeRemoved(uint72 indexed identityId, bytes nodeId);\\n\\n    string private constant _NAME = \\\"ShardingTable\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    ProfileStorage public profileStorage;\\n    ShardingTableStorage public shardingTableStorage;\\n    StakingStorage public stakingStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        return _getShardingTable(startingIdentityId, nodesNumber);\\n    }\\n\\n    function getShardingTable() external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStorage sts = shardingTableStorage;\\n        return _getShardingTable(sts.head(), sts.nodesCount());\\n    }\\n\\n    function pushBack(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.tail() != NULL) sts.link(sts.tail(), identityId);\\n\\n        sts.setTail(identityId);\\n\\n        if (sts.head() == NULL) sts.setHead(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function pushFront(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.head() != NULL) sts.link(identityId, sts.head());\\n\\n        shardingTableStorage.setHead(identityId);\\n\\n        if (sts.tail() == NULL) sts.setTail(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function removeNode(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        ShardingTableStructs.Node memory nodeToRemove = sts.getNode(identityId);\\n\\n        uint72 head = sts.head();\\n        uint72 tail = sts.tail();\\n\\n        if ((head == identityId) && (tail == identityId)) {\\n            sts.setHead(NULL);\\n            sts.setTail(NULL);\\n        } else if (tail == identityId) {\\n            sts.setTail(nodeToRemove.prevIdentityId);\\n            sts.setNextIdentityId(tail, NULL);\\n        } else if (head == identityId) {\\n            sts.setHead(nodeToRemove.nextIdentityId);\\n            sts.setPrevIdentityId(head, NULL);\\n        } else {\\n            sts.link(nodeToRemove.prevIdentityId, nodeToRemove.nextIdentityId);\\n        }\\n\\n        sts.deleteNodeObject(identityId);\\n        sts.decrementNodesCount();\\n\\n        emit NodeRemoved(identityId, ps.getNodeId(identityId));\\n    }\\n\\n    function _getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) internal view virtual returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStructs.NodeInfo[] memory nodesPage;\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        if ((sts.nodesCount() == 0) || (nodesNumber == 0)) {\\n            return nodesPage;\\n        }\\n\\n        ShardingTableStructs.Node memory startingNode = sts.getNode(startingIdentityId);\\n\\n        require((startingIdentityId == NULL) || (startingNode.identityId != NULL), \\\"Wrong starting Identity ID\\\");\\n\\n        nodesPage = new ShardingTableStructs.NodeInfo[](nodesNumber);\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        nodesPage[0] = ShardingTableStructs.NodeInfo({\\n            nodeId: ps.getNodeId(startingIdentityId),\\n            identityId: startingIdentityId,\\n            ask: ps.getAsk(startingNode.identityId),\\n            stake: ss.totalStakes(startingNode.identityId)\\n        });\\n\\n        uint72 nextIdentityId = startingIdentityId;\\n        uint72 i = 1;\\n        while ((i < nodesNumber) && (nextIdentityId != NULL)) {\\n            nextIdentityId = sts.getNode(nextIdentityId).nextIdentityId;\\n\\n            nodesPage[i] = ShardingTableStructs.NodeInfo({\\n                nodeId: ps.getNodeId(nextIdentityId),\\n                identityId: nextIdentityId,\\n                ask: ps.getAsk(nextIdentityId),\\n                stake: ss.totalStakes(nextIdentityId)\\n            });\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n}\\n\",\"keccak256\":\"0xdc5fcd9c08b1794fc7c251733a15ae9af7f8744ec80b1a70924f6219ca3e62cd\",\"license\":\"MIT\"},\"contracts/Shares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract Shares is HubDependent, ERC20, ERC20Burnable {\\n    constructor(\\n        address hubAddress,\\n        string memory name,\\n        string memory symbol\\n    )\\n        HubDependent(hubAddress)\\n        ERC20(name, symbol) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function mint(address to, uint256 amount) external onlyContracts {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5ba555c0e9109f8e9a17a98a7a30643c9849059ea9b80693c9e2d460d679666d\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ShardingTable} from \\\"./ShardingTable.sol\\\";\\nimport {Shares} from \\\"./Shares.sol\\\";\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ParametersStorage} from \\\"./storage/ParametersStorage.sol\\\";\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ServiceAgreementStorageProxy} from \\\"./storage/ServiceAgreementStorageProxy.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ADMIN_KEY} from \\\"./constants/IdentityConstants.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Staking is Named, Versioned, ContractStatus, Initializable {\\n    event StakeIncreased(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        address indexed staker,\\n        uint96 oldStake,\\n        uint96 newStake\\n    );\\n    event StakeWithdrawalStarted(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        address indexed staker,\\n        uint96 oldStake,\\n        uint96 newStake,\\n        uint256 withdrawalPeriodEnd\\n    );\\n    event StakeWithdrawn(uint72 indexed identityId, bytes nodeId, address indexed staker, uint96 withdrawnStakeAmount);\\n    event AccumulatedOperatorFeeIncreased(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        uint96 oldAccumulatedOperatorFee,\\n        uint96 newAccumulatedOperatorFee\\n    );\\n    event OperatorFeeUpdated(uint72 indexed identityId, bytes nodeId, uint8 operatorFee);\\n\\n    string private constant _NAME = \\\"Staking\\\";\\n    string private constant _VERSION = \\\"1.0.2\\\";\\n\\n    ShardingTable public shardingTableContract;\\n    IdentityStorage public identityStorage;\\n    ParametersStorage public parametersStorage;\\n    ProfileStorage public profileStorage;\\n    StakingStorage public stakingStorage;\\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\\n    ShardingTableStorage public shardingTableStorage;\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    modifier onlyAdmin(uint72 identityId) {\\n        _checkAdmin(identityId);\\n        _;\\n    }\\n\\n    function initialize() public onlyHubOwner {\\n        shardingTableContract = ShardingTable(hub.getContractAddress(\\\"ShardingTable\\\"));\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n        parametersStorage = ParametersStorage(hub.getContractAddress(\\\"ParametersStorage\\\"));\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\\n            hub.getContractAddress(\\\"ServiceAgreementStorageProxy\\\")\\n        );\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function addStake(address sender, uint72 identityId, uint96 stakeAmount) external onlyContracts {\\n        _addStake(sender, identityId, stakeAmount);\\n    }\\n\\n    function addStake(uint72 identityId, uint96 stakeAmount) external onlyAdmin(identityId) {\\n        _addStake(msg.sender, identityId, stakeAmount);\\n    }\\n\\n    function startStakeWithdrawal(uint72 identityId, uint96 sharesToBurn) external {\\n        require(sharesToBurn != 0, \\\"Withdrawal amount cannot be 0\\\");\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\\n\\n        require(sharesToBurn <= sharesContract.balanceOf(msg.sender), \\\"sharesToBurn must be <= balance\\\");\\n\\n        uint96 oldStake = ss.totalStakes(identityId);\\n        uint96 stakeWithdrawalAmount = uint96((uint256(oldStake) * sharesToBurn) / sharesContract.totalSupply());\\n        uint96 newStake = oldStake - stakeWithdrawalAmount;\\n        uint96 newStakeWithdrawalAmount = ss.getWithdrawalRequestAmount(identityId, msg.sender) + stakeWithdrawalAmount;\\n\\n        ParametersStorage params = parametersStorage;\\n\\n        uint256 withdrawalPeriodEnd = block.timestamp + params.stakeWithdrawalDelay();\\n        ss.createWithdrawalRequest(identityId, msg.sender, newStakeWithdrawalAmount, withdrawalPeriodEnd);\\n        ss.setTotalStake(identityId, newStake);\\n        sharesContract.burnFrom(msg.sender, sharesToBurn);\\n\\n        if (shardingTableStorage.nodeExists(identityId) && (newStake < params.minimumStake())) {\\n            shardingTableContract.removeNode(identityId);\\n        }\\n\\n        emit StakeWithdrawalStarted(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            msg.sender,\\n            oldStake,\\n            newStake,\\n            withdrawalPeriodEnd\\n        );\\n    }\\n\\n    function withdrawStake(uint72 identityId) external {\\n        ProfileStorage ps = profileStorage;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        StakingStorage ss = stakingStorage;\\n\\n        uint96 stakeWithdrawalAmount;\\n        uint256 withdrawalTimestamp;\\n        (stakeWithdrawalAmount, withdrawalTimestamp) = ss.withdrawalRequests(identityId, msg.sender);\\n\\n        require(stakeWithdrawalAmount != 0, \\\"Withdrawal hasn't been initiated\\\");\\n        require(withdrawalTimestamp < block.timestamp, \\\"Withdrawal period hasn't ended\\\");\\n\\n        ss.deleteWithdrawalRequest(identityId, msg.sender);\\n        ss.transferStake(msg.sender, stakeWithdrawalAmount);\\n\\n        emit StakeWithdrawn(identityId, ps.getNodeId(identityId), msg.sender, stakeWithdrawalAmount);\\n    }\\n\\n    function addReward(bytes32 agreementId, uint72 identityId, uint96 rewardAmount) external onlyContracts {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n        StakingStorage ss = stakingStorage;\\n\\n        uint96 operatorFee = (rewardAmount * ss.operatorFees(identityId)) / 100;\\n        uint96 delegatorsReward = rewardAmount - operatorFee;\\n\\n        ProfileStorage ps = profileStorage;\\n\\n        uint96 oldAccumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\\n        uint96 oldStake = ss.totalStakes(identityId);\\n\\n        if (operatorFee != 0) {\\n            ps.setAccumulatedOperatorFee(identityId, oldAccumulatedOperatorFee + operatorFee);\\n            sasProxy.transferAgreementTokens(agreementId, address(ps), operatorFee);\\n        }\\n\\n        if (delegatorsReward != 0) {\\n            ss.setTotalStake(identityId, oldStake + delegatorsReward);\\n            sasProxy.transferAgreementTokens(agreementId, address(ss), delegatorsReward);\\n\\n            if (!shardingTableStorage.nodeExists(identityId) && oldStake >= parametersStorage.minimumStake()) {\\n                shardingTableContract.pushBack(identityId);\\n            }\\n        }\\n\\n        emit AccumulatedOperatorFeeIncreased(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            oldAccumulatedOperatorFee,\\n            oldAccumulatedOperatorFee + operatorFee\\n        );\\n\\n        address sasAddress;\\n        if (sasProxy.agreementV1Exists(agreementId)) {\\n            sasAddress = sasProxy.agreementV1StorageAddress();\\n        } else {\\n            sasAddress = sasProxy.agreementV1U1StorageAddress();\\n        }\\n\\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sasAddress, oldStake, oldStake + delegatorsReward);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function slash(uint72 identityId) external onlyContracts {\\n        // TBD\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint8 operatorFee) external onlyAdmin(identityId) {\\n        require(operatorFee <= 100, \\\"Operator fee out of [0, 100]\\\");\\n        stakingStorage.setOperatorFee(identityId, operatorFee);\\n\\n        emit OperatorFeeUpdated(identityId, profileStorage.getNodeId(identityId), operatorFee);\\n    }\\n\\n    function _addStake(address sender, uint72 identityId, uint96 stakeAmount) internal virtual {\\n        StakingStorage ss = stakingStorage;\\n        ProfileStorage ps = profileStorage;\\n        ParametersStorage params = parametersStorage;\\n        IERC20 tknc = tokenContract;\\n\\n        uint96 oldStake = ss.totalStakes(identityId);\\n        uint96 newStake = oldStake + stakeAmount;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n        require(tknc.allowance(sender, address(this)) >= stakeAmount, \\\"Allowance < stakeAmount\\\");\\n        require(newStake <= params.maximumStake(), \\\"Exceeded the maximum stake\\\");\\n\\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\\n\\n        uint256 sharesMinted;\\n        if (sharesContract.totalSupply() == 0) {\\n            sharesMinted = stakeAmount;\\n        } else {\\n            sharesMinted = ((stakeAmount * sharesContract.totalSupply()) / oldStake);\\n        }\\n        sharesContract.mint(sender, sharesMinted);\\n\\n        ss.setTotalStake(identityId, newStake);\\n        tknc.transferFrom(sender, address(ss), stakeAmount);\\n\\n        if (!shardingTableStorage.nodeExists(identityId) && newStake >= params.minimumStake()) {\\n            shardingTableContract.pushBack(identityId);\\n        }\\n\\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sender, oldStake, newStake);\\n    }\\n\\n    function _checkAdmin(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\\n            \\\"Admin function\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8100c10505e4d64c2f1f7f388616bc7d82c3a00fa66299cfb79ad4e3a6538d9a\",\"license\":\"MIT\"},\"contracts/abstract/AbstractAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\nabstract contract AbstractAsset is Named, Versioned, HubDependent {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function getAssertionIds(uint256 tokenId) public view virtual returns (bytes32[] memory);\\n\\n    function getLatestAssertionId(uint256 tokenId) external view returns (bytes32) {\\n        bytes32[] memory assertions = getAssertionIds(tokenId);\\n        return assertions[assertions.length - 1];\\n    }\\n\\n    function getAssertionIdByIndex(uint256 tokenId, uint256 index) external view returns (bytes32) {\\n        bytes32[] memory assertions = getAssertionIds(tokenId);\\n        return assertions[index];\\n    }\\n\\n    function getAssertionIdsLength(uint256 tokenId) external view returns (uint256) {\\n        return getAssertionIds(tokenId).length;\\n    }\\n}\\n\",\"keccak256\":\"0x3facdea0bc5feabf23b7ff13898e036a6b3a521dfc849a461b564032737f8bf3\",\"license\":\"MIT\"},\"contracts/abstract/ContractStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./HubDependent.sol\\\";\\n\\nabstract contract ContractStatus is HubDependent {\\n    bool public status;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function setStatus(bool _status) external onlyHubOwner {\\n        status = _status;\\n    }\\n}\\n\",\"keccak256\":\"0x1a770a3dea223c33b0d6d7e522186af2b41e6d1012209f329cd4b3cf4180ef61\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/constants/IdentityConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint256 constant ADMIN_KEY = 1;\\nuint256 constant OPERATIONAL_KEY = 2;\\nuint256 constant ECDSA = 1;\\nuint256 constant RSA = 2;\\n\",\"keccak256\":\"0x29659af4aa4e72f889ceee74029f11aac7d40b5a3f6d3f55323863be1a2a587c\",\"license\":\"MIT\"},\"contracts/constants/ShardingTableConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint72 constant NULL = 0;\\n\",\"keccak256\":\"0xe80366170c622c9277da5d2bfbe7883b4b2e9d77c8f9407a3ce964c99ab24aa7\",\"license\":\"MIT\"},\"contracts/errors/GeneralErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary GeneralErrors {\\n    error OnlyHubOwnerFunction(address caller);\\n    error OnlyHubContractsFunction(address caller);\\n}\\n\",\"keccak256\":\"0x8b4676f9bcab2615efa6de8c4dd9a6b56a51388dd3dc4f3cab46b2951f3d53eb\",\"license\":\"MIT\"},\"contracts/errors/ServiceAgreementErrorsV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementErrorsV1U1 {\\n    error ServiceAgreementDoesntExist(bytes32 agreementId);\\n    error EmptyAssetCreatorAddress();\\n    error AssetStorageNotInTheHub(address contractAddress);\\n    error EmptyKeyword();\\n    error ZeroEpochsNumber();\\n    error ZeroTokenAmount();\\n    error ScoreFunctionDoesntExist(uint8 scoreFunctionId);\\n    error HashFunctionDoesntExist(uint8 hashFunctionId);\\n    error TooLowAllowance(uint256 amount);\\n    error TooLowBalance(uint256 amount);\\n    error ServiceAgreementHasBeenExpired(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength\\n    );\\n    error CommitWindowClosed(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint256 commitWindowOpen,\\n        uint256 commitWindowClose,\\n        uint256 timeNow\\n    );\\n    error NodeNotInShardingTable(uint72 identityId, bytes nodeId, uint96 ask, uint96 stake);\\n    error ProofWindowClosed(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint256 proofWindowOpen,\\n        uint256 proofWindowClose,\\n        uint256 timeNow\\n    );\\n    error NodeAlreadyRewarded(bytes32 agreementId, uint16 epoch, uint256 stateIndex, uint72 identityId, bytes nodeId);\\n    error NodeNotAwarded(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        bytes nodeId,\\n        uint8 rank\\n    );\\n    error WrongMerkleProof(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        bytes nodeId,\\n        bytes32[] merkleProof,\\n        bytes32 merkleRoot,\\n        bytes32 chunkHash,\\n        uint256 challenge\\n    );\\n    error NodeAlreadySubmittedCommit(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        bytes nodeId\\n    );\\n    error NoPendingUpdate(address assetStorage, uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xa12c3a2af6ee9118b2172c7412e2d33890332772cb8588c0e4cbc8d08add0a53\",\"license\":\"MIT\"},\"contracts/errors/assets/ContentAssetErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ContentAssetErrors {\\n    error AssetDoesntExist(uint256 tokenId);\\n    error AssetExpired(uint256 tokenId);\\n    error CommitPhaseOngoing(bytes32 agreementId);\\n    error CommitPhaseSucceeded(bytes32 agreementId);\\n    error FirstEpochHasAlreadyEnded(bytes32 agreementId);\\n    error NoPendingUpdate(address assetStorage, uint256 tokenId);\\n    error UpdateIsNotFinalized(address assetStorage, uint256 tokenId, bytes32 latestState);\\n    error PendingUpdateFinalization(address assetStorage, uint256 tokenId, uint256 latestStateIndex);\\n}\\n\",\"keccak256\":\"0xc79bcd0071e145d7053ff478d32535eda0f53a795a3060dad36263a9293aeb33\",\"license\":\"MIT\"},\"contracts/interface/ICustodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ICustodian {\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf9c1575729c595ec1c4c6cec71e0890774efda80299b476b3c243b4fd168c69d\",\"license\":\"MIT\"},\"contracts/interface/IERC734Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IERC734Extended {\\n    event KeyAdded(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\\n    event KeyRemoved(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\\n\\n    struct Key {\\n        uint256 purpose; //e.g., ADMIN_KEY = 1, OPERATIONAL_KEY = 2, etc.\\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\\n        bytes32 key;\\n    }\\n\\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n\\n    function removeKey(uint72 identityId, bytes32 _key) external;\\n\\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n\\n    function getKey(\\n        uint72 identityId,\\n        bytes32 _key\\n    ) external view returns (uint256 purpose, uint256 keyType, bytes32 key);\\n\\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view returns (bytes32[] memory keys);\\n}\\n\",\"keccak256\":\"0xf96ebcda84c7f83dc1f91f97caf955724ef10c6f243a68f346e2715cc8700a88\",\"license\":\"MIT\"},\"contracts/interface/IHashFunction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IHashFunction {\\n    function hash(bytes calldata data) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2fca3d77fdcb26c5026f75259e19b326354d5c759775838fd070b49a766c75bd\",\"license\":\"MIT\"},\"contracts/interface/Indexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Indexable {\\n    function id() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa5142e26633487e63c7448e3419186e24b97353b5d5c0b5b2886c2d15884cd9d\",\"license\":\"MIT\"},\"contracts/interface/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Initializable {\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0xac823de4540de0fac2d1ec548a5083404ab8abd858c34a69f4f8947b24789507\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/AssertionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {AssertionStructs} from \\\"../structs/AssertionStructs.sol\\\";\\n\\ncontract AssertionStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"AssertionStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // assertionId => Assertion\\n    mapping(bytes32 => AssertionStructs.Assertion) internal assertions;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createAssertion(\\n        bytes32 assertionId,\\n        uint128 size,\\n        uint32 triplesNumber,\\n        uint96 chunksNumber\\n    ) external onlyContracts {\\n        assertions[assertionId] = AssertionStructs.Assertion({\\n            timestamp: block.timestamp,\\n            size: size,\\n            triplesNumber: triplesNumber,\\n            chunksNumber: chunksNumber\\n        });\\n    }\\n\\n    function deleteAssertion(bytes32 assertionId) external onlyContracts {\\n        delete assertions[assertionId];\\n    }\\n\\n    function getAssertion(bytes32 assertionId) external view returns (AssertionStructs.Assertion memory) {\\n        return assertions[assertionId];\\n    }\\n\\n    function getAssertionTimestamp(bytes32 assertionId) external view returns (uint256) {\\n        return assertions[assertionId].timestamp;\\n    }\\n\\n    function getAssertionSize(bytes32 assertionId) external view returns (uint128) {\\n        return assertions[assertionId].size;\\n    }\\n\\n    function getAssertionTriplesNumber(bytes32 assertionId) external view returns (uint32) {\\n        return assertions[assertionId].triplesNumber;\\n    }\\n\\n    function getAssertionChunksNumber(bytes32 assertionId) external view returns (uint96) {\\n        return assertions[assertionId].chunksNumber;\\n    }\\n\\n    function assertionExists(bytes32 assertionId) external view returns (bool) {\\n        return assertions[assertionId].timestamp != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf523695eba20ece14bab74fc2581e01d7b9f02220c3d0577fc5f4eafeb4eeb88\",\"license\":\"MIT\"},\"contracts/storage/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {IERC734Extended} from \\\"../interface/IERC734Extended.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ByteArr} from \\\"../utils/ByteArr.sol\\\";\\nimport {OPERATIONAL_KEY} from \\\"../constants/IdentityConstants.sol\\\";\\n\\ncontract IdentityStorage is IERC734Extended, Named, Versioned, HubDependent {\\n    using ByteArr for bytes32[];\\n\\n    string private constant _NAME = \\\"IdentityStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 private _identityId;\\n\\n    struct Identity {\\n        mapping(bytes32 => Key) keys;\\n        mapping(uint256 => bytes32[]) keysByPurpose;\\n    }\\n\\n    // operationalKey => identityId\\n    mapping(bytes32 => uint72) public identityIds;\\n    // identityId => Identity\\n    mapping(uint72 => Identity) internal identities;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        _identityId = 1;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function deleteIdentity(uint72 identityId) external onlyContracts {\\n        bytes32[] memory operationalKeys = identities[identityId].keysByPurpose[OPERATIONAL_KEY];\\n        uint256 operationalKeysNumber = operationalKeys.length;\\n\\n        for (uint256 i; i < operationalKeysNumber; ) {\\n            delete identityIds[operationalKeys[i]];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        delete identities[identityId];\\n    }\\n\\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _type) external override onlyContracts {\\n        Identity storage identity = identities[identityId];\\n        identity.keys[_key].purpose = _purpose;\\n        identity.keys[_key].keyType = _type;\\n        identity.keys[_key].key = _key;\\n        identity.keysByPurpose[_purpose].push(_key);\\n\\n        emit KeyAdded(identityId, _key, _purpose, _type);\\n    }\\n\\n    function removeKey(uint72 identityId, bytes32 _key) external override onlyContracts {\\n        Identity storage identity = identities[identityId];\\n\\n        uint256 index;\\n        (index, ) = identity.keysByPurpose[identity.keys[_key].purpose].indexOf(_key);\\n        identity.keysByPurpose[identity.keys[_key].purpose].removeByIndex(index);\\n\\n        delete identity.keys[_key];\\n\\n        emit KeyRemoved(identityId, identity.keys[_key].key, identity.keys[_key].purpose, identity.keys[_key].keyType);\\n    }\\n\\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view override returns (bool) {\\n        return identities[identityId].keys[_key].purpose == _purpose;\\n    }\\n\\n    function getKey(uint72 identityId, bytes32 _key) external view override returns (uint256, uint256, bytes32) {\\n        return (\\n            identities[identityId].keys[_key].purpose,\\n            identities[identityId].keys[_key].keyType,\\n            identities[identityId].keys[_key].key\\n        );\\n    }\\n\\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view override returns (bytes32[] memory) {\\n        return identities[identityId].keysByPurpose[_purpose];\\n    }\\n\\n    function getIdentityId(address operational) external view returns (uint72) {\\n        return identityIds[keccak256(abi.encodePacked(operational))];\\n    }\\n\\n    function setOperationalKeyIdentityId(bytes32 operationalKey, uint72 identityId) external onlyContracts {\\n        identityIds[operationalKey] = identityId;\\n    }\\n\\n    function removeOperationalKeyIdentityId(bytes32 operationalKey) external onlyContracts {\\n        delete identityIds[operationalKey];\\n    }\\n\\n    function generateIdentityId() external onlyContracts returns (uint72) {\\n        unchecked {\\n            return _identityId++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50d2f7a594213a4f2b6bf35019bafbab59b6a6b7cb151680031d3c8db572a0b1\",\"license\":\"MIT\"},\"contracts/storage/ParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ParametersStorage is Named, Versioned, HubDependent {\\n    event ParameterChanged(string parameterName, uint256 parameterValue);\\n\\n    string private constant _NAME = \\\"ParametersStorage\\\";\\n    string private constant _VERSION = \\\"1.1.0\\\";\\n\\n    // 0 - minProofWindowOffsetPerc\\n    // 1 - maxProofWindowOffsetPerc\\n    // 2 - commitWindowDurationPerc\\n    // 3 - proofWindowDurationPerc\\n    // 4 - replacementWindowDurationPerc\\n    // 5 - finalizationCommitsNumber\\n    uint8[6] internal args1;\\n\\n    // 0 - r0\\n    // 1 - r1\\n    // 2 - slashingFreezeDuration\\n    uint32[3] internal args2;\\n    uint48 public r2;\\n\\n    // 0 - minimumStake\\n    // 1 - maximumStake\\n    uint96[2] internal args3;\\n\\n    uint128 public epochLength;\\n\\n    // 0 - stakeWithdrawalDelay\\n    // 1 - rewardWithdrawalDelay\\n    uint24[2] internal args4;\\n\\n    uint16 public updateCommitWindowDuration;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        // minimumStake\\n        args3[0] = 50_000 ether;\\n        // maximumStake\\n        args3[1] = 5_000_000 ether;\\n\\n        r2 = 20;\\n        // r1\\n        args2[1] = 8;\\n        // r0\\n        args2[0] = 3;\\n\\n        // minProofWindowOffsetPerc\\n        args1[0] = 50;\\n        // maxProofWindowOffsetPerc\\n        args1[1] = 75;\\n        // commitWindowDurationPerc\\n        args1[2] = 25;\\n        // proofWindowDurationPerc\\n        args1[3] = 25;\\n        // replacementWindowDurationPerc\\n        args1[4] = 0;\\n\\n        epochLength = 90 days;\\n\\n        // stakeWithdrawalDelay\\n        args4[0] = 5 minutes;\\n        // rewardWithdrawalDelay\\n        args4[1] = 5 minutes;\\n        // slashingFreezeDuration\\n        args2[2] = 730 days;\\n\\n        updateCommitWindowDuration = 30 minutes;\\n\\n        // finalizationCommitsNumber\\n        args1[5] = 3;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function minimumStake() external view returns (uint96) {\\n        return args3[0];\\n    }\\n\\n    function setMinimumStake(uint96 newMinimumStake) external onlyHubOwner {\\n        args3[0] = newMinimumStake;\\n\\n        emit ParameterChanged(\\\"minimumStake\\\", newMinimumStake);\\n    }\\n\\n    function maximumStake() external view returns (uint96) {\\n        return args3[1];\\n    }\\n\\n    function setMaximumStake(uint96 newMaximumStake) external onlyHubOwner {\\n        args3[1] = newMaximumStake;\\n\\n        emit ParameterChanged(\\\"maximumStake\\\", newMaximumStake);\\n    }\\n\\n    function setR2(uint48 newR2) external onlyHubOwner {\\n        r2 = newR2;\\n\\n        emit ParameterChanged(\\\"r2\\\", newR2);\\n    }\\n\\n    function r1() external view returns (uint32) {\\n        return args2[1];\\n    }\\n\\n    function setR1(uint32 newR1) external onlyHubOwner {\\n        require(newR1 >= (2 * args2[0] - 1), \\\"R1 should be >= 2*R0-1\\\");\\n\\n        args2[1] = newR1;\\n\\n        emit ParameterChanged(\\\"r1\\\", newR1);\\n    }\\n\\n    function r0() external view returns (uint32) {\\n        return args2[0];\\n    }\\n\\n    function setR0(uint32 newR0) external onlyHubOwner {\\n        require(newR0 <= ((args2[1] + 1) / 2), \\\"R0 should be <= (R1+1)/2\\\");\\n\\n        args2[0] = newR0;\\n\\n        emit ParameterChanged(\\\"r0\\\", newR0);\\n    }\\n\\n    function minProofWindowOffsetPerc() external view returns (uint8) {\\n        return args1[0];\\n    }\\n\\n    function setMinProofWindowOffsetPerc(uint8 newMinProofWindowOffsetPerc) external onlyHubOwner {\\n        args1[0] = newMinProofWindowOffsetPerc;\\n\\n        emit ParameterChanged(\\\"minProofWindowOffsetPerc\\\", newMinProofWindowOffsetPerc);\\n    }\\n\\n    function maxProofWindowOffsetPerc() external view returns (uint8) {\\n        return args1[1];\\n    }\\n\\n    function setMaxProofWindowOffsetPerc(uint8 newMaxProofWindowOffsetPerc) external onlyHubOwner {\\n        args1[1] = newMaxProofWindowOffsetPerc;\\n\\n        emit ParameterChanged(\\\"maxProofWindowOffsetPerc\\\", newMaxProofWindowOffsetPerc);\\n    }\\n\\n    function commitWindowDurationPerc() external view returns (uint8) {\\n        return args1[2];\\n    }\\n\\n    function setCommitWindowDurationPerc(uint8 newCommitWindowDurationPerc) external onlyHubOwner {\\n        args1[2] = newCommitWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"commitWindowDurationPerc\\\", newCommitWindowDurationPerc);\\n    }\\n\\n    function proofWindowDurationPerc() external view returns (uint8) {\\n        return args1[3];\\n    }\\n\\n    function setProofWindowDurationPerc(uint8 newProofWindowDurationPerc) external onlyHubOwner {\\n        args1[3] = newProofWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"proofWindowDurationPerc\\\", newProofWindowDurationPerc);\\n    }\\n\\n    function replacementWindowDurationPerc() external view returns (uint8) {\\n        return args1[4];\\n    }\\n\\n    function setReplacementWindowDurationPerc(uint8 newReplacementWindowDurationPerc) external onlyHubOwner {\\n        args1[4] = newReplacementWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"replacementWindowDurationPerc\\\", newReplacementWindowDurationPerc);\\n    }\\n\\n    function setEpochLength(uint128 newEpochLength) external onlyHubOwner {\\n        epochLength = newEpochLength;\\n\\n        emit ParameterChanged(\\\"epochLength\\\", newEpochLength);\\n    }\\n\\n    function stakeWithdrawalDelay() external view returns (uint24) {\\n        return args4[0];\\n    }\\n\\n    function setStakeWithdrawalDelay(uint24 newStakeWithdrawalDelay) external onlyHubOwner {\\n        args4[0] = newStakeWithdrawalDelay;\\n\\n        emit ParameterChanged(\\\"stakeWithdrawalDelay\\\", newStakeWithdrawalDelay);\\n    }\\n\\n    function rewardWithdrawalDelay() external view returns (uint24) {\\n        return args4[1];\\n    }\\n\\n    function setRewardWithdrawalDelay(uint24 newRewardWithdrawalDelay) external onlyHubOwner {\\n        args4[1] = newRewardWithdrawalDelay;\\n\\n        emit ParameterChanged(\\\"rewardWithdrawalDelay\\\", newRewardWithdrawalDelay);\\n    }\\n\\n    function slashingFreezeDuration() external view returns (uint32) {\\n        return args2[2];\\n    }\\n\\n    function setSlashingFreezeDuration(uint32 newSlashingFreezeDuration) external onlyHubOwner {\\n        args2[2] = newSlashingFreezeDuration;\\n\\n        emit ParameterChanged(\\\"slashingFreezeDuration\\\", newSlashingFreezeDuration);\\n    }\\n\\n    function setUpdateCommitWindowDuration(uint16 newUpdateCommitWindowDuration) external onlyHubOwner {\\n        updateCommitWindowDuration = newUpdateCommitWindowDuration;\\n\\n        emit ParameterChanged(\\\"updateCommitWindowDuration\\\", newUpdateCommitWindowDuration);\\n    }\\n\\n    function finalizationCommitsNumber() external view returns (uint8) {\\n        return args1[5];\\n    }\\n\\n    function setFinalizationCommitsNumber(uint8 newFinalizationCommitsNumber) external onlyHubOwner {\\n        args1[5] = newFinalizationCommitsNumber;\\n\\n        emit ParameterChanged(\\\"finalizationCommitsNumber\\\", newFinalizationCommitsNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xcf85cdc898aa106de1841fc603229d8a8985c1bed128e8efd3c2e827b9c0cca1\",\"license\":\"MIT\"},\"contracts/storage/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Shares} from \\\"../Shares.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ProfileStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ProfileStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct ProfileDefinition {\\n        bytes nodeId;\\n        uint96 ask;\\n        uint96 accumulatedOperatorFee;\\n        uint96 accumulatedOperatorFeeWithdrawalAmount;\\n        uint256 operatorFeeWithdrawalTimestamp;\\n        address sharesContractAddress;\\n        mapping(uint8 => bytes32) nodeAddresses;\\n    }\\n\\n    // nodeId => isRegistered?\\n    mapping(bytes => bool) public nodeIdsList;\\n    // identityId => Profile\\n    mapping(uint72 => ProfileDefinition) internal profiles;\\n\\n    // shares token name => isTaken?\\n    mapping(string => bool) public sharesNames;\\n    // shares token ID => isTaken?\\n    mapping(string => bool) public sharesSymbols;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createProfile(\\n        uint72 identityId,\\n        bytes calldata nodeId,\\n        address sharesContractAddress\\n    ) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        profile.nodeId = nodeId;\\n        profile.sharesContractAddress = sharesContractAddress;\\n\\n        nodeIdsList[nodeId] = true;\\n\\n        Shares sharesContract = Shares(sharesContractAddress);\\n        sharesNames[sharesContract.name()] = true;\\n        sharesSymbols[sharesContract.symbol()] = true;\\n    }\\n\\n    function getProfile(\\n        uint72 identityId\\n    ) external view returns (bytes memory nodeId, uint96[2] memory profileSettings, address sharesContractAddress) {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        return (profile.nodeId, [profile.ask, profile.accumulatedOperatorFee], profile.sharesContractAddress);\\n    }\\n\\n    function deleteProfile(uint72 identityId) external onlyContracts {\\n        nodeIdsList[profiles[identityId].nodeId] = false;\\n        delete profiles[identityId];\\n    }\\n\\n    function getNodeId(uint72 identityId) external view returns (bytes memory) {\\n        return profiles[identityId].nodeId;\\n    }\\n\\n    function setNodeId(uint72 identityId, bytes calldata nodeId) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n\\n        nodeIdsList[profile.nodeId] = false;\\n        profile.nodeId = nodeId;\\n        nodeIdsList[nodeId] = true;\\n    }\\n\\n    function getAsk(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].ask;\\n    }\\n\\n    function setAsk(uint72 identityId, uint96 ask) external onlyContracts {\\n        profiles[identityId].ask = ask;\\n    }\\n\\n    function getAccumulatedOperatorFee(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFee;\\n    }\\n\\n    function setAccumulatedOperatorFee(uint72 identityId, uint96 newOperatorFeeAmount) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFee = newOperatorFeeAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalAmount(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalAmount(\\n        uint72 identityId,\\n        uint96 accumulatedOperatorFeeWithdrawalAmount\\n    ) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFeeWithdrawalAmount = accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalTimestamp(uint72 identityId) external view returns (uint256) {\\n        return profiles[identityId].operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalTimestamp(\\n        uint72 identityId,\\n        uint256 operatorFeeWithdrawalTimestamp\\n    ) external onlyContracts {\\n        profiles[identityId].operatorFeeWithdrawalTimestamp = operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function getSharesContractAddress(uint72 identityId) external view returns (address) {\\n        return profiles[identityId].sharesContractAddress;\\n    }\\n\\n    function setSharesContractAddress(uint72 identityId, address sharesContractAddress) external onlyContracts {\\n        profiles[identityId].sharesContractAddress = sharesContractAddress;\\n    }\\n\\n    function getNodeAddress(uint72 identityId, uint8 hashFunctionId) external view returns (bytes32) {\\n        return profiles[identityId].nodeAddresses[hashFunctionId];\\n    }\\n\\n    function setNodeAddress(uint72 identityId, uint8 hashFunctionId, bytes32 nodeAddress) external onlyContracts {\\n        profiles[identityId].nodeAddresses[hashFunctionId] = nodeAddress;\\n    }\\n\\n    function profileExists(uint72 identityId) external view returns (bool) {\\n        return keccak256(profiles[identityId].nodeId) != keccak256(bytes(\\\"\\\"));\\n    }\\n\\n    function transferAccumulatedOperatorFee(address receiver, uint96 amount) external onlyContracts {\\n        tokenContract.transfer(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x658280fecb28870447d89924e8114b8847a3107b674ca5c27d402499b1921332\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ServiceAgreementStorageV1} from \\\"./ServiceAgreementStorageV1.sol\\\";\\nimport {ServiceAgreementStorageV1U1} from \\\"./ServiceAgreementStorageV1U1.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Initializable} from \\\"../interface/Initializable.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {GeneralErrors} from \\\"../errors/GeneralErrors.sol\\\";\\n\\ncontract ServiceAgreementStorageProxy is Named, Versioned, HubDependent, Initializable {\\n    string private constant _NAME = \\\"ServiceAgreementStorageProxy\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    ServiceAgreementStorageV1 public storageV1;\\n    ServiceAgreementStorageV1U1 public storageV1U1;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        storageV1 = ServiceAgreementStorageV1(hub.getContractAddress(\\\"ServiceAgreementStorageV1\\\"));\\n        storageV1U1 = ServiceAgreementStorageV1U1(hub.getContractAddress(\\\"ServiceAgreementStorageV1U1\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function migrateV1ServiceAgreement(bytes32 agreementId) external onlyContracts {\\n        ServiceAgreementStorageV1 sasV1 = storageV1;\\n        ServiceAgreementStorageV1U1 sasV1U1 = storageV1U1;\\n\\n        uint96 tokenAmount = sasV1.getAgreementTokenAmount(agreementId);\\n\\n        sasV1.deleteServiceAgreementObject(agreementId);\\n\\n        sasV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        sasV1.transferAgreementTokens(address(sasV1U1), tokenAmount);\\n    }\\n\\n    function createV1U1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1U1.createServiceAgreementObject(\\n            agreementId,\\n            startTime,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function createV1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1.createServiceAgreementObject(\\n            agreementId,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.deleteServiceAgreementObject(agreementId);\\n        } else {\\n            storageV1U1.deleteServiceAgreementObject(agreementId);\\n        }\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        if (this.agreementV1Exists(agreementId)) {\\n            uint96 tokenAmount;\\n            (startTime, epochsNumber, epochLength, tokenAmount, scoreFunctionIdAndProofWindowOffsetPerc) = storageV1\\n                .getAgreementData(agreementId);\\n            return (\\n                startTime,\\n                epochsNumber,\\n                epochLength,\\n                [tokenAmount, storageV1U1.getAgreementUpdateTokenAmount(agreementId)],\\n                scoreFunctionIdAndProofWindowOffsetPerc\\n            );\\n        } else {\\n            return storageV1U1.getAgreementData(agreementId);\\n        }\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementStartTime(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementStartTime(agreementId);\\n        }\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementStartTime(agreementId, startTime);\\n        } else {\\n            storageV1U1.setAgreementStartTime(agreementId, startTime);\\n        }\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochsNumber(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochsNumber(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        } else {\\n            storageV1U1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        }\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochLength(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochLength(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochLength(agreementId, epochLength);\\n        } else {\\n            storageV1U1.setAgreementEpochLength(agreementId, epochLength);\\n        }\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementTokenAmount(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementTokenAmount(agreementId);\\n        }\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        } else {\\n            storageV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        }\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return storageV1U1.getAgreementUpdateTokenAmount(agreementId);\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        storageV1U1.setAgreementUpdateTokenAmount(agreementId, updateTokenAmount);\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementScoreFunctionId(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementScoreFunctionId(agreementId);\\n        }\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        } else {\\n            storageV1U1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        }\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementProofWindowOffsetPerc(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementProofWindowOffsetPerc(agreementId);\\n        }\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        } else {\\n            storageV1U1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        }\\n    }\\n\\n    function getV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return storageV1U1.getAgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\\n    }\\n\\n    function getV1AgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return storageV1.getAgreementEpochSubmissionHead(agreementId, epoch);\\n    }\\n\\n    function setV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1U1.setAgreementEpochSubmissionHead(agreementId, epoch, stateIndex, headCommitId);\\n    }\\n\\n    function setV1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1.setAgreementEpochSubmissionHead(agreementId, epoch, headCommitId);\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            return storageV1U1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        } else {\\n            storageV1U1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        }\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, 0);\\n        } else {\\n            storageV1U1.deleteAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function createV1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1.createCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function createV1U1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1U1.createEpochStateCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.deleteEpochStateCommitSubmissionsObject(commitId);\\n        } else {\\n            storageV1.deleteCommitSubmissionsObject(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmission(commitId);\\n        } else {\\n            return storageV1.getCommitSubmission(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionIdentityId(commitId, identityId);\\n        } else {\\n            storageV1.setCommitSubmissionIdentityId(commitId, identityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionPrevIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionPrevIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionNextIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionNextIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionScore(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionScore(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionScore(commitId, score);\\n        } else {\\n            storageV1.setCommitSubmissionScore(commitId, score);\\n        }\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n        } else {\\n            return storageV1.commitSubmissionExists(commitId);\\n        }\\n    }\\n\\n    function incrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.incrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function decrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.decrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return storageV1U1.getEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function setCommitsCount(bytes32 epochStateId, uint8 epochStateCommitsCount) external onlyContracts {\\n        storageV1U1.setEpochStateCommitsCount(epochStateId, epochStateCommitsCount);\\n    }\\n\\n    function deleteCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.deleteEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return storageV1U1.getUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        storageV1U1.setUpdateCommitsDeadline(stateId, deadline);\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        storageV1U1.deleteUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function transferAgreementTokens(bytes32 agreementId, address receiver, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.transferAgreementTokens(receiver, tokenAmount);\\n        } else {\\n            storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n        }\\n    }\\n\\n    function transferV1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function transferV1U1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function agreementV1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function agreementV1U1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId) || storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function commitV1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1.commitSubmissionExists(commitId);\\n    }\\n\\n    function commitV1U1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n    }\\n\\n    function agreementV1StorageAddress() external view returns (address) {\\n        return address(storageV1);\\n    }\\n\\n    function agreementV1U1StorageAddress() external view returns (address) {\\n        return address(storageV1U1);\\n    }\\n}\\n\",\"keccak256\":\"0x3615c48f64deb12c57692b15a052d523c3da362dd3c927ec3f2902a7c5307a06\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // CommitId [keccak256(agreementId + epoch + identityId)] => CommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal commitSubmissions;\\n\\n    // AgreementId [hash(asset type contract + tokenId + key)] => ServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ServiceAgreement) internal serviceAgreements;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = block.timestamp;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96 tokenAmount,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            serviceAgreements[agreementId].tokenAmount,\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[epoch];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[epoch] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        commitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].identityId;\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        commitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return commitSubmissions[commitId].score;\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        commitSubmissions[commitId].score = score;\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return commitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c2b2d43615369d9fe71beb9d4267ea40c46fb416d4c7b22ab81272a2c690117\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1U1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // AgreementId [hash(assetStorage + tokenId + key)] => ExtendedServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ExtendedServiceAgreement) internal serviceAgreements;\\n\\n    // CommitId [keccak256(agreementId + epoch + stateIndex + identityId)] => stateCommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal epochStateCommitSubmissions;\\n\\n    // EpochStateId [keccak256(agreementId + epoch + stateIndex)] => epochStateCommitsCount\\n    mapping(bytes32 => uint8) internal epochStateCommitsCount;\\n\\n    // StateId [keccak256(agreementId + stateIndex)] => updateCommitsDeadline\\n    mapping(bytes32 => uint256) internal updateCommitsDeadlines;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ExtendedServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = startTime;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            [serviceAgreements[agreementId].tokenAmount, serviceAgreements[agreementId].updateTokenAmount],\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].updateTokenAmount;\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].updateTokenAmount = updateTokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[keccak256(abi.encodePacked(epoch, stateIndex))];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[\\n            keccak256(abi.encodePacked(epoch, stateIndex))\\n        ] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        delete serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createEpochStateCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteEpochStateCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].identityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionPrevIdentityId(\\n        bytes32 commitId,\\n        uint72 prevIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionNextIdentityId(\\n        bytes32 commitId,\\n        uint72 nextIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return epochStateCommitSubmissions[commitId].score;\\n    }\\n\\n    function setEpochStateCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].score = score;\\n    }\\n\\n    function epochStateCommitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return epochStateCommitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function incrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]++;\\n    }\\n\\n    function decrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]--;\\n    }\\n\\n    function getEpochStateCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function setEpochStateCommitsCount(bytes32 epochStateId, uint8 newEpochStateCommitsCount) external onlyContracts {\\n        epochStateCommitsCount[epochStateId] = newEpochStateCommitsCount;\\n    }\\n\\n    function deleteEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        delete epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return updateCommitsDeadlines[stateId];\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        updateCommitsDeadlines[stateId] = deadline;\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        delete updateCommitsDeadlines[stateId];\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d25de399b6bccc3a892d0f71abd185892b50a717106fe88328a42fc1e52d98\",\"license\":\"MIT\"},\"contracts/storage/ShardingTableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"../structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"../constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTableStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"ShardingTableStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 public head;\\n    uint72 public tail;\\n    uint72 public nodesCount;\\n\\n    // identityId => Node\\n    mapping(uint72 => ShardingTableStructs.Node) internal nodes;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        head = NULL;\\n        tail = NULL;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function incrementNodesCount() external onlyContracts {\\n        nodesCount++;\\n    }\\n\\n    function decrementNodesCount() external onlyContracts {\\n        nodesCount--;\\n    }\\n\\n    function setHead(uint72 identityId) external onlyContracts {\\n        head = identityId;\\n    }\\n\\n    function setTail(uint72 identityId) external onlyContracts {\\n        tail = identityId;\\n    }\\n\\n    function createNodeObject(uint72 identityId, uint72 prevIdentityId, uint72 nextIdentityId) external onlyContracts {\\n        nodes[identityId] = ShardingTableStructs.Node({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId\\n        });\\n    }\\n\\n    function getNode(uint72 identityId) external view returns (ShardingTableStructs.Node memory) {\\n        return nodes[identityId];\\n    }\\n\\n    function deleteNodeObject(uint72 identityId) external onlyContracts {\\n        delete nodes[identityId];\\n    }\\n\\n    function nodeExists(uint72 identityId) external view returns (bool) {\\n        return nodes[identityId].identityId != 0;\\n    }\\n\\n    function setPrevIdentityId(uint72 identityId, uint72 newPrevIdentityId) external onlyContracts {\\n        nodes[identityId].prevIdentityId = newPrevIdentityId;\\n    }\\n\\n    function setNextIdentityId(uint72 identityId, uint72 newNextIdentityId) external onlyContracts {\\n        nodes[identityId].nextIdentityId = newNextIdentityId;\\n    }\\n\\n    function getMultipleNodes(\\n        uint72 firstIdentityId,\\n        uint16 nodesNumber\\n    ) external view returns (ShardingTableStructs.Node[] memory) {\\n        ShardingTableStructs.Node[] memory nodesPage = new ShardingTableStructs.Node[](nodesNumber);\\n\\n        ShardingTableStructs.Node memory currentNode = nodes[firstIdentityId];\\n        for (uint256 i; i < nodesNumber; ) {\\n            nodesPage[i] = currentNode;\\n            currentNode = nodes[currentNode.nextIdentityId];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n\\n    function link(uint72 leftNodeIdentityId, uint72 rightNodeIdentityId) external onlyContracts {\\n        nodes[leftNodeIdentityId].nextIdentityId = rightNodeIdentityId;\\n        nodes[rightNodeIdentityId].prevIdentityId = leftNodeIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xac72b874995c1c6d181539ef17b90b5165f242076235e4c05282f2bd0311f3cf\",\"license\":\"MIT\"},\"contracts/storage/StakingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract StakingStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"StakingStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct WithdrawalRequest {\\n        uint96 amount;\\n        uint256 timestamp;\\n    }\\n\\n    // identityId => totalStake\\n    mapping(uint72 => uint96) public totalStakes;\\n\\n    // identityId => operatorFee\\n    mapping(uint72 => uint96) public operatorFees;\\n\\n    // identityId => withdrawalRequest\\n    mapping(uint72 => mapping(address => WithdrawalRequest)) public withdrawalRequests;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setTotalStake(uint72 identityId, uint96 newTotalStake) external onlyContracts {\\n        totalStakes[identityId] = newTotalStake;\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint96 operatorFee) external onlyContracts {\\n        operatorFees[identityId] = operatorFee;\\n    }\\n\\n    function createWithdrawalRequest(\\n        uint72 identityId,\\n        address staker,\\n        uint96 amount,\\n        uint256 timestamp\\n    ) external onlyContracts {\\n        withdrawalRequests[identityId][staker] = WithdrawalRequest({amount: amount, timestamp: timestamp});\\n    }\\n\\n    function deleteWithdrawalRequest(uint72 identityId, address staker) external onlyContracts {\\n        delete withdrawalRequests[identityId][staker];\\n    }\\n\\n    function getWithdrawalRequestAmount(uint72 identityId, address staker) external view returns (uint96) {\\n        return withdrawalRequests[identityId][staker].amount;\\n    }\\n\\n    function getWithdrawalRequestTimestamp(uint72 identityId, address staker) external view returns (uint256) {\\n        return withdrawalRequests[identityId][staker].timestamp;\\n    }\\n\\n    function withdrawalRequestExists(uint72 identityId, address staker) external view returns (bool) {\\n        return withdrawalRequests[identityId][staker].amount != 0;\\n    }\\n\\n    function transferStake(address receiver, uint96 stakeAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, stakeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x1901534fb150957d6433fa06b6a59a2c2d1594fc9b9a4e9901f024fea947a4db\",\"license\":\"MIT\"},\"contracts/structs/AssertionStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary AssertionStructs {\\n    struct Assertion {\\n        uint256 timestamp;\\n        uint128 size;\\n        uint32 triplesNumber;\\n        uint96 chunksNumber;\\n    }\\n}\\n\",\"keccak256\":\"0x8d76943e65e0ad3a959570064870312a0cfa4287c117516b1a1c35e685beb49b\",\"license\":\"MIT\"},\"contracts/structs/ServiceAgreementStructsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementStructsV1 {\\n    struct CommitSubmission {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n        uint40 score;\\n    }\\n\\n    struct ServiceAgreementInputArgs {\\n        address assetCreator;\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epochsNumber;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n    }\\n\\n    struct ServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // epoch => headCommitId\\n        mapping(uint16 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct ExtendedServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint96 updateTokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // keccak256(epoch + stateIndex) => headCommitId\\n        mapping(bytes32 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct CommitInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n    }\\n\\n    struct ProofInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n        bytes32[] proof;\\n        bytes32 chunkHash;\\n    }\\n}\\n\",\"keccak256\":\"0x5b33bc12e685dacf652dfe81b7fff14806297132be7df872c45a598ff783d638\",\"license\":\"MIT\"},\"contracts/structs/ShardingTableStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ShardingTableStructs {\\n    struct NodeInfo {\\n        bytes nodeId;\\n        uint72 identityId;\\n        uint96 ask;\\n        uint96 stake;\\n    }\\n\\n    struct Node {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xf6f18e4e0643f4c6fa96480189e89d8c7e6fb8de7a4a3f36da24ab3b0ea31d76\",\"license\":\"MIT\"},\"contracts/utils/ByteArr.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ByteArr {\\n    function indexOf(bytes32[] storage self, bytes32 item) internal view returns (uint index, bool isThere) {\\n        for (uint i; i < self.length; i++) {\\n            if (self[i] == item) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function removeByIndex(bytes32[] storage self, uint256 index) internal returns (bytes32[] memory) {\\n        require(index < self.length, \\\"Index is out of array length\\\");\\n\\n        self[index] = self[self.length - 1];\\n        self.pop();\\n\\n        return self;\\n    }\\n\\n    function getFuncHash(bytes storage _data) internal view returns (bytes4) {\\n        bytes4 output;\\n        for (uint i; i < 4; i++) {\\n            output |= bytes4(_data[i] & 0xFF) >> (i * 8);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xa1a88491b2a586eeebb1f6a6fb7f026931633fb3fb6a5635c74e62621b9f03ba\",\"license\":\"MIT\"},\"contracts/utils/UnorderedIndexableContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Indexable} from \\\"../interface/Indexable.sol\\\";\\n\\nlibrary UnorderedIndexableContractDynamicSetLib {\\n    struct Contract {\\n        uint8 id;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(uint8 => uint256) indexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, uint8 id, address addr) internal {\\n        require(id != 0, \\\"IndexableContractSet: ID canot be 0\\\");\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, id), \\\"IndexableContractSet: Contract with given ID already exists\\\");\\n        self.indexPointers[id] = size(self);\\n        self.contractList.push(Contract(id, addr));\\n    }\\n\\n    function update(Set storage self, uint8 id, address addr) internal {\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        self.contractList[self.indexPointers[id]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, uint8 id) internal {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        uint256 contractToRemoveIndex = self.indexPointers[id];\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n        uint8 contractToMoveId = Indexable(contractToMove.addr).id();\\n\\n        self.indexPointers[contractToMoveId] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.indexPointers[id];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, uint8 id) internal view returns (Contract memory) {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        return self.contractList[self.indexPointers[id]];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, uint8 id) internal view returns (uint256) {\\n        return self.indexPointers[id];\\n    }\\n\\n    function getByIndex(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function exists(Set storage self, uint8 id) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return self.contractList[self.indexPointers[id]].id == id;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0xc255ea1ea548b3deb7384a5e8f2b706c53688631ca423c73c24ec5cf674055d6\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200014357601f6200236c38819003918201601f19168301926001600160401b0392909190838511838610176200014857808392604096875283396020928391810103126200014357516001600160a01b038116929083900362000143578215620000ff57600080546001600160a01b03191690931783558351906080820190811182821017620000eb578452828152828282015282848201528260608201529082905b60048210620000c3575050506001555161220d90816200015f8239f35b9091928160019185511515908560031b60ff811b9283911b16911916179401920190620000a6565b634e487b7160e01b84526041600452602484fd5b835162461bcd60e51b815260048101839052601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816306fdde03146118f25750806311c94ee8146118c9578063200d2ed2146118a457806332c2fbf114611854578063365a86fc1461182d57806354fd4d50146117e35780635c40f6f41461179f578063639a86a3146117765780637522c2b1146105f75780637ea63c6e146105895780638129fc1c1461023457806383de896b146101f357806390b8145a146101ca578063aa6a00fd1461018d578063d210b7cf14610164578063ee99205c1461013b578063f11abfd8146101125763f42cb038146100e757600080fd5b3461010f578060031936011261010f576007546040516001600160a01b039091168152602090f35b80fd5b503461010f578060031936011261010f576005546040516001600160a01b039091168152602090f35b503461010f578060031936011261010f576003546040516001600160a01b039091168152602090f35b503461010f578060031936011261010f576004546040516001600160a01b039091168152602090f35b503461010f57604036600319011261010f5760243561ffff811681036101c5576101bb602091600435611aa7565b6040519015158152f35b600080fd5b503461010f578060031936011261010f576008546040516001600160a01b039091168152602090f35b503461010f57602036600319011261010f576004356004811015610230578060ff60209260051c6001015460f86040519360031b161c1615158152f35b5080fd5b503461010f578060031936011261010f5761024d612129565b60018060a01b0380825416906040519183630110ceef60e21b808552602092836004870152602490600c828801526044926b48617368696e6750726f787960a01b8489015260649186898481845afa98891561057e57869961055f575b50876001600160601b0360a01b9916896002541617600255604051828152876004820152600785820152665374616b696e6760c81b8682015287818581855afa80156104e05789918891610542575b50168960035416176003556040518281528760048201526010858201526f417373657274696f6e53746f7261676560801b8682015287818581855afa80156104e05789918891610525575b5016896004541617600455604051828152876004820152600f858201526e4964656e7469747953746f7261676560881b8682015287818581855afa80156104e05789918891610508575b501689600554161760055560405182815287600482015260118582015270506172616d657465727353746f7261676560781b8682015287818581855afa80156104e057899188916104eb575b5016896006541617600655604051828152876004820152600e858201526d50726f66696c6553746f7261676560901b8682015287818581855afa9586156104e0578989977f5365727669636541677265656d656e7453746f7261676550726f78790000000093601c9a916104c3575b50168b6007541617600755604051978896879586528860048701528501528301525afa9182156104b857859261048b575b505016906008541617600855604051f35b6104aa9250803d106104b1575b6104a281836119d0565b8101906119f2565b388061047a565b503d610498565b6040513d87823e3d90fd5b6104da9150893d8b116104b1576104a281836119d0565b38610449565b6040513d89823e3d90fd5b6105029150893d8b116104b1576104a281836119d0565b386103da565b61051f9150893d8b116104b1576104a281836119d0565b3861038e565b61053c9150893d8b116104b1576104a281836119d0565b38610344565b6105599150893d8b116104b1576104a281836119d0565b386102f9565b610577919950873d89116104b1576104a281836119d0565b97386102aa565b6040513d88823e3d90fd5b503461010f57604036600319011261010f576004356024358015158091036101c5576105b3612129565b60048210156105e1578160051c6001019160f883549160031b1660ff811b9283911b16911916179055604051f35b634e487b7160e01b600052603260045260246000fd5b503461010f57602036600319011261010f5767ffffffffffffffff6004351161010f5760e06004353603600319011261010f576008546002546001600160a01b03918216916106ed9160209116610652600435606401611e07565b9060ff610663600435600401611e15565b926106c2605461067d604460043501600435600401611e29565b60405160609890981b6bffffffffffffffffffffffff191689890152600435602401356034890152879181908484013781018b838201520360348101875201856119d0565b604051958694859384936345ed59e560e01b8552166004840152604060248401526044830190611965565b03915afa90811561176b578391611735575b506040516310dc199160e31b815260048101829052602081602481865afa908115610dce5784916116fa575b50156116e25760249060206001600160a01b0361074b6004803501611e15565b166040519384809263fef57daf60e01b825282600435013560048301525afa918215610dce5784926116aa575b5081600019810111610df6576001549260ff8416158061168c575b6114575760055460405163010cf48d60e71b81523360048201529190602090839060249082906001600160a01b03165afa91821561057e578692611436575b50816108376107e5608460043501611e5c565b604080516020810188905260f09290921b6001600160f01b031916908201526000198701604282015260b89290921b6001600160b81b031916606283015281606b81015b03601f1981018352826119d0565b6020815191012060ff8660081c1615806113b7575b6112fe5761085e608460043501611e5c565b61ffff604051916357e1255760e01b835286600484015216602482015260001986016044820152602081606481865afa9081156112f35788916112bd575b5060065460405163659621b560e01b815291949190602090829060049082906001600160a01b03165afa9081156112b2578991611293575b5088945b604051620153f560ea1b815260048101829052602081602481895afa908115611288578b91611269575b506001600160481b038481169116141580611257575b156109f75761092b608460043501611e5c565b60405191635b3db70f60e11b835260048301528a6020836024818a5afa80156109ea576109af6001936108298c9360ff978f96916109bb575b50604080516020810196875260f09490941b6001600160f01b03191690840152600019909501604283015260b89490941b6001600160b81b031916606282015291928290606b820190565b519020960116946108d8565b6109dd915060203d6020116109e3575b6109d581836119d0565b810190611e6b565b38610964565b503d6109cb565b50604051903d90823e3d90fd5b5086888a9660ff8260101c161580611244575b611175575060ff90610a40610a23600435600401611e15565b610a31608460043501611e5c565b90602460043501359033611f95565b92909160181c161580611017575b610ee3575050610a62600435600401611e15565b610a76604460043501600435600401611e29565b909261ffff610a89606460043501611e07565b60ff610a99608460043501611e5c565b91856040519860808a528160808b015260a08a01378c60a0878a0101521660208701521660408501526000190160608401527f55643f50949abc304fd96835e8f3a28d40d1ea5e41a1ac3d8ef593880adc679c6001600160481b0386169360a0816024600435013595600180841b031694601f80199101168101030190a4604051634089a17d60e01b815260048101879052602081602481885afa90811561057e578691610ec4575b5060405163d1a640c760e01b815260048101889052602081602481895afa9081156104e0578791610e95575b5061ffff80610b81608460043501611e5c565b1691160361ffff8111610e505761ffff600191160161ffff8111610e5057610bed9161ffff610bb1921690611f67565b916020610bc2608460043501611e5c565b604051632b275f3d60e21b8152600481018b905261ffff909116602482015292839081906044820190565b0381895afa9182156104e0578792610e64575b5063ffffffff80809316911603818111610e5057610c2092911690611f67565b6003546001600160a01b03169190823b15610e4c576001600160481b0391606488886001600160601b0381956040519788968795633277e5f760e11b8752600487015216602485015216968760448401525af180156104b857610e39575b50604051634089a17d60e01b815260048101869052602081602481875afa9081156104b857906001600160601b03918691610e0a575b501603936001600160601b038511610df6578394833b15610dd9576001600160601b036040519163e54b26ff60e01b8352836004840152166024820152848160448183885af19081156104b8578591610ddd575b5050610d18608460043501611e5c565b90833b15610dd95760405163beca40f360e01b8152600481019190915261ffff919091166024820152838160448183875af1908115610dce578491610dba575b5050813b15610db6578291604483926040519485938492631eb18b8b60e11b845260048401528160248401525af18015610dab57610d97575b50604051f35b610da09061198a565b61010f578082610d91565b6040513d84823e3d90fd5b5050fd5b610dc39061198a565b610db6578285610d58565b6040513d86823e3d90fd5b8480fd5b610de69061198a565b610df1578386610d08565b505050fd5b634e487b7160e01b84526011600452602484fd5b610e2c915060203d602011610e32575b610e2481836119d0565b810190611f48565b87610cb4565b503d610e1a565b610e459094919461198a565b9285610c7e565b8580fd5b634e487b7160e01b87526011600452602487fd5b610e8791925060203d602011610e8e575b610e7f81836119d0565b810190611ef6565b9088610c00565b503d610e75565b610eb7915060203d602011610ebd575b610eaf81836119d0565b810190611a11565b88610b6e565b503d610ea5565b610edd915060203d602011610e3257610e2481836119d0565b87610b42565b88918891866024610ef8608460043501611e5c565b6007546040516320e085cd60e11b81526001600160481b038516600482015291939192879184919082906001600160a01b03165afa91821561057e579160049891610f9f938892610fec575b506001600160481b03919261ffff610f6360a48d35018d358e01611f12565b97909b6040519d8e63f7c6048760e01b815201521660248c01526000190160448b01521660648901526101206084890152610124880190611965565b8681036003190160a4880152818152936001600160fb1b03821161010f5750918593916020959360051b80948785013760c485015260c4600435013560e485015261010484015201030190fd5b6001600160481b039250611011903d808b833e61100981836119d0565b810190611e8a565b91610f44565b50979390959261103460a460049794973501600435600401611f12565b6040979197519760c4600435013560208a01528960408a01526040895288606081011067ffffffffffffffff60608b0111176111615760608901604052885160208a01209167ffffffffffffffff811161114d578060051b9061109d6020830160608d016119d0565b60608b015260808a019036818401116111495782915b818401831061113957505050509789985b60608901518a10156111255760808a60051b8a01015190818110600014611116578b5260205260408a205b98600019811461110257600101986110c4565b634e487b7160e01b8b52601160045260248bfd5b908b5260205260408a206110ef565b9093969a9295985082919497501415610a4e565b82358152602092830192016110b3565b8c80fd5b634e487b7160e01b8c52604160045260248cfd5b634e487b7160e01b8b52604160045260248bfd5b8891508785611188608460043501611e5c565b946001600160481b038360018060a01b0360075416936024604051809481936320e085cd60e11b835216968760048301525afa938415611238579161121093918360ff9661121b575b505061ffff604051988998636806074560e01b8a5260048a0152166024880152600019016044870152606486015260c0608486015260c4850190611965565b911660a48301520390fd5b6112309294503d8091833e61100981836119d0565b9188806111d1565b604051903d90823e3d90fd5b5063ffffffff841660ff82161015610a0a565b5063ffffffff821660ff871610610918565b611282915060203d6020116109e3576109d581836119d0565b38610902565b6040513d8d823e3d90fd5b6112ac915060203d602011610e8e57610e7f81836119d0565b386108d4565b6040513d8b823e3d90fd5b90506020813d6020116112eb575b816112d8602093836119d0565b810103126112e757513861089c565b8780fd5b3d91506112cb565b6040513d8a823e3d90fd5b8685856001600160481b0386611318608460043501611e5c565b938560018060a01b0360075416926024604051809681936320e085cd60e11b835216958660048301525afa92831561057e57866113969596979461139a575b505061ffff604051968796634755f22560e01b88526004880152166024860152600019016044850152606484015260a0608484015260a4830190611965565b0390fd5b6113af9294503d8091833e61100981836119d0565b918680611357565b50604051635c6c1fef60e01b815260048101829052602081602481865afa80156112f35788906113f1575b64ffffffffff9150161561084c565b506020813d60201161142e575b8161140b602093836119d0565b810103126112e7575164ffffffffff811681036112e75764ffffffffff906113e2565b3d91506113fe565b61145091925060203d6020116109e3576109d581836119d0565b90386107d2565b84926040519163484a47e760e01b8352836004840152602083602481845afa9283156104b857859361165b575b50604051630271c2cf60e61b81526004810185905290602082602481845afa91821561057e578692611626575b5060206114e46024936001600160801b036114dd8861ffff6114d7608460043501611e5c565b16611a63565b1690611a9a565b91604051938480926399149f7760e01b82528960048301525afa801561057e5760646001600160801b036115288760ff8395611531988d91611607575b5016611a63565b16041690611a9a565b90611540608460043501611e5c565b60065460405163274f3ac360e21b815291949190602090829060049082906001600160a01b03165afa9081156104e05760646001600160801b0361159861ffff9560ff6115a196849660c49e916115d8575016611a63565b16041684611a9a565b604051638b98b4a760e01b8152600481019690965293166024850152600019016044840152606483015260848201524260a4820152fd5b6115fa915060203d602011611600575b6115f281836119d0565b810190611a4a565b8e611521565b503d6115e8565b611620915060203d602011611600576115f281836119d0565b8d611521565b91506020823d602011611653575b81611641602093836119d0565b81010312610e4c5790519060206114b1565b3d9150611634565b61167e91935060203d602011611685575b61167681836119d0565b810190611a2b565b9185611484565b503d61166c565b506116a461169e608460043501611e5c565b83611aa7565b15610793565b9091506020813d6020116116da575b816116c6602093836119d0565b810103126116d657519038610778565b8380fd5b3d91506116b9565b60249060405190635013c2b960e01b82526004820152fd5b90506020813d60201161172d575b81611715602093836119d0565b810103126116d6575180151581036116d6573861072b565b3d9150611708565b90506020813d602011611763575b81611750602093836119d0565b8101031261175f5751386106ff565b8280fd5b3d9150611743565b6040513d85823e3d90fd5b503461010f578060031936011261010f576006546040516001600160a01b039091168152602090f35b503461010f57602036600319011261010f57600435801515809103610230576117c6612129565b815460ff60a01b191660a09190911b60ff60a01b16178155604051f35b503461010f578060031936011261010f57611829604051611803816119b4565b60058152640312e302e360dc1b6020820152604051918291602083526020830190611965565b0390f35b503461010f578060031936011261010f57546040516001600160a01b039091168152602090f35b503461010f57606036600319011261010f576004356001600160a01b0381168103610230576044359161ffff8316830361010f576040611898846024358533611f95565b82519182526020820152f35b503461010f578060031936011261010f5760ff6020915460a01c166040519015158152f35b503461010f578060031936011261010f576002546040516001600160a01b039091168152602090f35b90503461023057816003193601126102305780611911611829926119b4565b601081526f50726f6f664d616e616765725631553160801b6020820152604051918291602083526020830190611965565b60005b8381106119555750506000910152565b8181015183820152602001611945565b9060209161197e81518092818552858086019101611942565b601f01601f1916010190565b67ffffffffffffffff811161199e57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761199e57604052565b90601f8019910116810190811067ffffffffffffffff82111761199e57604052565b908160209103126101c557516001600160a01b03811681036101c55790565b908160209103126101c5575161ffff811681036101c55790565b908160209103126101c557516001600160801b03811681036101c55790565b908160209103126101c5575160ff811681036101c55790565b6001600160801b039182809216918291169204821181151516611a84570290565b634e487b7160e01b600052601160045260246000fd5b91908201809211611a8457565b60085460408051630271c2cf60e61b81526004808201859052602495946001600160a01b03949293926020919086169082868a81855afa958615611dfc57600096611dcd575b508515611db85784519763d1a640c760e01b808a5282868b0152848a8c81875afa998a15611dad5760009a611d8e575b5061ffff808093169a168a1015611cba575050845163484a47e760e01b815284810182905298838a8281865afa998a15611caf5760009a611c8c575b509083918651809481936399149f7760e01b8352888301525afa908115611c81579160ff60648293611ba4979695600091611c64575b506001600160801b039788938492168d611a63565b160416966006541684519384809263274f3ac360e21b82525afa928315611c5a5750611be360ff85946064948694600092611c3d575b50501689611a63565b16041693611c0584611c0084611bf9858b611a63565b1686611a9a565b611a9a565b4210159586611c18575b50505050505090565b611c309650916114dd611c00959492611c0094611a63565b4210388080808080611c0f565b611c539250803d10611600576115f281836119d0565b3880611bda565b513d6000823e3d90fd5b611c7b9150843d8611611600576115f281836119d0565b38611b8f565b84513d6000823e3d90fd5b8492919a50611ca790833d85116116855761167681836119d0565b999091611b59565b86513d6000823e3d90fd5b879193928b918851908152818882015286818481885afa948515611d60578791600096611d6b575b509083918a519283809263484a47e760e01b8252868d8301525afa968715611d6057986001600160801b039796959493929160849a600098611d41575b505051631b18d90960e31b815297880152860152166044840152166064820152fd5b611d58929850803d106116855761167681836119d0565b958a80611d1f565b89513d6000823e3d90fd5b82919650611d869085933d8411610ebd57610eaf81836119d0565b959091611ce2565b611da6919a50853d8711610ebd57610eaf81836119d0565b9838611b1d565b87513d6000823e3d90fd5b838991865191635013c2b960e01b8352820152fd5b90958382813d8311611df5575b611de481836119d0565b8101031261010f5750519438611aed565b503d611dda565b85513d6000823e3d90fd5b3560ff811681036101c55790565b356001600160a01b03811681036101c55790565b903590601e19813603018212156101c5570180359067ffffffffffffffff82116101c5576020019181360383136101c557565b3561ffff811681036101c55790565b908160209103126101c557516001600160481b03811681036101c55790565b6020818303126101c557805167ffffffffffffffff918282116101c557019082601f830112156101c557815190811161199e5760405192611ed5601f8301601f1916602001856119d0565b818452602082840101116101c557611ef39160208085019101611942565b90565b908160209103126101c5575163ffffffff811681036101c55790565b903590601e19813603018212156101c5570180359067ffffffffffffffff82116101c557602001918160051b360383136101c557565b908160209103126101c557516001600160601b03811681036101c55790565b906001600160601b03809116918215611f7f57160490565b634e487b7160e01b600052601260045260246000fd5b6005546040805163010cf48d60e71b81526001600160a01b03938416600482015292969592949093602093929091908490879060249082908c165afa958615611dfc5790889291600097612103575b50906024859287519a8b93849263cede992f60e01b84526004840152165afa968715611c81576000976120d4575b508260249160045416855192838092632111070960e01b82528b60048301525afa908115611c8157916001600160601b0361209a9260009485916120b7575b5016958551908582019261ffff60f01b9060f01b1683526001600160481b0360b81b9060b81b166022820152600b815261208a816119b4565b8551928392839251928391611942565b8101039060025afa15611c5a5750600051928115611f7f57920690565b6120ce9150863d8811610e3257610e2481836119d0565b38612051565b90968382813d83116120fc575b6120eb81836119d0565b8101031261010f5750519582612012565b503d6120e1565b8592919750612120602491843d86116109e3576109d581836119d0565b97919250611fe4565b600054604051638da5cb5b60e01b81526001600160a01b03916020908290600490829086165afa9081156121cb576000916121ad575b5016330361216957565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b6121c5915060203d81116104b1576104a281836119d0565b3861215f565b6040513d6000823e3d90fdfea26469706673582212200b2cf6de498933adcae426644c131a758d7be13eae18f0e8de7147f96410183364736f6c63430008100033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816306fdde03146118f25750806311c94ee8146118c9578063200d2ed2146118a457806332c2fbf114611854578063365a86fc1461182d57806354fd4d50146117e35780635c40f6f41461179f578063639a86a3146117765780637522c2b1146105f75780637ea63c6e146105895780638129fc1c1461023457806383de896b146101f357806390b8145a146101ca578063aa6a00fd1461018d578063d210b7cf14610164578063ee99205c1461013b578063f11abfd8146101125763f42cb038146100e757600080fd5b3461010f578060031936011261010f576007546040516001600160a01b039091168152602090f35b80fd5b503461010f578060031936011261010f576005546040516001600160a01b039091168152602090f35b503461010f578060031936011261010f576003546040516001600160a01b039091168152602090f35b503461010f578060031936011261010f576004546040516001600160a01b039091168152602090f35b503461010f57604036600319011261010f5760243561ffff811681036101c5576101bb602091600435611aa7565b6040519015158152f35b600080fd5b503461010f578060031936011261010f576008546040516001600160a01b039091168152602090f35b503461010f57602036600319011261010f576004356004811015610230578060ff60209260051c6001015460f86040519360031b161c1615158152f35b5080fd5b503461010f578060031936011261010f5761024d612129565b60018060a01b0380825416906040519183630110ceef60e21b808552602092836004870152602490600c828801526044926b48617368696e6750726f787960a01b8489015260649186898481845afa98891561057e57869961055f575b50876001600160601b0360a01b9916896002541617600255604051828152876004820152600785820152665374616b696e6760c81b8682015287818581855afa80156104e05789918891610542575b50168960035416176003556040518281528760048201526010858201526f417373657274696f6e53746f7261676560801b8682015287818581855afa80156104e05789918891610525575b5016896004541617600455604051828152876004820152600f858201526e4964656e7469747953746f7261676560881b8682015287818581855afa80156104e05789918891610508575b501689600554161760055560405182815287600482015260118582015270506172616d657465727353746f7261676560781b8682015287818581855afa80156104e057899188916104eb575b5016896006541617600655604051828152876004820152600e858201526d50726f66696c6553746f7261676560901b8682015287818581855afa9586156104e0578989977f5365727669636541677265656d656e7453746f7261676550726f78790000000093601c9a916104c3575b50168b6007541617600755604051978896879586528860048701528501528301525afa9182156104b857859261048b575b505016906008541617600855604051f35b6104aa9250803d106104b1575b6104a281836119d0565b8101906119f2565b388061047a565b503d610498565b6040513d87823e3d90fd5b6104da9150893d8b116104b1576104a281836119d0565b38610449565b6040513d89823e3d90fd5b6105029150893d8b116104b1576104a281836119d0565b386103da565b61051f9150893d8b116104b1576104a281836119d0565b3861038e565b61053c9150893d8b116104b1576104a281836119d0565b38610344565b6105599150893d8b116104b1576104a281836119d0565b386102f9565b610577919950873d89116104b1576104a281836119d0565b97386102aa565b6040513d88823e3d90fd5b503461010f57604036600319011261010f576004356024358015158091036101c5576105b3612129565b60048210156105e1578160051c6001019160f883549160031b1660ff811b9283911b16911916179055604051f35b634e487b7160e01b600052603260045260246000fd5b503461010f57602036600319011261010f5767ffffffffffffffff6004351161010f5760e06004353603600319011261010f576008546002546001600160a01b03918216916106ed9160209116610652600435606401611e07565b9060ff610663600435600401611e15565b926106c2605461067d604460043501600435600401611e29565b60405160609890981b6bffffffffffffffffffffffff191689890152600435602401356034890152879181908484013781018b838201520360348101875201856119d0565b604051958694859384936345ed59e560e01b8552166004840152604060248401526044830190611965565b03915afa90811561176b578391611735575b506040516310dc199160e31b815260048101829052602081602481865afa908115610dce5784916116fa575b50156116e25760249060206001600160a01b0361074b6004803501611e15565b166040519384809263fef57daf60e01b825282600435013560048301525afa918215610dce5784926116aa575b5081600019810111610df6576001549260ff8416158061168c575b6114575760055460405163010cf48d60e71b81523360048201529190602090839060249082906001600160a01b03165afa91821561057e578692611436575b50816108376107e5608460043501611e5c565b604080516020810188905260f09290921b6001600160f01b031916908201526000198701604282015260b89290921b6001600160b81b031916606283015281606b81015b03601f1981018352826119d0565b6020815191012060ff8660081c1615806113b7575b6112fe5761085e608460043501611e5c565b61ffff604051916357e1255760e01b835286600484015216602482015260001986016044820152602081606481865afa9081156112f35788916112bd575b5060065460405163659621b560e01b815291949190602090829060049082906001600160a01b03165afa9081156112b2578991611293575b5088945b604051620153f560ea1b815260048101829052602081602481895afa908115611288578b91611269575b506001600160481b038481169116141580611257575b156109f75761092b608460043501611e5c565b60405191635b3db70f60e11b835260048301528a6020836024818a5afa80156109ea576109af6001936108298c9360ff978f96916109bb575b50604080516020810196875260f09490941b6001600160f01b03191690840152600019909501604283015260b89490941b6001600160b81b031916606282015291928290606b820190565b519020960116946108d8565b6109dd915060203d6020116109e3575b6109d581836119d0565b810190611e6b565b38610964565b503d6109cb565b50604051903d90823e3d90fd5b5086888a9660ff8260101c161580611244575b611175575060ff90610a40610a23600435600401611e15565b610a31608460043501611e5c565b90602460043501359033611f95565b92909160181c161580611017575b610ee3575050610a62600435600401611e15565b610a76604460043501600435600401611e29565b909261ffff610a89606460043501611e07565b60ff610a99608460043501611e5c565b91856040519860808a528160808b015260a08a01378c60a0878a0101521660208701521660408501526000190160608401527f55643f50949abc304fd96835e8f3a28d40d1ea5e41a1ac3d8ef593880adc679c6001600160481b0386169360a0816024600435013595600180841b031694601f80199101168101030190a4604051634089a17d60e01b815260048101879052602081602481885afa90811561057e578691610ec4575b5060405163d1a640c760e01b815260048101889052602081602481895afa9081156104e0578791610e95575b5061ffff80610b81608460043501611e5c565b1691160361ffff8111610e505761ffff600191160161ffff8111610e5057610bed9161ffff610bb1921690611f67565b916020610bc2608460043501611e5c565b604051632b275f3d60e21b8152600481018b905261ffff909116602482015292839081906044820190565b0381895afa9182156104e0578792610e64575b5063ffffffff80809316911603818111610e5057610c2092911690611f67565b6003546001600160a01b03169190823b15610e4c576001600160481b0391606488886001600160601b0381956040519788968795633277e5f760e11b8752600487015216602485015216968760448401525af180156104b857610e39575b50604051634089a17d60e01b815260048101869052602081602481875afa9081156104b857906001600160601b03918691610e0a575b501603936001600160601b038511610df6578394833b15610dd9576001600160601b036040519163e54b26ff60e01b8352836004840152166024820152848160448183885af19081156104b8578591610ddd575b5050610d18608460043501611e5c565b90833b15610dd95760405163beca40f360e01b8152600481019190915261ffff919091166024820152838160448183875af1908115610dce578491610dba575b5050813b15610db6578291604483926040519485938492631eb18b8b60e11b845260048401528160248401525af18015610dab57610d97575b50604051f35b610da09061198a565b61010f578082610d91565b6040513d84823e3d90fd5b5050fd5b610dc39061198a565b610db6578285610d58565b6040513d86823e3d90fd5b8480fd5b610de69061198a565b610df1578386610d08565b505050fd5b634e487b7160e01b84526011600452602484fd5b610e2c915060203d602011610e32575b610e2481836119d0565b810190611f48565b87610cb4565b503d610e1a565b610e459094919461198a565b9285610c7e565b8580fd5b634e487b7160e01b87526011600452602487fd5b610e8791925060203d602011610e8e575b610e7f81836119d0565b810190611ef6565b9088610c00565b503d610e75565b610eb7915060203d602011610ebd575b610eaf81836119d0565b810190611a11565b88610b6e565b503d610ea5565b610edd915060203d602011610e3257610e2481836119d0565b87610b42565b88918891866024610ef8608460043501611e5c565b6007546040516320e085cd60e11b81526001600160481b038516600482015291939192879184919082906001600160a01b03165afa91821561057e579160049891610f9f938892610fec575b506001600160481b03919261ffff610f6360a48d35018d358e01611f12565b97909b6040519d8e63f7c6048760e01b815201521660248c01526000190160448b01521660648901526101206084890152610124880190611965565b8681036003190160a4880152818152936001600160fb1b03821161010f5750918593916020959360051b80948785013760c485015260c4600435013560e485015261010484015201030190fd5b6001600160481b039250611011903d808b833e61100981836119d0565b810190611e8a565b91610f44565b50979390959261103460a460049794973501600435600401611f12565b6040979197519760c4600435013560208a01528960408a01526040895288606081011067ffffffffffffffff60608b0111176111615760608901604052885160208a01209167ffffffffffffffff811161114d578060051b9061109d6020830160608d016119d0565b60608b015260808a019036818401116111495782915b818401831061113957505050509789985b60608901518a10156111255760808a60051b8a01015190818110600014611116578b5260205260408a205b98600019811461110257600101986110c4565b634e487b7160e01b8b52601160045260248bfd5b908b5260205260408a206110ef565b9093969a9295985082919497501415610a4e565b82358152602092830192016110b3565b8c80fd5b634e487b7160e01b8c52604160045260248cfd5b634e487b7160e01b8b52604160045260248bfd5b8891508785611188608460043501611e5c565b946001600160481b038360018060a01b0360075416936024604051809481936320e085cd60e11b835216968760048301525afa938415611238579161121093918360ff9661121b575b505061ffff604051988998636806074560e01b8a5260048a0152166024880152600019016044870152606486015260c0608486015260c4850190611965565b911660a48301520390fd5b6112309294503d8091833e61100981836119d0565b9188806111d1565b604051903d90823e3d90fd5b5063ffffffff841660ff82161015610a0a565b5063ffffffff821660ff871610610918565b611282915060203d6020116109e3576109d581836119d0565b38610902565b6040513d8d823e3d90fd5b6112ac915060203d602011610e8e57610e7f81836119d0565b386108d4565b6040513d8b823e3d90fd5b90506020813d6020116112eb575b816112d8602093836119d0565b810103126112e757513861089c565b8780fd5b3d91506112cb565b6040513d8a823e3d90fd5b8685856001600160481b0386611318608460043501611e5c565b938560018060a01b0360075416926024604051809681936320e085cd60e11b835216958660048301525afa92831561057e57866113969596979461139a575b505061ffff604051968796634755f22560e01b88526004880152166024860152600019016044850152606484015260a0608484015260a4830190611965565b0390fd5b6113af9294503d8091833e61100981836119d0565b918680611357565b50604051635c6c1fef60e01b815260048101829052602081602481865afa80156112f35788906113f1575b64ffffffffff9150161561084c565b506020813d60201161142e575b8161140b602093836119d0565b810103126112e7575164ffffffffff811681036112e75764ffffffffff906113e2565b3d91506113fe565b61145091925060203d6020116109e3576109d581836119d0565b90386107d2565b84926040519163484a47e760e01b8352836004840152602083602481845afa9283156104b857859361165b575b50604051630271c2cf60e61b81526004810185905290602082602481845afa91821561057e578692611626575b5060206114e46024936001600160801b036114dd8861ffff6114d7608460043501611e5c565b16611a63565b1690611a9a565b91604051938480926399149f7760e01b82528960048301525afa801561057e5760646001600160801b036115288760ff8395611531988d91611607575b5016611a63565b16041690611a9a565b90611540608460043501611e5c565b60065460405163274f3ac360e21b815291949190602090829060049082906001600160a01b03165afa9081156104e05760646001600160801b0361159861ffff9560ff6115a196849660c49e916115d8575016611a63565b16041684611a9a565b604051638b98b4a760e01b8152600481019690965293166024850152600019016044840152606483015260848201524260a4820152fd5b6115fa915060203d602011611600575b6115f281836119d0565b810190611a4a565b8e611521565b503d6115e8565b611620915060203d602011611600576115f281836119d0565b8d611521565b91506020823d602011611653575b81611641602093836119d0565b81010312610e4c5790519060206114b1565b3d9150611634565b61167e91935060203d602011611685575b61167681836119d0565b810190611a2b565b9185611484565b503d61166c565b506116a461169e608460043501611e5c565b83611aa7565b15610793565b9091506020813d6020116116da575b816116c6602093836119d0565b810103126116d657519038610778565b8380fd5b3d91506116b9565b60249060405190635013c2b960e01b82526004820152fd5b90506020813d60201161172d575b81611715602093836119d0565b810103126116d6575180151581036116d6573861072b565b3d9150611708565b90506020813d602011611763575b81611750602093836119d0565b8101031261175f5751386106ff565b8280fd5b3d9150611743565b6040513d85823e3d90fd5b503461010f578060031936011261010f576006546040516001600160a01b039091168152602090f35b503461010f57602036600319011261010f57600435801515809103610230576117c6612129565b815460ff60a01b191660a09190911b60ff60a01b16178155604051f35b503461010f578060031936011261010f57611829604051611803816119b4565b60058152640312e302e360dc1b6020820152604051918291602083526020830190611965565b0390f35b503461010f578060031936011261010f57546040516001600160a01b039091168152602090f35b503461010f57606036600319011261010f576004356001600160a01b0381168103610230576044359161ffff8316830361010f576040611898846024358533611f95565b82519182526020820152f35b503461010f578060031936011261010f5760ff6020915460a01c166040519015158152f35b503461010f578060031936011261010f576002546040516001600160a01b039091168152602090f35b90503461023057816003193601126102305780611911611829926119b4565b601081526f50726f6f664d616e616765725631553160801b6020820152604051918291602083526020830190611965565b60005b8381106119555750506000910152565b8181015183820152602001611945565b9060209161197e81518092818552858086019101611942565b601f01601f1916010190565b67ffffffffffffffff811161199e57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761199e57604052565b90601f8019910116810190811067ffffffffffffffff82111761199e57604052565b908160209103126101c557516001600160a01b03811681036101c55790565b908160209103126101c5575161ffff811681036101c55790565b908160209103126101c557516001600160801b03811681036101c55790565b908160209103126101c5575160ff811681036101c55790565b6001600160801b039182809216918291169204821181151516611a84570290565b634e487b7160e01b600052601160045260246000fd5b91908201809211611a8457565b60085460408051630271c2cf60e61b81526004808201859052602495946001600160a01b03949293926020919086169082868a81855afa958615611dfc57600096611dcd575b508515611db85784519763d1a640c760e01b808a5282868b0152848a8c81875afa998a15611dad5760009a611d8e575b5061ffff808093169a168a1015611cba575050845163484a47e760e01b815284810182905298838a8281865afa998a15611caf5760009a611c8c575b509083918651809481936399149f7760e01b8352888301525afa908115611c81579160ff60648293611ba4979695600091611c64575b506001600160801b039788938492168d611a63565b160416966006541684519384809263274f3ac360e21b82525afa928315611c5a5750611be360ff85946064948694600092611c3d575b50501689611a63565b16041693611c0584611c0084611bf9858b611a63565b1686611a9a565b611a9a565b4210159586611c18575b50505050505090565b611c309650916114dd611c00959492611c0094611a63565b4210388080808080611c0f565b611c539250803d10611600576115f281836119d0565b3880611bda565b513d6000823e3d90fd5b611c7b9150843d8611611600576115f281836119d0565b38611b8f565b84513d6000823e3d90fd5b8492919a50611ca790833d85116116855761167681836119d0565b999091611b59565b86513d6000823e3d90fd5b879193928b918851908152818882015286818481885afa948515611d60578791600096611d6b575b509083918a519283809263484a47e760e01b8252868d8301525afa968715611d6057986001600160801b039796959493929160849a600098611d41575b505051631b18d90960e31b815297880152860152166044840152166064820152fd5b611d58929850803d106116855761167681836119d0565b958a80611d1f565b89513d6000823e3d90fd5b82919650611d869085933d8411610ebd57610eaf81836119d0565b959091611ce2565b611da6919a50853d8711610ebd57610eaf81836119d0565b9838611b1d565b87513d6000823e3d90fd5b838991865191635013c2b960e01b8352820152fd5b90958382813d8311611df5575b611de481836119d0565b8101031261010f5750519438611aed565b503d611dda565b85513d6000823e3d90fd5b3560ff811681036101c55790565b356001600160a01b03811681036101c55790565b903590601e19813603018212156101c5570180359067ffffffffffffffff82116101c5576020019181360383136101c557565b3561ffff811681036101c55790565b908160209103126101c557516001600160481b03811681036101c55790565b6020818303126101c557805167ffffffffffffffff918282116101c557019082601f830112156101c557815190811161199e5760405192611ed5601f8301601f1916602001856119d0565b818452602082840101116101c557611ef39160208085019101611942565b90565b908160209103126101c5575163ffffffff811681036101c55790565b903590601e19813603018212156101c5570180359067ffffffffffffffff82116101c557602001918160051b360383136101c557565b908160209103126101c557516001600160601b03811681036101c55790565b906001600160601b03809116918215611f7f57160490565b634e487b7160e01b600052601260045260246000fd5b6005546040805163010cf48d60e71b81526001600160a01b03938416600482015292969592949093602093929091908490879060249082908c165afa958615611dfc5790889291600097612103575b50906024859287519a8b93849263cede992f60e01b84526004840152165afa968715611c81576000976120d4575b508260249160045416855192838092632111070960e01b82528b60048301525afa908115611c8157916001600160601b0361209a9260009485916120b7575b5016958551908582019261ffff60f01b9060f01b1683526001600160481b0360b81b9060b81b166022820152600b815261208a816119b4565b8551928392839251928391611942565b8101039060025afa15611c5a5750600051928115611f7f57920690565b6120ce9150863d8811610e3257610e2481836119d0565b38612051565b90968382813d83116120fc575b6120eb81836119d0565b8101031261010f5750519582612012565b503d6120e1565b8592919750612120602491843d86116109e3576109d581836119d0565b97919250611fe4565b600054604051638da5cb5b60e01b81526001600160a01b03916020908290600490829086165afa9081156121cb576000916121ad575b5016330361216957565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b6121c5915060203d81116104b1576104a281836119d0565b3861215f565b6040513d6000823e3d90fdfea26469706673582212200b2cf6de498933adcae426644c131a758d7be13eae18f0e8de7147f96410183364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 15379,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "status",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11710,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "reqs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bool)4_storage"
      },
      {
        "astId": 11713,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "hashingProxy",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(HashingProxy)8950"
      },
      {
        "astId": 11716,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "stakingContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Staking)15211"
      },
      {
        "astId": 11719,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "assertionStorage",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AssertionStorage)18073"
      },
      {
        "astId": 11722,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "identityStorage",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IdentityStorage)18485"
      },
      {
        "astId": 11725,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "parametersStorage",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ParametersStorage)19108"
      },
      {
        "astId": 11728,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "profileStorage",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ProfileStorage)19582"
      },
      {
        "astId": 11731,
        "contract": "contracts/ProofManagerV1U1.sol:ProofManagerV1U1",
        "label": "serviceAgreementStorageProxy",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ServiceAgreementStorageProxy)21098"
      }
    ],
    "types": {
      "t_array(t_bool)4_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[4]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AssertionStorage)18073": {
        "encoding": "inplace",
        "label": "contract AssertionStorage",
        "numberOfBytes": "20"
      },
      "t_contract(HashingProxy)8950": {
        "encoding": "inplace",
        "label": "contract HashingProxy",
        "numberOfBytes": "20"
      },
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_contract(IdentityStorage)18485": {
        "encoding": "inplace",
        "label": "contract IdentityStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ParametersStorage)19108": {
        "encoding": "inplace",
        "label": "contract ParametersStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ProfileStorage)19582": {
        "encoding": "inplace",
        "label": "contract ProfileStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ServiceAgreementStorageProxy)21098": {
        "encoding": "inplace",
        "label": "contract ServiceAgreementStorageProxy",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)15211": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      }
    }
  }
}
