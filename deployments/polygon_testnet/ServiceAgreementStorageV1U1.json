{
  "address": "0xc3b7b107F40287e686C9B0D5333E28285A735F4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MisplacedOTPWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MisplacedTokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "custodian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "prevIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "nextIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "score",
          "type": "uint40"
        }
      ],
      "name": "createEpochStateCommitSubmissionObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        },
        {
          "internalType": "uint8",
          "name": "scoreFunctionId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "proofWindowOffsetPerc",
          "type": "uint8"
        }
      ],
      "name": "createServiceAgreementObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "decrementAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "decrementEpochStateCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "deleteAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "deleteEpochStateCommitSubmissionsObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "deleteEpochStateCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "deleteServiceAgreementObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stateId",
          "type": "bytes32"
        }
      ],
      "name": "deleteUpdateCommitsDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "epochStateCommitSubmissionExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        },
        {
          "internalType": "uint96[2]",
          "name": "tokens",
          "type": "uint96[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "scoreFunctionIdAndProofWindowOffsetPerc",
          "type": "uint8[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementEpochLength",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        }
      ],
      "name": "getAgreementEpochSubmissionHead",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementEpochsNumber",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementProofWindowOffsetPerc",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "getAgreementRewardedNodesNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementScoreFunctionId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementTokenAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "getAgreementUpdateTokenAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getEpochStateCommitSubmission",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "prevIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "nextIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "score",
              "type": "uint40"
            }
          ],
          "internalType": "struct ServiceAgreementStructsV1.CommitSubmission",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getEpochStateCommitSubmissionIdentityId",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getEpochStateCommitSubmissionNextIdentityId",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getEpochStateCommitSubmissionPrevIdentityId",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        }
      ],
      "name": "getEpochStateCommitSubmissionScore",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "getEpochStateCommitsCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stateId",
          "type": "bytes32"
        }
      ],
      "name": "getUpdateCommitsDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "incrementAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        }
      ],
      "name": "incrementEpochStateCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "serviceAgreementExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        }
      ],
      "name": "setAgreementEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "headCommitId",
          "type": "bytes32"
        }
      ],
      "name": "setAgreementEpochSubmissionHead",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        }
      ],
      "name": "setAgreementEpochsNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "proofWindowOffsetPerc",
          "type": "uint8"
        }
      ],
      "name": "setAgreementProofWindowOffsetPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "rewardedNodesNumber",
          "type": "uint32"
        }
      ],
      "name": "setAgreementRewardedNodesNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "newScoreFunctionId",
          "type": "uint8"
        }
      ],
      "name": "setAgreementScoreFunctionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        }
      ],
      "name": "setAgreementStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        }
      ],
      "name": "setAgreementTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint96",
          "name": "updateTokenAmount",
          "type": "uint96"
        }
      ],
      "name": "setAgreementUpdateTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "setEpochStateCommitSubmissionIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "nextIdentityId",
          "type": "uint72"
        }
      ],
      "name": "setEpochStateCommitSubmissionNextIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint72",
          "name": "prevIdentityId",
          "type": "uint72"
        }
      ],
      "name": "setEpochStateCommitSubmissionPrevIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "score",
          "type": "uint40"
        }
      ],
      "name": "setEpochStateCommitSubmissionScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "epochStateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "newEpochStateCommitsCount",
          "type": "uint8"
        }
      ],
      "name": "setEpochStateCommitsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "setUpdateCommitsDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenContract",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "tokenAmount",
          "type": "uint96"
        }
      ],
      "name": "transferAgreementTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "custodian",
          "type": "address"
        }
      ],
      "name": "transferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMisplacedOTP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContractAddress",
          "type": "address"
        }
      ],
      "name": "withdrawMisplacedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93a4939c9ad448d49fd7a71949a63ea26b74062ba3b7670f4d92dd546cf578c9",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0xc3b7b107F40287e686C9B0D5333E28285A735F4E",
    "transactionIndex": 6,
    "gasUsed": "1711968",
    "logsBloom": "0x
    "blockHash": "0x6227132e180c1faf0840236ce03b7b3bb77bbafd7e673ee5ca8475968e6e3052",
    "transactionHash": "0x93a4939c9ad448d49fd7a71949a63ea26b74062ba3b7670f4d92dd546cf578c9",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 37384456,
        "transactionHash": "0x93a4939c9ad448d49fd7a71949a63ea26b74062ba3b7670f4d92dd546cf578c9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001e69210ce6ca00000000000000000000000000000000000000000000000000887f7aee01ee80a600000000000000000000000000000000000000000000207c3b5508c607df3177000000000000000000000000000000000000000000000000886111ccf507b6a600000000000000000000000000000000000000000000207c3b7371e714c5fb77",
        "logIndex": 13,
        "blockHash": "0x6227132e180c1faf0840236ce03b7b3bb77bbafd7e673ee5ca8475968e6e3052"
      }
    ],
    "blockNumber": 37384456,
    "cumulativeGasUsed": "2104907",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MisplacedOTPWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MisplacedTokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"name\":\"createEpochStateCommitSubmissionObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"scoreFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"proofWindowOffsetPerc\",\"type\":\"uint8\"}],\"name\":\"createServiceAgreementObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"decrementAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"decrementEpochStateCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"deleteAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"deleteEpochStateCommitSubmissionsObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"deleteEpochStateCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"deleteServiceAgreementObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateId\",\"type\":\"bytes32\"}],\"name\":\"deleteUpdateCommitsDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"epochStateCommitSubmissionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"},{\"internalType\":\"uint96[2]\",\"name\":\"tokens\",\"type\":\"uint96[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"scoreFunctionIdAndProofWindowOffsetPerc\",\"type\":\"uint8[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementEpochLength\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"}],\"name\":\"getAgreementEpochSubmissionHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementEpochsNumber\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementProofWindowOffsetPerc\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"getAgreementRewardedNodesNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementScoreFunctionId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementTokenAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getAgreementUpdateTokenAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getEpochStateCommitSubmission\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"internalType\":\"struct ServiceAgreementStructsV1.CommitSubmission\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getEpochStateCommitSubmissionIdentityId\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getEpochStateCommitSubmissionNextIdentityId\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getEpochStateCommitSubmissionPrevIdentityId\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"}],\"name\":\"getEpochStateCommitSubmissionScore\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"getEpochStateCommitsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateId\",\"type\":\"bytes32\"}],\"name\":\"getUpdateCommitsDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"incrementAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"}],\"name\":\"incrementEpochStateCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"serviceAgreementExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"}],\"name\":\"setAgreementEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"headCommitId\",\"type\":\"bytes32\"}],\"name\":\"setAgreementEpochSubmissionHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"}],\"name\":\"setAgreementEpochsNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"proofWindowOffsetPerc\",\"type\":\"uint8\"}],\"name\":\"setAgreementProofWindowOffsetPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"rewardedNodesNumber\",\"type\":\"uint32\"}],\"name\":\"setAgreementRewardedNodesNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"newScoreFunctionId\",\"type\":\"uint8\"}],\"name\":\"setAgreementScoreFunctionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setAgreementStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"setAgreementTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"updateTokenAmount\",\"type\":\"uint96\"}],\"name\":\"setAgreementUpdateTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"setEpochStateCommitSubmissionIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"}],\"name\":\"setEpochStateCommitSubmissionNextIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"}],\"name\":\"setEpochStateCommitSubmissionPrevIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"name\":\"setEpochStateCommitSubmissionScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochStateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"newEpochStateCommitsCount\",\"type\":\"uint8\"}],\"name\":\"setEpochStateCommitsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"setUpdateCommitsDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tokenAmount\",\"type\":\"uint96\"}],\"name\":\"transferAgreementTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"custodian\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMisplacedOTP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"withdrawMisplacedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/storage/ServiceAgreementStorageV1U1.sol\":\"ServiceAgreementStorageV1U1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ICustodian} from \\\"./interface/ICustodian.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Guardian is HubDependent {\\n    event TokenTransferred(address indexed custodian, uint256 amount);\\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\\n\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function transferTokens(address payable custodian) external onlyHubOwner {\\n        require(custodian != address(0x0), \\\"Custodian cannot be a zero address\\\");\\n        uint contractSize;\\n        assembly {\\n            contractSize := extcodesize(custodian)\\n        }\\n        require(contractSize > 0, \\\"Cannot transfer tokens to custodian that is not a contract!\\\");\\n\\n        ICustodian custodianContract = ICustodian(custodian);\\n        bool hasOwnersFunction = false;\\n        try custodianContract.getOwners() returns (address[] memory owners) {\\n            hasOwnersFunction = true;\\n            require(owners.length > 0, \\\"Cannot transfer tokens to custodian without owners defined!\\\");\\n        } catch {}\\n        require(hasOwnersFunction, \\\"Cannot transfer tokens to custodian without getOwners function!\\\");\\n\\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\\n        require(transactionResult, \\\"Token transaction execution failed!\\\");\\n\\n        emit TokenTransferred(custodian, balanceTransferred);\\n    }\\n\\n    function withdrawMisplacedOTP() external onlyHubOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\\n    }\\n\\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\\n        require(tokenContractAddress != address(tokenContract), \\\"Cannot use this function with the TRAC contract\\\");\\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\\n\\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\\n        if (balance > 0) {\\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\\n            require(transactionResult, \\\"Token transaction execution failed\\\");\\n        }\\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcef9797032f7c9aae94d003e52a83ae8e978b1ca5b3fbca261e552252d3de8\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/interface/ICustodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ICustodian {\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf9c1575729c595ec1c4c6cec71e0890774efda80299b476b3c243b4fd168c69d\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1U1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // AgreementId [hash(assetStorage + tokenId + key)] => ExtendedServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ExtendedServiceAgreement) internal serviceAgreements;\\n\\n    // CommitId [keccak256(agreementId + epoch + stateIndex + identityId)] => stateCommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal epochStateCommitSubmissions;\\n\\n    // EpochStateId [keccak256(agreementId + epoch + stateIndex)] => epochStateCommitsCount\\n    mapping(bytes32 => uint8) internal epochStateCommitsCount;\\n\\n    // StateId [keccak256(agreementId + stateIndex)] => updateCommitsDeadline\\n    mapping(bytes32 => uint256) internal updateCommitsDeadlines;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ExtendedServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = startTime;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            [serviceAgreements[agreementId].tokenAmount, serviceAgreements[agreementId].updateTokenAmount],\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].updateTokenAmount;\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].updateTokenAmount = updateTokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[keccak256(abi.encodePacked(epoch, stateIndex))];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[\\n            keccak256(abi.encodePacked(epoch, stateIndex))\\n        ] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        delete serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createEpochStateCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteEpochStateCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].identityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionPrevIdentityId(\\n        bytes32 commitId,\\n        uint72 prevIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionNextIdentityId(\\n        bytes32 commitId,\\n        uint72 nextIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return epochStateCommitSubmissions[commitId].score;\\n    }\\n\\n    function setEpochStateCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].score = score;\\n    }\\n\\n    function epochStateCommitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return epochStateCommitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function incrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]++;\\n    }\\n\\n    function decrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]--;\\n    }\\n\\n    function getEpochStateCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function setEpochStateCommitsCount(bytes32 epochStateId, uint8 newEpochStateCommitsCount) external onlyContracts {\\n        epochStateCommitsCount[epochStateId] = newEpochStateCommitsCount;\\n    }\\n\\n    function deleteEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        delete epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return updateCommitsDeadlines[stateId];\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        updateCommitsDeadlines[stateId] = deadline;\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        delete updateCommitsDeadlines[stateId];\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d25de399b6bccc3a892d0f71abd185892b50a717106fe88328a42fc1e52d98\",\"license\":\"MIT\"},\"contracts/structs/ServiceAgreementStructsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementStructsV1 {\\n    struct CommitSubmission {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n        uint40 score;\\n    }\\n\\n    struct ServiceAgreementInputArgs {\\n        address assetCreator;\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epochsNumber;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n    }\\n\\n    struct ServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // epoch => headCommitId\\n        mapping(uint16 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct ExtendedServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint96 updateTokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // keccak256(epoch + stateIndex) => headCommitId\\n        mapping(bytes32 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct CommitInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n    }\\n\\n    struct ProofInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n        bytes32[] proof;\\n        bytes32 chunkHash;\\n    }\\n}\\n\",\"keccak256\":\"0x5b33bc12e685dacf652dfe81b7fff14806297132be7df872c45a598ff783d638\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100bf57601f611e5e38819003918201601f19168301916001600160401b038311848410176100c4578084926020946040528339810103126100bf57516001600160a01b038116908190036100bf57801561007a57600080546001600160a01b031916919091179055604051611d8390816100db8239f35b60405162461bcd60e51b815260206004820152601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80620486e114611947578063038fed731461192057806303ddf885146118ed57806306fdde03146118985780630c89a0df146114ab5780630f3a549d146114695780631101ca951461142057806315ce5a45146113f957806326b8fa70146113cf578063365a86fc146113a75780634089a17d1461137157806344c990b01461133f578063484a47e7146113095780635310aaaf146112c157806354fd4d501461128057806355a373d614611257578063607a63f0146111f957806361f31d6d1461115a5780636441a276146111095780636ce1510e146110275780636ff015ae14610ef55780638129fc1c14610e2f578063848e591114610dd357806386e0cc8814610daa5780638bdf6d6414610d7a57806399149f7714610d4b57806399eb184d14610d195780639c70b3c014610cf25780639d7937b214610b00578063a631489614610a9e578063ac64112e14610a4d578063ac9d7cf414610a0b578063ad7ae2c3146109dc578063b0686dea146109a9578063b2ffa99714610945578063b7687472146108fb578063beca40f314610884578063c332964714610848578063c6b25e57146107da578063ca58ef7d1461077f578063cb327c7d1461071c578063ce60dc61146106ed578063d1a640c7146106bf578063d311873a14610694578063d66fca081461065e578063db0d103814610634578063dbe3177114610508578063e022f23f146104a8578063e25aa7251461045c578063e54b26ff146103f2578063e6123b3814610375578063e9410053146102c8578063eb5983451461029f5763ecd431db1461027257600080fd5b3461029b57602036600319011261029b57602092829135815260038452205460d81c9051908152f35b8280fd5b503461029b57602036600319011261029b57816020938260ff9335825285522054169051908152f35b503461029b578160031936011261029b5760206102e3611b2b565b60446102ed611a90565b916102f6611ca8565b600154865163a9059cbb60e01b81526001600160a01b03928316968101969096526001600160601b039093166024860152849283918891165af180156103695761033e575051f35b61035e9060203d8111610362575b6103568183611b8f565b810190611bc5565b5051f35b503d61034c565b505051903d90823e3d90fd5b503461029b57608036600319011261029b5761038f611a7a565b90610398611ca8565b35835260026020908152828420835160f09390931b6001600160f01b0319169183019182526044356022840152600301916103e081604281015b03601f198101835282611b8f565b51902083526020526064358183205551f35b503461029b578160031936011261029b576104599061040f611a90565b90610418611ca8565b358452600260205282842060010180546bffffffffffffffffffffffff60901b191660909290921b6bffffffffffffffffffffffff60901b16919091179055565b51f35b503461029b578160031936011261029b57610475611a90565b9061047e611ca8565b35835260026020526001600160601b0360028385200191166001600160601b031982541617905551f35b503461029b578160031936011261029b5760243564ffffffffff8116810361050457610459916104d6611ca8565b358452600360205282842080546001600160d81b031660d89290921b6001600160d81b031916919091179055565b8380fd5b503461029b5760a036600319011261029b57610522611b15565b604435916001600160481b03808416809403610630576064359181831680930361062c576084359164ffffffffff93848416809403610628576105de82610459986106089561056f611ca8565b828c519a61057c8c611b41565b168a5260208a019182528b8a0194855260608a01978852358c526003602052818b8d209951166001600160481b03198a54161789555116879068ffffffffffffffffff60481b82549160481b169068ffffffffffffffffff60481b1916179055565b51855468ffffffffffffffffff60901b1916911660901b68ffffffffffffffffff60901b16178455565b5182546001600160d81b0316911660d81b6001600160d81b031916179055565b8880fd5b8680fd5b8580fd5b503461029b57602036600319011261029b5761064e611ca8565b3582526005602052818181205551f35b503461029b57602036600319011261029b57610678611ca8565b3582526002602052816002828220828155826001820155015551f35b5050346106bb576106a436611ab6565b906106ad611ca8565b835260056020528183205551f35b5080fd5b503461029b57602036600319011261029b5760018260209461ffff9335815260028652200154169051908152f35b503461029b57602036600319011261029b5760028260209460ff9335815282865220015460601c169051908152f35b503461029b57606036600319011261029b57610736611a7a565b6044359163ffffffff831680930361077b5761ffff90610754611ca8565b80358652600260205284862001911684526020528183209063ffffffff1982541617905551f35b8480fd5b503461029b578160031936011261029b576104599061079c611b15565b906107a5611ca8565b35845260036020528284209068ffffffffffffffffff60481b82549160481b169068ffffffffffffffffff60481b1916179055565b503461029b57606036600319011261029b5760209282916107f9611a7a565b903582526002808652838320845160f09390931b6001600160f01b031916838801908152604435928101929092526003019161083881602284016103d2565b5190208252845220549051908152f35b503461029b578160031936011261029b57610861611aa6565b9061086a611ca8565b8035845260205260ff828420911660ff1982541617905551f35b503461029b578160031936011261029b5761089d611a7a565b6108a5611ca8565b81358452600260205261ffff8284862001911684526020528183209081549063ffffffff90818316908282146108e85750600101169063ffffffff191617905551f35b634e487b7160e01b875260119052602486fd5b503461029b578160031936011261029b5761ffff610917611a7a565b91610920611ca8565b803585526002602052838520019116835260205280822063ffffffff19815416905551f35b503461029b578160031936011261029b5761095e611a7a565b610966611ca8565b81358452600260205261ffff8284862001911684526020528183209081549063ffffffff908183169081156108e8575060001901169063ffffffff191617905551f35b503461029b57602036600319011261029b57816020936001600160481b039235815260038552205460481c169051908152f35b503461029b57602036600319011261029b576109f6611ca8565b80358352602052808220805460ff1916905551f35b503461029b578160031936011261029b578160209363ffffffff9261ffff610a31611a7a565b8235845260028852848420911683520185522054915191168152f35b503461029b578160031936011261029b5761045990610a6a611aa6565b90610a73611ca8565b3584526002602081905283852001805460ff60681b191660689290921b60ff60681b16919091179055565b503461029b578160031936011261029b576024356001600160801b03811681036105045761045991610ace611ca8565b35845260026020526001838520019062010000600160901b0382549160101b169062010000600160901b031916179055565b503461029b5760208060031936011261050457610b1b611b2b565b91610b24611bdd565b6001546001600160a01b038481169391168314610c985784516370a0823160e01b81523083820152928184602481845afa938415610c5f578794610c69575b5083610bad575b505083516001600160a01b0393909316835250602082015233907f5fe8cbe5f97c59a4b590a924c3fc62aac6b6a653ec22e39f5fc6d3732f18c25490604090a251f35b855163a9059cbb60e01b815233848201908152602081018690529091839183919082908b90829060400103925af1908115610c5f578791610c42575b5015610bf55780610b6a565b845162461bcd60e51b815291820152602260248201527f546f6b656e207472616e73616374696f6e20657865637574696f6e206661696c604482015261195960f21b606482015260849150fd5b610c599150823d8411610362576103568183611b8f565b38610be9565b86513d89823e3d90fd5b9093508181813d8311610c91575b610c818183611b8f565b8101031261062c57519238610b63565b503d610c77565b845162461bcd60e51b815291820152602f60248201527f43616e6e6f742075736520746869732066756e6374696f6e207769746820746860448201526e194815149050c818dbdb9d1c9858dd608a1b606482015260849150fd5b503461029b57602036600319011261029b5760209282913581526002845220549051908152f35b503461029b57602036600319011261029b57816020936001600160481b03923581526003855220541615159051908152f35b503461029b57602036600319011261029b5760028260209460ff9335815282865220015460681c169051908152f35b503461029b57602036600319011261029b57816020936001600160481b0392358152600385522054169051908152f35b503461029b57602036600319011261029b57602092829135815260028452205415159051908152f35b503461029b57602036600319011261029b57610ded611ca8565b80358352806020528183209081549060ff82169060ff8214610e1c5750600160ff9101169060ff191617905551f35b634e487b7160e01b865260119052602485fd5b503461029b578260031936011261029b57610e48611bdd565b82548251630110ceef60e21b8152602092810183905260056024820152642a37b5b2b760d91b60448201526001600160a01b039290918290606490829086165afa908115610ee8578491610eaf575b50166001600160601b0360a01b600154161760015551f35b90506020813d8211610ee0575b81610ec960209383611b8f565b8101031261050457610eda90611bb1565b38610e97565b3d9150610ebc565b50505051903d90823e3d90fd5b50903461029b5760209182600319360112610504578284913590838051610f1b81611b73565b369037838051610f2a81611b73565b36903781835260028082528484208054600191820154875161ffff82169892979396949594929160101c6001600160801b0316610f6682611b73565b8385528686526001600160601b03928389828820015460901c16835284865287875283888288200154168784015280519a610fa08c611b73565b85875288885260ff95868a848a20015460601c168d5287528888528589838920015460681c16888d015281519a8b52878b0152890152606088019084915b878310611012575050505060a086019691965b848810610ffd5760e087f35b82518216815296850196918301918301610ff1565b81518416815291880191908601908601610fde565b503461029b578260031936011261029b57611040611bdd565b479081611077575b5081519081527fd32ec2b96f6389848e3f68f670160bf5a50b5024b6f62a61108f20025179a29160203392a251f35b838080855185335af13d15611104573d67ffffffffffffffff81116110f1578451906110ad601f8201601f191660200183611b8f565b81528560203d92013e5b61104857606490602084519162461bcd60e51b8352820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152fd5b634e487b7160e01b865260418352602486fd5b6110b7565b503461029b578160031936011261029b5761045990611126611aa6565b9061112f611ca8565b3584526002602081905283852001805460ff60601b191660609290921b60ff60601b16919091179055565b503461029b57602036600319011261029b57818364ffffffffff926080956060845161118581611b41565b82815282602082015282868201520152358152600360205220918051926111ab84611b41565b54906001600160481b03808316948581528160208201818660481c168152606085840193838860901c168552019560d81c865284519788525116602087015251169084015251166060820152f35b503461029b578160031936011261029b5761045990611216611b15565b9061121f611ca8565b3584526003602052828420805468ffffffffffffffffff60901b191660909290921b68ffffffffffffffffff60901b16919091179055565b5050346106bb57816003193601126106bb5760015490516001600160a01b039091168152602090f35b5050346106bb57816003193601126106bb5780516112bd916112a182611b73565b60058252640312e302e360dc1b60208301525191829182611acc565b0390f35b503461029b57602036600319011261029b576112db611ca8565b80358352806020528183209081549060ff8216908115610e1c575060ff9060001901169060ff191617905551f35b503461029b57602036600319011261029b576001826020946001600160801b03933581526002865220015460101c169051908152f35b503461029b57602036600319011261029b576002826020946001600160601b0393358152828652200154169051908152f35b503461029b57602036600319011261029b576001826020946001600160601b03933581526002865220015460901c169051908152f35b5050346106bb57816003193601126106bb57905490516001600160a01b039091168152602090f35b503461029b57602036600319011261029b576113e9611ca8565b3582526003602052818181205551f35b503461029b57602036600319011261029b5760209282913581526005845220549051908152f35b503461029b578160031936011261029b57611439611b15565b90611442611ca8565b35835260036020526001600160481b0382842091166001600160481b031982541617905551f35b503461029b578160031936011261029b57611482611a7a565b9061148b611ca8565b358352600260205261ffff600183852001911661ffff1982541617905551f35b503461029b576020806003193601126105045781356001600160a01b03818116939184810361062c576114dc611bdd565b841561184a573b156117e257845163a0e67e2b60e01b8152869081818581895afa889181611729575b506116b0575b50156116485760015416908585516370a0823160e01b815230838201528481602481875afa93841561163e578591839561160d575b50604488518094819363a9059cbb60e01b83528a888401528860248401525af1908115610c5f5787916115f0575b50156115a15750907fefed6b8d78a916dbd402a323824ae4454c9214b8f3d05fa85b3bb7f30dc25c06918451908152a251f35b845162461bcd60e51b8152908101839052602360248201527f546f6b656e207472616e73616374696f6e20657865637574696f6e206661696c60448201526265642160e81b6064820152608490fd5b6116079150843d8611610362576103568183611b8f565b3861156e565b8281939296503d8311611637575b6116258183611b8f565b810103126106bb578490519338611540565b503d61161b565b87513d84823e3d90fd5b5060849184519162461bcd60e51b8352820152603f60248201527f43616e6e6f74207472616e7366657220746f6b656e7320746f20637573746f6460448201527f69616e20776974686f7574206765744f776e6572732066756e6374696f6e21006064820152fd5b5160019150156116c0573861150b565b855162461bcd60e51b8152808401859052603b60248201527f43616e6e6f74207472616e7366657220746f6b656e7320746f20637573746f6460448201527f69616e20776974686f7574206f776e65727320646566696e65642100000000006064820152608490fd5b9091503d808a833e61173b8183611b8f565b810186828203126117de57815167ffffffffffffffff928382116117c3570181601f820112156117da5780519283116117c7578260051b908a51936117828a840186611b8f565b845288808501928201019283116117c35788809101915b8383106117ab57505050509038611505565b81906117b684611bb1565b8152019101908890611799565b8b80fd5b634e487b7160e01b8b526041875260248bfd5b8a80fd5b8980fd5b5060849184519162461bcd60e51b8352820152603b60248201527f43616e6e6f74207472616e7366657220746f6b656e7320746f20637573746f6460448201527f69616e2074686174206973206e6f74206120636f6e74726163742100000000006064820152fd5b855162461bcd60e51b8152808401859052602260248201527f437573746f6469616e2063616e6e6f742062652061207a65726f206164647265604482015261737360f01b6064820152608490fd5b5050346106bb57816003193601126106bb5780516112bd916118b982611b73565b601b82527f5365727669636541677265656d656e7453746f7261676556315531000000000060208301525191829182611acc565b503461029b57602036600319011261029b57816020936001600160481b039235815260038552205460901c169051908152f35b5050346106bb5761193036611ab6565b90611939611ca8565b835260026020528183205551f35b503461029b5760e036600319011261029b5760443561ffff811680910361050457606435906001600160801b038216820361077b576084356001600160601b03811681036106305760a4359160ff8316830361062c5760c4359360ff85168503611a7657611a3b611a5993600293610459986119c1611ca8565b358b5284602052611a088a8c20946024358655600186019261ffff19845416178355829062010000600160901b0382549160101b169062010000600160901b031916179055565b80546bffffffffffffffffffffffff60901b191660909290921b6bffffffffffffffffffffffff60901b16919091179055565b01805460ff60601b191660609390931b60ff60601b16929092178255565b805460ff60681b191660689290921b60ff60681b16919091179055565b8780fd5b6024359061ffff82168203611a8b57565b600080fd5b602435906001600160601b0382168203611a8b57565b6024359060ff82168203611a8b57565b6040906003190112611a8b576004359060243590565b6020808252825181830181905290939260005b828110611b0157505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611adf565b602435906001600160481b0382168203611a8b57565b600435906001600160a01b0382168203611a8b57565b6080810190811067ffffffffffffffff821117611b5d57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611b5d57604052565b90601f8019910116810190811067ffffffffffffffff821117611b5d57604052565b51906001600160a01b0382168203611a8b57565b90816020910312611a8b57518015158103611a8b5790565b600054604051638da5cb5b60e01b81526020916001600160a01b03919083908290600490829086165afa908115611c9c57600091611c64575b50163303611c215750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b908382813d8311611c95575b611c7a8183611b8f565b81010312611c925750611c8c90611bb1565b38611c16565b80fd5b503d611c70565b6040513d6000823e3d90fd5b600054604051631627905560e01b815233600482015290602090829060249082906001600160a01b03165afa908115611c9c57600091611d2f575b5015611ceb57565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b611d47915060203d8111610362576103568183611b8f565b38611ce356fea2646970667358221220f29bc768e7fc0ea67555c9f95a75b82c238e7f0fbf3501a294fe62abc0ecca4364736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c80620486e114611947578063038fed731461192057806303ddf885146118ed57806306fdde03146118985780630c89a0df146114ab5780630f3a549d146114695780631101ca951461142057806315ce5a45146113f957806326b8fa70146113cf578063365a86fc146113a75780634089a17d1461137157806344c990b01461133f578063484a47e7146113095780635310aaaf146112c157806354fd4d501461128057806355a373d614611257578063607a63f0146111f957806361f31d6d1461115a5780636441a276146111095780636ce1510e146110275780636ff015ae14610ef55780638129fc1c14610e2f578063848e591114610dd357806386e0cc8814610daa5780638bdf6d6414610d7a57806399149f7714610d4b57806399eb184d14610d195780639c70b3c014610cf25780639d7937b214610b00578063a631489614610a9e578063ac64112e14610a4d578063ac9d7cf414610a0b578063ad7ae2c3146109dc578063b0686dea146109a9578063b2ffa99714610945578063b7687472146108fb578063beca40f314610884578063c332964714610848578063c6b25e57146107da578063ca58ef7d1461077f578063cb327c7d1461071c578063ce60dc61146106ed578063d1a640c7146106bf578063d311873a14610694578063d66fca081461065e578063db0d103814610634578063dbe3177114610508578063e022f23f146104a8578063e25aa7251461045c578063e54b26ff146103f2578063e6123b3814610375578063e9410053146102c8578063eb5983451461029f5763ecd431db1461027257600080fd5b3461029b57602036600319011261029b57602092829135815260038452205460d81c9051908152f35b8280fd5b503461029b57602036600319011261029b57816020938260ff9335825285522054169051908152f35b503461029b578160031936011261029b5760206102e3611b2b565b60446102ed611a90565b916102f6611ca8565b600154865163a9059cbb60e01b81526001600160a01b03928316968101969096526001600160601b039093166024860152849283918891165af180156103695761033e575051f35b61035e9060203d8111610362575b6103568183611b8f565b810190611bc5565b5051f35b503d61034c565b505051903d90823e3d90fd5b503461029b57608036600319011261029b5761038f611a7a565b90610398611ca8565b35835260026020908152828420835160f09390931b6001600160f01b0319169183019182526044356022840152600301916103e081604281015b03601f198101835282611b8f565b51902083526020526064358183205551f35b503461029b578160031936011261029b576104599061040f611a90565b90610418611ca8565b358452600260205282842060010180546bffffffffffffffffffffffff60901b191660909290921b6bffffffffffffffffffffffff60901b16919091179055565b51f35b503461029b578160031936011261029b57610475611a90565b9061047e611ca8565b35835260026020526001600160601b0360028385200191166001600160601b031982541617905551f35b503461029b578160031936011261029b5760243564ffffffffff8116810361050457610459916104d6611ca8565b358452600360205282842080546001600160d81b031660d89290921b6001600160d81b031916919091179055565b8380fd5b503461029b5760a036600319011261029b57610522611b15565b604435916001600160481b03808416809403610630576064359181831680930361062c576084359164ffffffffff93848416809403610628576105de82610459986106089561056f611ca8565b828c519a61057c8c611b41565b168a5260208a019182528b8a0194855260608a01978852358c526003602052818b8d209951166001600160481b03198a54161789555116879068ffffffffffffffffff60481b82549160481b169068ffffffffffffffffff60481b1916179055565b51855468ffffffffffffffffff60901b1916911660901b68ffffffffffffffffff60901b16178455565b5182546001600160d81b0316911660d81b6001600160d81b031916179055565b8880fd5b8680fd5b8580fd5b503461029b57602036600319011261029b5761064e611ca8565b3582526005602052818181205551f35b503461029b57602036600319011261029b57610678611ca8565b3582526002602052816002828220828155826001820155015551f35b5050346106bb576106a436611ab6565b906106ad611ca8565b835260056020528183205551f35b5080fd5b503461029b57602036600319011261029b5760018260209461ffff9335815260028652200154169051908152f35b503461029b57602036600319011261029b5760028260209460ff9335815282865220015460601c169051908152f35b503461029b57606036600319011261029b57610736611a7a565b6044359163ffffffff831680930361077b5761ffff90610754611ca8565b80358652600260205284862001911684526020528183209063ffffffff1982541617905551f35b8480fd5b503461029b578160031936011261029b576104599061079c611b15565b906107a5611ca8565b35845260036020528284209068ffffffffffffffffff60481b82549160481b169068ffffffffffffffffff60481b1916179055565b503461029b57606036600319011261029b5760209282916107f9611a7a565b903582526002808652838320845160f09390931b6001600160f01b031916838801908152604435928101929092526003019161083881602284016103d2565b5190208252845220549051908152f35b503461029b578160031936011261029b57610861611aa6565b9061086a611ca8565b8035845260205260ff828420911660ff1982541617905551f35b503461029b578160031936011261029b5761089d611a7a565b6108a5611ca8565b81358452600260205261ffff8284862001911684526020528183209081549063ffffffff90818316908282146108e85750600101169063ffffffff191617905551f35b634e487b7160e01b875260119052602486fd5b503461029b578160031936011261029b5761ffff610917611a7a565b91610920611ca8565b803585526002602052838520019116835260205280822063ffffffff19815416905551f35b503461029b578160031936011261029b5761095e611a7a565b610966611ca8565b81358452600260205261ffff8284862001911684526020528183209081549063ffffffff908183169081156108e8575060001901169063ffffffff191617905551f35b503461029b57602036600319011261029b57816020936001600160481b039235815260038552205460481c169051908152f35b503461029b57602036600319011261029b576109f6611ca8565b80358352602052808220805460ff1916905551f35b503461029b578160031936011261029b578160209363ffffffff9261ffff610a31611a7a565b8235845260028852848420911683520185522054915191168152f35b503461029b578160031936011261029b5761045990610a6a611aa6565b90610a73611ca8565b3584526002602081905283852001805460ff60681b191660689290921b60ff60681b16919091179055565b503461029b578160031936011261029b576024356001600160801b03811681036105045761045991610ace611ca8565b35845260026020526001838520019062010000600160901b0382549160101b169062010000600160901b031916179055565b503461029b5760208060031936011261050457610b1b611b2b565b91610b24611bdd565b6001546001600160a01b038481169391168314610c985784516370a0823160e01b81523083820152928184602481845afa938415610c5f578794610c69575b5083610bad575b505083516001600160a01b0393909316835250602082015233907f5fe8cbe5f97c59a4b590a924c3fc62aac6b6a653ec22e39f5fc6d3732f18c25490604090a251f35b855163a9059cbb60e01b815233848201908152602081018690529091839183919082908b90829060400103925af1908115610c5f578791610c42575b5015610bf55780610b6a565b845162461bcd60e51b815291820152602260248201527f546f6b656e207472616e73616374696f6e20657865637574696f6e206661696c604482015261195960f21b606482015260849150fd5b610c599150823d8411610362576103568183611b8f565b38610be9565b86513d89823e3d90fd5b9093508181813d8311610c91575b610c818183611b8f565b8101031261062c57519238610b63565b503d610c77565b845162461bcd60e51b815291820152602f60248201527f43616e6e6f742075736520746869732066756e6374696f6e207769746820746860448201526e194815149050c818dbdb9d1c9858dd608a1b606482015260849150fd5b503461029b57602036600319011261029b5760209282913581526002845220549051908152f35b503461029b57602036600319011261029b57816020936001600160481b03923581526003855220541615159051908152f35b503461029b57602036600319011261029b5760028260209460ff9335815282865220015460681c169051908152f35b503461029b57602036600319011261029b57816020936001600160481b0392358152600385522054169051908152f35b503461029b57602036600319011261029b57602092829135815260028452205415159051908152f35b503461029b57602036600319011261029b57610ded611ca8565b80358352806020528183209081549060ff82169060ff8214610e1c5750600160ff9101169060ff191617905551f35b634e487b7160e01b865260119052602485fd5b503461029b578260031936011261029b57610e48611bdd565b82548251630110ceef60e21b8152602092810183905260056024820152642a37b5b2b760d91b60448201526001600160a01b039290918290606490829086165afa908115610ee8578491610eaf575b50166001600160601b0360a01b600154161760015551f35b90506020813d8211610ee0575b81610ec960209383611b8f565b8101031261050457610eda90611bb1565b38610e97565b3d9150610ebc565b50505051903d90823e3d90fd5b50903461029b5760209182600319360112610504578284913590838051610f1b81611b73565b369037838051610f2a81611b73565b36903781835260028082528484208054600191820154875161ffff82169892979396949594929160101c6001600160801b0316610f6682611b73565b8385528686526001600160601b03928389828820015460901c16835284865287875283888288200154168784015280519a610fa08c611b73565b85875288885260ff95868a848a20015460601c168d5287528888528589838920015460681c16888d015281519a8b52878b0152890152606088019084915b878310611012575050505060a086019691965b848810610ffd5760e087f35b82518216815296850196918301918301610ff1565b81518416815291880191908601908601610fde565b503461029b578260031936011261029b57611040611bdd565b479081611077575b5081519081527fd32ec2b96f6389848e3f68f670160bf5a50b5024b6f62a61108f20025179a29160203392a251f35b838080855185335af13d15611104573d67ffffffffffffffff81116110f1578451906110ad601f8201601f191660200183611b8f565b81528560203d92013e5b61104857606490602084519162461bcd60e51b8352820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152fd5b634e487b7160e01b865260418352602486fd5b6110b7565b503461029b578160031936011261029b5761045990611126611aa6565b9061112f611ca8565b3584526002602081905283852001805460ff60601b191660609290921b60ff60601b16919091179055565b503461029b57602036600319011261029b57818364ffffffffff926080956060845161118581611b41565b82815282602082015282868201520152358152600360205220918051926111ab84611b41565b54906001600160481b03808316948581528160208201818660481c168152606085840193838860901c168552019560d81c865284519788525116602087015251169084015251166060820152f35b503461029b578160031936011261029b5761045990611216611b15565b9061121f611ca8565b3584526003602052828420805468ffffffffffffffffff60901b191660909290921b68ffffffffffffffffff60901b16919091179055565b5050346106bb57816003193601126106bb5760015490516001600160a01b039091168152602090f35b5050346106bb57816003193601126106bb5780516112bd916112a182611b73565b60058252640312e302e360dc1b60208301525191829182611acc565b0390f35b503461029b57602036600319011261029b576112db611ca8565b80358352806020528183209081549060ff8216908115610e1c575060ff9060001901169060ff191617905551f35b503461029b57602036600319011261029b576001826020946001600160801b03933581526002865220015460101c169051908152f35b503461029b57602036600319011261029b576002826020946001600160601b0393358152828652200154169051908152f35b503461029b57602036600319011261029b576001826020946001600160601b03933581526002865220015460901c169051908152f35b5050346106bb57816003193601126106bb57905490516001600160a01b039091168152602090f35b503461029b57602036600319011261029b576113e9611ca8565b3582526003602052818181205551f35b503461029b57602036600319011261029b5760209282913581526005845220549051908152f35b503461029b578160031936011261029b57611439611b15565b90611442611ca8565b35835260036020526001600160481b0382842091166001600160481b031982541617905551f35b503461029b578160031936011261029b57611482611a7a565b9061148b611ca8565b358352600260205261ffff600183852001911661ffff1982541617905551f35b503461029b576020806003193601126105045781356001600160a01b03818116939184810361062c576114dc611bdd565b841561184a573b156117e257845163a0e67e2b60e01b8152869081818581895afa889181611729575b506116b0575b50156116485760015416908585516370a0823160e01b815230838201528481602481875afa93841561163e578591839561160d575b50604488518094819363a9059cbb60e01b83528a888401528860248401525af1908115610c5f5787916115f0575b50156115a15750907fefed6b8d78a916dbd402a323824ae4454c9214b8f3d05fa85b3bb7f30dc25c06918451908152a251f35b845162461bcd60e51b8152908101839052602360248201527f546f6b656e207472616e73616374696f6e20657865637574696f6e206661696c60448201526265642160e81b6064820152608490fd5b6116079150843d8611610362576103568183611b8f565b3861156e565b8281939296503d8311611637575b6116258183611b8f565b810103126106bb578490519338611540565b503d61161b565b87513d84823e3d90fd5b5060849184519162461bcd60e51b8352820152603f60248201527f43616e6e6f74207472616e7366657220746f6b656e7320746f20637573746f6460448201527f69616e20776974686f7574206765744f776e6572732066756e6374696f6e21006064820152fd5b5160019150156116c0573861150b565b855162461bcd60e51b8152808401859052603b60248201527f43616e6e6f74207472616e7366657220746f6b656e7320746f20637573746f6460448201527f69616e20776974686f7574206f776e65727320646566696e65642100000000006064820152608490fd5b9091503d808a833e61173b8183611b8f565b810186828203126117de57815167ffffffffffffffff928382116117c3570181601f820112156117da5780519283116117c7578260051b908a51936117828a840186611b8f565b845288808501928201019283116117c35788809101915b8383106117ab57505050509038611505565b81906117b684611bb1565b8152019101908890611799565b8b80fd5b634e487b7160e01b8b526041875260248bfd5b8a80fd5b8980fd5b5060849184519162461bcd60e51b8352820152603b60248201527f43616e6e6f74207472616e7366657220746f6b656e7320746f20637573746f6460448201527f69616e2074686174206973206e6f74206120636f6e74726163742100000000006064820152fd5b855162461bcd60e51b8152808401859052602260248201527f437573746f6469616e2063616e6e6f742062652061207a65726f206164647265604482015261737360f01b6064820152608490fd5b5050346106bb57816003193601126106bb5780516112bd916118b982611b73565b601b82527f5365727669636541677265656d656e7453746f7261676556315531000000000060208301525191829182611acc565b503461029b57602036600319011261029b57816020936001600160481b039235815260038552205460901c169051908152f35b5050346106bb5761193036611ab6565b90611939611ca8565b835260026020528183205551f35b503461029b5760e036600319011261029b5760443561ffff811680910361050457606435906001600160801b038216820361077b576084356001600160601b03811681036106305760a4359160ff8316830361062c5760c4359360ff85168503611a7657611a3b611a5993600293610459986119c1611ca8565b358b5284602052611a088a8c20946024358655600186019261ffff19845416178355829062010000600160901b0382549160101b169062010000600160901b031916179055565b80546bffffffffffffffffffffffff60901b191660909290921b6bffffffffffffffffffffffff60901b16919091179055565b01805460ff60601b191660609390931b60ff60601b16929092178255565b805460ff60681b191660689290921b60ff60681b16919091179055565b8780fd5b6024359061ffff82168203611a8b57565b600080fd5b602435906001600160601b0382168203611a8b57565b6024359060ff82168203611a8b57565b6040906003190112611a8b576004359060243590565b6020808252825181830181905290939260005b828110611b0157505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611adf565b602435906001600160481b0382168203611a8b57565b600435906001600160a01b0382168203611a8b57565b6080810190811067ffffffffffffffff821117611b5d57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611b5d57604052565b90601f8019910116810190811067ffffffffffffffff821117611b5d57604052565b51906001600160a01b0382168203611a8b57565b90816020910312611a8b57518015158103611a8b5790565b600054604051638da5cb5b60e01b81526020916001600160a01b03919083908290600490829086165afa908115611c9c57600091611c64575b50163303611c215750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b908382813d8311611c95575b611c7a8183611b8f565b81010312611c925750611c8c90611bb1565b38611c16565b80fd5b503d611c70565b6040513d6000823e3d90fd5b600054604051631627905560e01b815233600482015290602090829060249082906001600160a01b03165afa908115611c9c57600091611d2f575b5015611ceb57565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b611d47915060203d8111610362576103568183611b8f565b38611ce356fea2646970667358221220f29bc768e7fc0ea67555c9f95a75b82c238e7f0fbf3501a294fe62abc0ecca4364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 8523,
        "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
        "label": "tokenContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1169"
      },
      {
        "astId": 21820,
        "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
        "label": "serviceAgreements",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(ExtendedServiceAgreement)23878_storage)"
      },
      {
        "astId": 21825,
        "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
        "label": "epochStateCommitSubmissions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(CommitSubmission)23817_storage)"
      },
      {
        "astId": 21829,
        "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
        "label": "epochStateCommitsCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint8)"
      },
      {
        "astId": 21833,
        "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
        "label": "updateCommitsDeadlines",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1169": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(CommitSubmission)23817_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ServiceAgreementStructsV1.CommitSubmission)",
        "numberOfBytes": "32",
        "value": "t_struct(CommitSubmission)23817_storage"
      },
      "t_mapping(t_bytes32,t_struct(ExtendedServiceAgreement)23878_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ServiceAgreementStructsV1.ExtendedServiceAgreement)",
        "numberOfBytes": "32",
        "value": "t_struct(ExtendedServiceAgreement)23878_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint16,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(CommitSubmission)23817_storage": {
        "encoding": "inplace",
        "label": "struct ServiceAgreementStructsV1.CommitSubmission",
        "members": [
          {
            "astId": 23810,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "identityId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 23812,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "prevIdentityId",
            "offset": 9,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 23814,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "nextIdentityId",
            "offset": 18,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 23816,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "score",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ExtendedServiceAgreement)23878_storage": {
        "encoding": "inplace",
        "label": "struct ServiceAgreementStructsV1.ExtendedServiceAgreement",
        "members": [
          {
            "astId": 23857,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23859,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "epochsNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 23861,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "epochLength",
            "offset": 2,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 23863,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "tokenAmount",
            "offset": 18,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 23865,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "updateTokenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 23867,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "scoreFunctionId",
            "offset": 12,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 23869,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "proofWindowOffsetPerc",
            "offset": 13,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 23873,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "epochSubmissionHeads",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 23877,
            "contract": "contracts/storage/ServiceAgreementStorageV1U1.sol:ServiceAgreementStorageV1U1",
            "label": "rewardedNodesNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint16,t_uint32)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
