{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "contracts/abstract/AbstractAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\n\nabstract contract AbstractAsset is Named, Versioned, HubDependent {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function getAssertionIds(uint256 tokenId) public view virtual returns (bytes32[] memory);\n\n    function getLatestAssertionId(uint256 tokenId) external view returns (bytes32) {\n        bytes32[] memory assertions = getAssertionIds(tokenId);\n        return assertions[assertions.length - 1];\n    }\n\n    function getAssertionIdByIndex(uint256 tokenId, uint256 index) external view returns (bytes32) {\n        bytes32[] memory assertions = getAssertionIds(tokenId);\n        return assertions[index];\n    }\n\n    function getAssertionIdsLength(uint256 tokenId) external view returns (uint256) {\n        return getAssertionIds(tokenId).length;\n    }\n}\n"
    },
    "contracts/abstract/ContractStatus.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"./HubDependent.sol\";\n\nabstract contract ContractStatus is HubDependent {\n    bool public status;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function setStatus(bool _status) external onlyHubOwner {\n        status = _status;\n    }\n}\n"
    },
    "contracts/abstract/HubDependent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Hub} from \"../Hub.sol\";\n\nabstract contract HubDependent {\n    Hub public hub;\n\n    constructor(address hubAddress) {\n        require(hubAddress != address(0), \"Hub Address cannot be 0x0\");\n\n        hub = Hub(hubAddress);\n    }\n\n    modifier onlyHubOwner() {\n        _checkHubOwner();\n        _;\n    }\n\n    modifier onlyContracts() {\n        _checkHub();\n        _;\n    }\n\n    function _checkHubOwner() internal view virtual {\n        require(msg.sender == hub.owner(), \"Fn can only be used by hub owner\");\n    }\n\n    function _checkHub() internal view virtual {\n        require(hub.isContract(msg.sender), \"Fn can only be called by the hub\");\n    }\n}\n"
    },
    "contracts/Assertion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {AssertionStorage} from \"./storage/AssertionStorage.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {AssertionStructs} from \"./structs/AssertionStructs.sol\";\n\ncontract Assertion is Named, Versioned, ContractStatus, Initializable {\n    event AssertionCreated(bytes32 indexed assertionId, uint128 size, uint32 triplesNumber, uint96 chunksNumber);\n\n    string private constant _NAME = \"Assertion\";\n    string private constant _VERSION = \"1.0.1\";\n\n    AssertionStorage public assertionStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        assertionStorage = AssertionStorage(hub.getContractAddress(\"AssertionStorage\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createAssertion(\n        bytes32 assertionId,\n        uint128 size,\n        uint32 triplesNumber,\n        uint96 chunksNumber\n    ) external onlyContracts {\n        AssertionStorage ans = assertionStorage;\n\n        require(assertionId != bytes32(0), \"Assertion ID cannot be empty\");\n        require(size != 0, \"Size cannot be 0\");\n        require(triplesNumber != 0, \"Triples number cannot be 0\");\n        require(chunksNumber != 0, \"Chunks number cannot be 0\");\n\n        ans.createAssertion(assertionId, size, triplesNumber, chunksNumber);\n\n        emit AssertionCreated(assertionId, size, triplesNumber, chunksNumber);\n    }\n}\n"
    },
    "contracts/assets/ContentAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Assertion} from \"../Assertion.sol\";\nimport {HashingProxy} from \"../HashingProxy.sol\";\nimport {ServiceAgreementV1} from \"../ServiceAgreementV1.sol\";\nimport {ContentAssetStorage} from \"../storage/assets/ContentAssetStorage.sol\";\nimport {ParametersStorage} from \"../storage/ParametersStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"../storage/ServiceAgreementStorageProxy.sol\";\nimport {UnfinalizedStateStorage} from \"../storage/UnfinalizedStateStorage.sol\";\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Initializable} from \"../interface/Initializable.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {ContentAssetStructs} from \"../structs/assets/ContentAssetStructs.sol\";\nimport {ServiceAgreementStructsV1} from \"../structs/ServiceAgreementStructsV1.sol\";\nimport {ContentAssetErrors} from \"../errors/assets/ContentAssetErrors.sol\";\nimport {HASH_FUNCTION_ID} from \"../constants/assets/ContentAssetConstants.sol\";\n\ncontract ContentAsset is Named, Versioned, HubDependent, Initializable {\n    event AssetMinted(address indexed assetContract, uint256 indexed tokenId, bytes32 indexed state);\n    event AssetBurnt(address indexed assetContract, uint256 indexed tokenId, uint96 returnedTokenAmount);\n    event AssetStateUpdated(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        uint256 indexed stateIndex,\n        uint96 updateTokenAmount\n    );\n    event AssetStateUpdateCanceled(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        uint256 indexed stateIndex,\n        uint96 returnedTokenAmount\n    );\n    event AssetStoringPeriodExtended(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        uint16 epochsNumber,\n        uint96 tokenAmount\n    );\n    event AssetPaymentIncreased(address indexed assetContract, uint256 indexed tokenId, uint96 tokenAmount);\n    event AssetUpdatePaymentIncreased(address indexed assetContract, uint256 indexed tokenId, uint96 tokenAmount);\n\n    string private constant _NAME = \"ContentAsset\";\n    string private constant _VERSION = \"1.0.0\";\n\n    Assertion public assertionContract;\n    HashingProxy public hashingProxy;\n    ContentAssetStorage public contentAssetStorage;\n    ParametersStorage public parametersStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n    ServiceAgreementV1 public serviceAgreementV1;\n    UnfinalizedStateStorage public unfinalizedStateStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        assertionContract = Assertion(hub.getContractAddress(\"Assertion\"));\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        contentAssetStorage = ContentAssetStorage(hub.getAssetStorageAddress(\"ContentAssetStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n        serviceAgreementV1 = ServiceAgreementV1(hub.getContractAddress(\"ServiceAgreementV1\"));\n        unfinalizedStateStorage = UnfinalizedStateStorage(hub.getContractAddress(\"UnfinalizedStateStorage\"));\n    }\n\n    modifier onlyAssetOwner(uint256 tokenId) {\n        _checkAssetOwner(tokenId);\n        _;\n    }\n\n    modifier onlyMutable(uint256 tokenId) {\n        _checkMutability(tokenId);\n        _;\n    }\n\n    function name() external pure override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createAsset(ContentAssetStructs.AssetInputArgs calldata args) external {\n        _createAsset(\n            args.assertionId,\n            args.size,\n            args.triplesNumber,\n            args.chunksNumber,\n            args.epochsNumber,\n            args.tokenAmount,\n            args.scoreFunctionId,\n            args.immutable_\n        );\n    }\n\n    function createAssetWithVariables(\n        bytes32 assertionId,\n        uint128 size,\n        uint32 triplesNumber,\n        uint96 chunksNumber,\n        uint16 epochsNumber,\n        uint96 tokenAmount,\n        uint8 scoreFunctionId,\n        bool immutable_\n    ) external {\n        _createAsset(\n            assertionId,\n            size,\n            triplesNumber,\n            chunksNumber,\n            epochsNumber,\n            tokenAmount,\n            scoreFunctionId,\n            immutable_\n        );\n    }\n\n    function burnAsset(uint256 tokenId) external onlyAssetOwner(tokenId) {\n        ContentAssetStorage cas = contentAssetStorage;\n\n        address contentAssetStorageAddress = address(cas);\n\n        bytes memory keyword = abi.encodePacked(contentAssetStorageAddress, cas.getAssertionIdByIndex(tokenId, 0));\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            HASH_FUNCTION_ID,\n            abi.encodePacked(contentAssetStorageAddress, tokenId, keyword)\n        );\n\n        bytes32 unfinalizedState = unfinalizedStateStorage.getUnfinalizedState(tokenId);\n\n        if (unfinalizedState != bytes32(0))\n            revert ContentAssetErrors.UpdateIsNotFinalized(contentAssetStorageAddress, tokenId, unfinalizedState);\n\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        ParametersStorage params = parametersStorage;\n\n        uint256 timeNow = block.timestamp;\n        uint256 epochStart = sasProxy.getAgreementStartTime(agreementId);\n        uint256 commitPhaseEnd = epochStart +\n            (sasProxy.getAgreementEpochLength(agreementId) * params.commitWindowDurationPerc()) /\n            100;\n        uint256 epochEnd = epochStart + sasProxy.getAgreementEpochLength(agreementId);\n        uint16 epoch = 0;\n        uint8 commitsCount = sasProxy.getCommitsCount(\n            keccak256(abi.encodePacked(agreementId, epoch, cas.getAssertionIdsLength(tokenId) - 1))\n        );\n        uint32 r0 = params.r0();\n\n        if ((timeNow < commitPhaseEnd) && (commitsCount < r0)) {\n            revert ContentAssetErrors.CommitPhaseOngoing(agreementId);\n        } else if ((timeNow < epochEnd) && (commitsCount >= r0)) {\n            revert ContentAssetErrors.CommitPhaseSucceeded(agreementId);\n        } else if (timeNow > epochEnd) {\n            revert ContentAssetErrors.FirstEpochHasAlreadyEnded(agreementId);\n        }\n\n        uint96 tokenAmount = sasProxy.getAgreementTokenAmount(agreementId);\n\n        cas.deleteAsset(tokenId);\n        cas.burn(tokenId);\n        serviceAgreementV1.terminateAgreement(msg.sender, agreementId);\n\n        emit AssetBurnt(contentAssetStorageAddress, tokenId, tokenAmount);\n    }\n\n    function updateAssetState(\n        uint256 tokenId,\n        bytes32 assertionId,\n        uint128 size,\n        uint32 triplesNumber,\n        uint96 chunksNumber,\n        uint96 updateTokenAmount\n    ) external onlyAssetOwner(tokenId) onlyMutable(tokenId) {\n        ContentAssetStorage cas = contentAssetStorage;\n        UnfinalizedStateStorage uss = unfinalizedStateStorage;\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        address contentAssetStorageAddress = address(cas);\n\n        bytes memory keyword = abi.encodePacked(contentAssetStorageAddress, cas.getAssertionIdByIndex(tokenId, 0));\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            HASH_FUNCTION_ID,\n            abi.encodePacked(contentAssetStorageAddress, tokenId, keyword)\n        );\n\n        uint256 startTime;\n        uint16 epochsNumber;\n        uint128 epochLength;\n        uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc;\n        (startTime, epochsNumber, epochLength, , scoreFunctionIdAndProofWindowOffsetPerc) = sasProxy.getAgreementData(\n            agreementId\n        );\n\n        if (block.timestamp > startTime + epochsNumber * epochLength) revert ContentAssetErrors.AssetExpired(tokenId);\n\n        bytes32 unfinalizedState = uss.getUnfinalizedState(tokenId);\n\n        if (unfinalizedState != bytes32(0))\n            revert ContentAssetErrors.UpdateIsNotFinalized(contentAssetStorageAddress, tokenId, unfinalizedState);\n\n        assertionContract.createAssertion(assertionId, size, triplesNumber, chunksNumber);\n        uss.setUnfinalizedState(tokenId, assertionId);\n        uss.setIssuer(tokenId, msg.sender);\n\n        sasProxy.createV1U1ServiceAgreementObject(\n            agreementId,\n            startTime,\n            epochsNumber,\n            epochLength,\n            0, // tokenAmount, migrated from sasV1 during update finalization\n            scoreFunctionIdAndProofWindowOffsetPerc[0],\n            scoreFunctionIdAndProofWindowOffsetPerc[1]\n        );\n\n        if (updateTokenAmount != 0) serviceAgreementV1.addUpdateTokens(msg.sender, agreementId, updateTokenAmount);\n\n        uint256 unfinalizedStateIndex = cas.getAssertionIdsLength(tokenId);\n        sasProxy.setUpdateCommitsDeadline(\n            keccak256(abi.encodePacked(agreementId, unfinalizedStateIndex)),\n            block.timestamp + parametersStorage.updateCommitWindowDuration()\n        );\n\n        emit AssetStateUpdated(contentAssetStorageAddress, tokenId, unfinalizedStateIndex, updateTokenAmount);\n    }\n\n    function cancelAssetStateUpdate(uint256 tokenId) external onlyAssetOwner(tokenId) {\n        ContentAssetStorage cas = contentAssetStorage;\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        UnfinalizedStateStorage uss = unfinalizedStateStorage;\n\n        address contentAssetStorageAddress = address(cas);\n\n        bytes memory keyword = abi.encodePacked(contentAssetStorageAddress, cas.getAssertionIdByIndex(tokenId, 0));\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            HASH_FUNCTION_ID,\n            abi.encodePacked(contentAssetStorageAddress, tokenId, keyword)\n        );\n\n        uint256 startTime;\n        uint16 epochsNumber;\n        uint128 epochLength;\n        (startTime, epochsNumber, epochLength, , ) = sasProxy.getAgreementData(agreementId);\n\n        if (block.timestamp > startTime + epochsNumber * epochLength) revert ContentAssetErrors.AssetExpired(tokenId);\n\n        bytes32 unfinalizedState = uss.getUnfinalizedState(tokenId);\n        uint256 unfinalizedStateIndex = cas.getAssertionIdsLength(tokenId);\n\n        if (unfinalizedState == bytes32(0)) {\n            revert ContentAssetErrors.NoPendingUpdate(contentAssetStorageAddress, tokenId);\n        } else if (\n            block.timestamp <=\n            sasProxy.getUpdateCommitsDeadline(keccak256(abi.encodePacked(agreementId, unfinalizedStateIndex)))\n        ) {\n            revert ContentAssetErrors.PendingUpdateFinalization(\n                contentAssetStorageAddress,\n                tokenId,\n                unfinalizedStateIndex\n            );\n        }\n\n        uint96 updateTokenAmount = sasProxy.getAgreementUpdateTokenAmount(agreementId);\n        sasProxy.setAgreementUpdateTokenAmount(agreementId, 0);\n        sasProxy.transferV1U1AgreementTokens(msg.sender, updateTokenAmount);\n\n        uss.deleteIssuer(tokenId);\n        uss.deleteUnfinalizedState(tokenId);\n\n        emit AssetStateUpdateCanceled(\n            contentAssetStorageAddress,\n            tokenId,\n            cas.getAssertionIdsLength(tokenId),\n            updateTokenAmount\n        );\n    }\n\n    function extendAssetStoringPeriod(\n        uint256 tokenId,\n        uint16 epochsNumber,\n        uint96 tokenAmount\n    ) external onlyAssetOwner(tokenId) {\n        ContentAssetStorage cas = contentAssetStorage;\n        ServiceAgreementV1 sasV1 = serviceAgreementV1;\n\n        address contentAssetStorageAddress = address(cas);\n\n        bytes32 unfinalizedState = unfinalizedStateStorage.getUnfinalizedState(tokenId);\n\n        if (unfinalizedState != bytes32(0))\n            revert ContentAssetErrors.UpdateIsNotFinalized(contentAssetStorageAddress, tokenId, unfinalizedState);\n\n        bytes memory keyword = abi.encodePacked(contentAssetStorageAddress, cas.getAssertionIdByIndex(tokenId, 0));\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            HASH_FUNCTION_ID,\n            abi.encodePacked(contentAssetStorageAddress, tokenId, keyword)\n        );\n\n        uint256 startTime;\n        uint16 oldEpochsNumber;\n        uint128 epochLength;\n        (startTime, oldEpochsNumber, epochLength, , ) = serviceAgreementStorageProxy.getAgreementData(agreementId);\n\n        if (block.timestamp > startTime + oldEpochsNumber * epochLength) {\n            revert ContentAssetErrors.AssetExpired(tokenId);\n        }\n\n        sasV1.extendStoringPeriod(msg.sender, agreementId, epochsNumber, tokenAmount);\n\n        emit AssetStoringPeriodExtended(contentAssetStorageAddress, tokenId, epochsNumber, tokenAmount);\n    }\n\n    function increaseAssetTokenAmount(uint256 tokenId, uint96 tokenAmount) external onlyAssetOwner(tokenId) {\n        ContentAssetStorage cas = contentAssetStorage;\n        ServiceAgreementV1 sasV1 = serviceAgreementV1;\n\n        address contentAssetStorageAddress = address(cas);\n\n        bytes32 unfinalizedState = unfinalizedStateStorage.getUnfinalizedState(tokenId);\n\n        if (unfinalizedState != bytes32(0))\n            revert ContentAssetErrors.UpdateIsNotFinalized(contentAssetStorageAddress, tokenId, unfinalizedState);\n\n        bytes memory keyword = abi.encodePacked(contentAssetStorageAddress, cas.getAssertionIdByIndex(tokenId, 0));\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            HASH_FUNCTION_ID,\n            abi.encodePacked(contentAssetStorageAddress, tokenId, keyword)\n        );\n\n        uint256 startTime;\n        uint16 epochsNumber;\n        uint128 epochLength;\n        (startTime, epochsNumber, epochLength, , ) = serviceAgreementStorageProxy.getAgreementData(agreementId);\n\n        if (block.timestamp > startTime + epochsNumber * epochLength) revert ContentAssetErrors.AssetExpired(tokenId);\n\n        sasV1.addTokens(msg.sender, agreementId, tokenAmount);\n\n        emit AssetPaymentIncreased(contentAssetStorageAddress, tokenId, tokenAmount);\n    }\n\n    function increaseAssetUpdateTokenAmount(uint256 tokenId, uint96 tokenAmount) external onlyAssetOwner(tokenId) {\n        ContentAssetStorage cas = contentAssetStorage;\n        ServiceAgreementV1 sasV1 = serviceAgreementV1;\n\n        address contentAssetStorageAddress = address(cas);\n\n        bytes32 unfinalizedState = unfinalizedStateStorage.getUnfinalizedState(tokenId);\n\n        if (unfinalizedState == bytes32(0))\n            revert ContentAssetErrors.NoPendingUpdate(contentAssetStorageAddress, tokenId);\n\n        bytes memory keyword = abi.encodePacked(contentAssetStorageAddress, cas.getAssertionIdByIndex(tokenId, 0));\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            HASH_FUNCTION_ID,\n            abi.encodePacked(contentAssetStorageAddress, tokenId, keyword)\n        );\n\n        uint256 startTime;\n        uint16 epochsNumber;\n        uint128 epochLength;\n        (startTime, epochsNumber, epochLength, , ) = serviceAgreementStorageProxy.getAgreementData(agreementId);\n\n        if (block.timestamp > startTime + epochsNumber * epochLength) revert ContentAssetErrors.AssetExpired(tokenId);\n\n        sasV1.addUpdateTokens(msg.sender, agreementId, tokenAmount);\n\n        emit AssetUpdatePaymentIncreased(contentAssetStorageAddress, tokenId, tokenAmount);\n    }\n\n    function _createAsset(\n        bytes32 assertionId,\n        uint128 size,\n        uint32 triplesNumber,\n        uint96 chunksNumber,\n        uint16 epochsNumber,\n        uint96 tokenAmount,\n        uint8 scoreFunctionId,\n        bool immutable_\n    ) internal virtual {\n        ContentAssetStorage cas = contentAssetStorage;\n\n        uint256 tokenId = cas.generateTokenId();\n        cas.mint(msg.sender, tokenId);\n\n        assertionContract.createAssertion(assertionId, size, triplesNumber, chunksNumber);\n        cas.setAssertionIssuer(tokenId, assertionId, msg.sender);\n        cas.setMutability(tokenId, immutable_);\n        cas.pushAssertionId(tokenId, assertionId);\n\n        address contentAssetStorageAddress = address(cas);\n\n        serviceAgreementV1.createServiceAgreement(\n            ServiceAgreementStructsV1.ServiceAgreementInputArgs({\n                assetCreator: msg.sender,\n                assetContract: contentAssetStorageAddress,\n                tokenId: tokenId,\n                keyword: abi.encodePacked(contentAssetStorageAddress, assertionId),\n                hashFunctionId: HASH_FUNCTION_ID,\n                epochsNumber: epochsNumber,\n                tokenAmount: tokenAmount,\n                scoreFunctionId: scoreFunctionId\n            })\n        );\n\n        emit AssetMinted(contentAssetStorageAddress, tokenId, assertionId);\n    }\n\n    function _checkAssetOwner(uint256 tokenId) internal view virtual {\n        require(msg.sender == contentAssetStorage.ownerOf(tokenId), \"Only asset owner can use this fn\");\n    }\n\n    function _checkMutability(uint256 tokenId) internal view virtual {\n        require(contentAssetStorage.isMutable(tokenId), \"Asset is immutable\");\n    }\n}\n"
    },
    "contracts/CommitManagerV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {ScoringProxy} from \"./ScoringProxy.sol\";\nimport {Staking} from \"./Staking.sol\";\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"./storage/ServiceAgreementStorageProxy.sol\";\nimport {ShardingTableStorage} from \"./storage/ShardingTableStorage.sol\";\nimport {StakingStorage} from \"./storage/StakingStorage.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ContentAssetErrors} from \"./errors/assets/ContentAssetErrors.sol\";\nimport {GeneralErrors} from \"./errors/GeneralErrors.sol\";\nimport {ServiceAgreementErrorsV1} from \"./errors/ServiceAgreementErrorsV1.sol\";\nimport {ServiceAgreementStructsV1} from \"./structs/ServiceAgreementStructsV1.sol\";\n\ncontract CommitManagerV1 is Named, Versioned, ContractStatus, Initializable {\n    event CommitSubmitted(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        bytes keyword,\n        uint8 hashFunctionId,\n        uint16 epoch,\n        uint72 indexed identityId,\n        uint40 score\n    );\n\n    string private constant _NAME = \"CommitManagerV1\";\n    string private constant _VERSION = \"1.0.0\";\n\n    bool[4] public reqs = [false, false, false, false];\n\n    HashingProxy public hashingProxy;\n    ScoringProxy public scoringProxy;\n    Staking public stakingContract;\n    IdentityStorage public identityStorage;\n    ParametersStorage public parametersStorage;\n    ProfileStorage public profileStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n    ShardingTableStorage public shardingTableStorage;\n    StakingStorage public stakingStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        scoringProxy = ScoringProxy(hub.getContractAddress(\"ScoringProxy\"));\n        stakingContract = Staking(hub.getContractAddress(\"Staking\"));\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\"ShardingTableStorage\"));\n        stakingStorage = StakingStorage(hub.getContractAddress(\"StakingStorage\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function isCommitWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        uint256 startTime = sasProxy.getAgreementStartTime(agreementId);\n\n        ParametersStorage params = parametersStorage;\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n        if (startTime == 0) revert ServiceAgreementErrorsV1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                startTime,\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                epochLength\n            );\n\n        uint256 timeNow = block.timestamp;\n        uint256 commitWindowDuration = (params.commitWindowDurationPerc() * epochLength) / 100;\n\n        if (epoch == 0) {\n            return timeNow < (startTime + commitWindowDuration);\n        }\n\n        return (timeNow >= (startTime + epochLength * epoch) &&\n            timeNow < (startTime + epochLength * epoch + commitWindowDuration));\n    }\n\n    function getTopCommitSubmissions(\n        bytes32 agreementId,\n        uint16 epoch\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission[] memory) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                sasProxy.getAgreementStartTime(agreementId),\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                sasProxy.getAgreementEpochLength(agreementId)\n            );\n\n        uint32 r0 = parametersStorage.r0();\n\n        ServiceAgreementStructsV1.CommitSubmission[]\n            memory epochCommits = new ServiceAgreementStructsV1.CommitSubmission[](r0);\n\n        bytes32 epochSubmissionsHead = sasProxy.getV1AgreementEpochSubmissionHead(agreementId, epoch);\n\n        epochCommits[0] = sasProxy.getCommitSubmission(epochSubmissionsHead);\n\n        bytes32 commitId;\n        uint72 nextIdentityId = epochCommits[0].nextIdentityId;\n        uint8 submissionsIdx = 1;\n        while ((submissionsIdx < r0) && (nextIdentityId != 0)) {\n            commitId = keccak256(abi.encodePacked(agreementId, epoch, nextIdentityId));\n            epochCommits[submissionsIdx] = sasProxy.getCommitSubmission(commitId);\n\n            nextIdentityId = epochCommits[submissionsIdx].nextIdentityId;\n\n            unchecked {\n                submissionsIdx++;\n            }\n        }\n\n        return epochCommits;\n    }\n\n    function submitCommit(ServiceAgreementStructsV1.CommitInputArgs calldata args) external {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1.ServiceAgreementDoesntExist(agreementId);\n\n        if (!reqs[0] && !isCommitWindowOpen(agreementId, args.epoch)) {\n            uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n            uint256 actualCommitWindowStart = (sasProxy.getAgreementStartTime(agreementId) + args.epoch * epochLength);\n\n            revert ServiceAgreementErrorsV1.CommitWindowClosed(\n                agreementId,\n                args.epoch,\n                actualCommitWindowStart,\n                actualCommitWindowStart + (parametersStorage.commitWindowDurationPerc() * epochLength) / 100,\n                block.timestamp\n            );\n        }\n\n        uint72 identityId = identityStorage.getIdentityId(msg.sender);\n\n        if (!reqs[1] && !shardingTableStorage.nodeExists(identityId)) {\n            ProfileStorage ps = profileStorage;\n\n            revert ServiceAgreementErrorsV1.NodeNotInShardingTable(\n                identityId,\n                ps.getNodeId(identityId),\n                ps.getAsk(identityId),\n                stakingStorage.totalStakes(identityId)\n            );\n        }\n\n        uint40 score = scoringProxy.callScoreFunction(\n            sasProxy.getAgreementScoreFunctionId(agreementId),\n            args.hashFunctionId,\n            profileStorage.getNodeId(identityId),\n            args.keyword,\n            stakingStorage.totalStakes(identityId)\n        );\n\n        _insertCommit(agreementId, args.epoch, identityId, 0, 0, score);\n\n        emit CommitSubmitted(\n            args.assetContract,\n            args.tokenId,\n            args.keyword,\n            args.hashFunctionId,\n            args.epoch,\n            identityId,\n            score\n        );\n    }\n\n    function setReq(uint256 index, bool req) external onlyHubOwner {\n        reqs[index] = req;\n    }\n\n    function _insertCommit(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint72 identityId,\n        uint72 prevIdentityId,\n        uint72 nextIdentityId,\n        uint40 score\n    ) internal virtual {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 commitId = keccak256(abi.encodePacked(agreementId, epoch, identityId));\n\n        if (!reqs[2] && sasProxy.commitSubmissionExists(commitId))\n            revert ServiceAgreementErrorsV1.NodeAlreadySubmittedCommit(\n                agreementId,\n                epoch,\n                identityId,\n                profileStorage.getNodeId(identityId)\n            );\n\n        bytes32 refCommitId = sasProxy.getV1AgreementEpochSubmissionHead(agreementId, epoch);\n\n        ParametersStorage params = parametersStorage;\n\n        uint72 refCommitNextIdentityId = sasProxy.getCommitSubmissionNextIdentityId(refCommitId);\n        uint32 r0 = params.r0();\n        uint8 i;\n        while ((score < sasProxy.getCommitSubmissionScore(refCommitId)) && (refCommitNextIdentityId != 0) && (i < r0)) {\n            refCommitId = keccak256(abi.encodePacked(agreementId, epoch, refCommitNextIdentityId));\n\n            refCommitNextIdentityId = sasProxy.getCommitSubmissionNextIdentityId(refCommitId);\n            unchecked {\n                i++;\n            }\n        }\n\n        if (!reqs[3] && (i >= r0))\n            revert ServiceAgreementErrorsV1.NodeNotAwarded(\n                agreementId,\n                epoch,\n                identityId,\n                profileStorage.getNodeId(identityId),\n                i\n            );\n\n        sasProxy.createV1CommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\n\n        ServiceAgreementStructsV1.CommitSubmission memory refCommit = sasProxy.getCommitSubmission(refCommitId);\n\n        if ((i == 0) && (refCommit.identityId == 0)) {\n            //  No head -> Setting new head\n            sasProxy.setV1AgreementEpochSubmissionHead(agreementId, epoch, commitId);\n        } else if ((i == 0) && (score <= refCommit.score)) {\n            // There is a head with higher or equal score, add new commit on the right\n            _linkCommits(agreementId, epoch, refCommit.identityId, identityId);\n        } else if ((i == 0) && (score > refCommit.score)) {\n            // There is a head with lower score, replace the head\n            sasProxy.setV1AgreementEpochSubmissionHead(agreementId, epoch, commitId);\n            _linkCommits(agreementId, epoch, identityId, refCommit.identityId);\n        } else if (score > refCommit.score) {\n            // [H] - head\n            // [RC] - reference commit\n            // [RC-] - commit before reference commit\n            // [RC+] - commit after reference commit\n            // [NC] - new commit\n            // [] <-> [H] <-> [X] ... [RC-] <-> [RC] <-> [RC+] ... [C] <-> []\n            // [] <-> [H] <-> [X] ... [RC-] <-(NL)-> [NC] <-(NL)-> [RC] <-> [RC+] ... [C] <-> []\n            _linkCommits(agreementId, epoch, refCommit.prevIdentityId, identityId);\n            _linkCommits(agreementId, epoch, identityId, refCommit.identityId);\n        } else {\n            // [] <-> [H] <-> [RC] <-> []\n            // [] <-> [H] <-> [RC] <-(NL)-> [NC] <-> []\n            _linkCommits(agreementId, epoch, refCommit.identityId, identityId);\n        }\n    }\n\n    function _linkCommits(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint72 leftIdentityId,\n        uint72 rightIdentityId\n    ) internal virtual {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        sasProxy.setCommitSubmissionNextIdentityId(\n            keccak256(abi.encodePacked(agreementId, epoch, leftIdentityId)), // leftCommitId\n            rightIdentityId\n        );\n\n        sasProxy.setCommitSubmissionPrevIdentityId(\n            keccak256(abi.encodePacked(agreementId, epoch, rightIdentityId)), // rightCommitId\n            leftIdentityId\n        );\n    }\n}\n"
    },
    "contracts/CommitManagerV1U1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {ScoringProxy} from \"./ScoringProxy.sol\";\nimport {Staking} from \"./Staking.sol\";\nimport {ContentAssetStorage} from \"./storage/assets/ContentAssetStorage.sol\";\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"./storage/ServiceAgreementStorageProxy.sol\";\nimport {ShardingTableStorage} from \"./storage/ShardingTableStorage.sol\";\nimport {StakingStorage} from \"./storage/StakingStorage.sol\";\nimport {UnfinalizedStateStorage} from \"./storage/UnfinalizedStateStorage.sol\";\nimport {AbstractAsset} from \"./abstract/AbstractAsset.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ServiceAgreementStructsV1} from \"./structs/ServiceAgreementStructsV1.sol\";\nimport {ContentAssetErrors} from \"./errors/assets/ContentAssetErrors.sol\";\nimport {GeneralErrors} from \"./errors/GeneralErrors.sol\";\nimport {ServiceAgreementErrorsV1U1} from \"./errors/ServiceAgreementErrorsV1U1.sol\";\n\ncontract CommitManagerV1U1 is Named, Versioned, ContractStatus, Initializable {\n    event CommitSubmitted(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        bytes keyword,\n        uint8 hashFunctionId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 indexed identityId,\n        uint40 score\n    );\n    event StateFinalized(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        bytes keyword,\n        uint8 hashFunctionId,\n        uint16 epoch,\n        uint256 stateIndex,\n        bytes32 state\n    );\n\n    string private constant _NAME = \"CommitManagerV1U1\";\n    string private constant _VERSION = \"1.0.0\";\n\n    bool[6] public reqs = [false, false, false, false, false, false];\n\n    HashingProxy public hashingProxy;\n    ScoringProxy public scoringProxy;\n    Staking public stakingContract;\n    ContentAssetStorage public contentAssetStorage;\n    IdentityStorage public identityStorage;\n    ParametersStorage public parametersStorage;\n    ProfileStorage public profileStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n    ShardingTableStorage public shardingTableStorage;\n    StakingStorage public stakingStorage;\n    UnfinalizedStateStorage public unfinalizedStateStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        scoringProxy = ScoringProxy(hub.getContractAddress(\"ScoringProxy\"));\n        stakingContract = Staking(hub.getContractAddress(\"Staking\"));\n        contentAssetStorage = ContentAssetStorage(hub.getAssetStorageAddress(\"ContentAssetStorage\"));\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\"ShardingTableStorage\"));\n        stakingStorage = StakingStorage(hub.getContractAddress(\"StakingStorage\"));\n        unfinalizedStateStorage = UnfinalizedStateStorage(hub.getContractAddress(\"UnfinalizedStateStorage\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function isCommitWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        uint256 startTime = sasProxy.getAgreementStartTime(agreementId);\n\n        ParametersStorage params = parametersStorage;\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n        if (startTime == 0) revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                startTime,\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                epochLength\n            );\n\n        uint256 timeNow = block.timestamp;\n        uint256 commitWindowDuration = (params.commitWindowDurationPerc() * epochLength) / 100;\n\n        if (epoch == 0) {\n            return timeNow < (startTime + commitWindowDuration);\n        }\n\n        return (timeNow >= (startTime + epochLength * epoch) &&\n            timeNow < (startTime + epochLength * epoch + commitWindowDuration));\n    }\n\n    function isUpdateCommitWindowOpen(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex\n    ) public view returns (bool) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                sasProxy.getAgreementStartTime(agreementId),\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                epochLength\n            );\n\n        uint256 commitWindowEnd = sasProxy.getUpdateCommitsDeadline(\n            keccak256(abi.encodePacked(agreementId, stateIndex))\n        );\n\n        return block.timestamp < commitWindowEnd;\n    }\n\n    function getTopCommitSubmissions(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission[] memory) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                sasProxy.getAgreementStartTime(agreementId),\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                sasProxy.getAgreementEpochLength(agreementId)\n            );\n\n        uint32 r0 = parametersStorage.r0();\n\n        ServiceAgreementStructsV1.CommitSubmission[]\n            memory epochStateCommits = new ServiceAgreementStructsV1.CommitSubmission[](r0);\n\n        bytes32 epochSubmissionsHead = sasProxy.getV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\n\n        epochStateCommits[0] = sasProxy.getCommitSubmission(epochSubmissionsHead);\n\n        bytes32 commitId;\n        uint72 nextIdentityId = epochStateCommits[0].nextIdentityId;\n        uint8 submissionsIdx = 1;\n        while ((submissionsIdx < r0) && (nextIdentityId != 0)) {\n            commitId = keccak256(abi.encodePacked(agreementId, epoch, stateIndex, nextIdentityId));\n            epochStateCommits[submissionsIdx] = sasProxy.getCommitSubmission(commitId);\n\n            nextIdentityId = epochStateCommits[submissionsIdx].nextIdentityId;\n\n            unchecked {\n                submissionsIdx++;\n            }\n        }\n\n        return epochStateCommits;\n    }\n\n    function submitCommit(ServiceAgreementStructsV1.CommitInputArgs calldata args) external {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n\n        uint256 latestFinalizedStateIndex = AbstractAsset(args.assetContract).getAssertionIdsLength(args.tokenId) - 1;\n\n        if (!reqs[0] && !isCommitWindowOpen(agreementId, args.epoch)) {\n            uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n            uint256 actualCommitWindowStart = (sasProxy.getAgreementStartTime(agreementId) + args.epoch * epochLength);\n\n            revert ServiceAgreementErrorsV1U1.CommitWindowClosed(\n                agreementId,\n                args.epoch,\n                latestFinalizedStateIndex,\n                actualCommitWindowStart,\n                actualCommitWindowStart + (parametersStorage.commitWindowDurationPerc() * epochLength) / 100,\n                block.timestamp\n            );\n        }\n\n        uint72 identityId = identityStorage.getIdentityId(msg.sender);\n\n        if (!reqs[1] && !shardingTableStorage.nodeExists(identityId)) {\n            ProfileStorage ps = profileStorage;\n\n            revert ServiceAgreementErrorsV1U1.NodeNotInShardingTable(\n                identityId,\n                ps.getNodeId(identityId),\n                ps.getAsk(identityId),\n                stakingStorage.totalStakes(identityId)\n            );\n        }\n\n        uint40 score = scoringProxy.callScoreFunction(\n            sasProxy.getAgreementScoreFunctionId(agreementId),\n            args.hashFunctionId,\n            profileStorage.getNodeId(identityId),\n            args.keyword,\n            stakingStorage.totalStakes(identityId)\n        );\n\n        _insertCommit(agreementId, args.epoch, latestFinalizedStateIndex, identityId, 0, 0, score);\n\n        emit CommitSubmitted(\n            args.assetContract,\n            args.tokenId,\n            args.keyword,\n            args.hashFunctionId,\n            args.epoch,\n            latestFinalizedStateIndex,\n            identityId,\n            score\n        );\n    }\n\n    function submitUpdateCommit(ServiceAgreementStructsV1.CommitInputArgs calldata args) external {\n        UnfinalizedStateStorage uss = unfinalizedStateStorage;\n        AbstractAsset generalAssetInterface = AbstractAsset(args.assetContract);\n\n        bytes32 unfinalizedState = uss.getUnfinalizedState(args.tokenId);\n        uint256 unfinalizedStateIndex = generalAssetInterface.getAssertionIdsLength(args.tokenId);\n\n        if (uss.getUnfinalizedState(args.tokenId) == bytes32(0)) {\n            revert ServiceAgreementErrorsV1U1.NoPendingUpdate(args.assetContract, args.tokenId);\n        }\n\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n\n        if (!reqs[2] && !isUpdateCommitWindowOpen(agreementId, args.epoch, unfinalizedStateIndex)) {\n            uint256 commitWindowEnd = sasProxy.getUpdateCommitsDeadline(\n                keccak256(abi.encodePacked(agreementId, unfinalizedStateIndex))\n            );\n\n            revert ServiceAgreementErrorsV1U1.CommitWindowClosed(\n                agreementId,\n                args.epoch,\n                unfinalizedStateIndex,\n                commitWindowEnd - parametersStorage.updateCommitWindowDuration(),\n                commitWindowEnd,\n                block.timestamp\n            );\n        }\n\n        uint72 identityId = identityStorage.getIdentityId(msg.sender);\n\n        if (!reqs[3] && !shardingTableStorage.nodeExists(identityId)) {\n            ProfileStorage ps = profileStorage;\n\n            revert ServiceAgreementErrorsV1U1.NodeNotInShardingTable(\n                identityId,\n                ps.getNodeId(identityId),\n                ps.getAsk(identityId),\n                stakingStorage.totalStakes(identityId)\n            );\n        }\n\n        uint40 score = scoringProxy.callScoreFunction(\n            sasProxy.getAgreementScoreFunctionId(agreementId),\n            args.hashFunctionId,\n            profileStorage.getNodeId(identityId),\n            args.keyword,\n            stakingStorage.totalStakes(identityId)\n        );\n\n        _insertCommit(agreementId, args.epoch, unfinalizedStateIndex, identityId, 0, 0, score);\n\n        emit CommitSubmitted(\n            args.assetContract,\n            args.tokenId,\n            args.keyword,\n            args.hashFunctionId,\n            args.epoch,\n            unfinalizedStateIndex,\n            identityId,\n            score\n        );\n\n        if (\n            sasProxy.getCommitsCount(keccak256(abi.encodePacked(agreementId, args.epoch, unfinalizedStateIndex))) ==\n            parametersStorage.finalizationCommitsNumber()\n        ) {\n            if (sasProxy.agreementV1Exists(agreementId)) {\n                sasProxy.migrateV1ServiceAgreement(agreementId);\n            }\n\n            sasProxy.setAgreementTokenAmount(\n                agreementId,\n                sasProxy.getAgreementTokenAmount(agreementId) + sasProxy.getAgreementUpdateTokenAmount(agreementId)\n            );\n            sasProxy.setAgreementUpdateTokenAmount(agreementId, 0);\n\n            ContentAssetStorage cas = contentAssetStorage;\n            cas.setAssertionIssuer(args.tokenId, unfinalizedState, uss.getIssuer(args.tokenId));\n            cas.pushAssertionId(args.tokenId, unfinalizedState);\n\n            uss.deleteIssuer(args.tokenId);\n            uss.deleteUnfinalizedState(args.tokenId);\n\n            emit StateFinalized(\n                args.assetContract,\n                args.tokenId,\n                args.keyword,\n                args.hashFunctionId,\n                args.epoch,\n                unfinalizedStateIndex,\n                unfinalizedState\n            );\n        }\n    }\n\n    function setReq(uint256 index, bool req) external onlyHubOwner {\n        reqs[index] = req;\n    }\n\n    function _insertCommit(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 identityId,\n        uint72 prevIdentityId,\n        uint72 nextIdentityId,\n        uint40 score\n    ) internal virtual {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 commitId = keccak256(abi.encodePacked(agreementId, epoch, stateIndex, identityId));\n\n        if (!reqs[4] && sasProxy.commitSubmissionExists(commitId))\n            revert ServiceAgreementErrorsV1U1.NodeAlreadySubmittedCommit(\n                agreementId,\n                epoch,\n                stateIndex,\n                identityId,\n                profileStorage.getNodeId(identityId)\n            );\n\n        bytes32 refCommitId = sasProxy.getV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\n\n        ParametersStorage params = parametersStorage;\n\n        uint72 refCommitNextIdentityId = sasProxy.getCommitSubmissionNextIdentityId(refCommitId);\n        uint32 r0 = params.r0();\n        uint8 i;\n        while ((score < sasProxy.getCommitSubmissionScore(refCommitId)) && (refCommitNextIdentityId != 0) && (i < r0)) {\n            refCommitId = keccak256(abi.encodePacked(agreementId, epoch, stateIndex, refCommitNextIdentityId));\n\n            refCommitNextIdentityId = sasProxy.getCommitSubmissionNextIdentityId(refCommitId);\n            unchecked {\n                i++;\n            }\n        }\n\n        if (!reqs[5] && (i >= r0))\n            revert ServiceAgreementErrorsV1U1.NodeNotAwarded(\n                agreementId,\n                epoch,\n                stateIndex,\n                identityId,\n                profileStorage.getNodeId(identityId),\n                i\n            );\n\n        sasProxy.createV1U1CommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\n\n        ServiceAgreementStructsV1.CommitSubmission memory refCommit = sasProxy.getCommitSubmission(refCommitId);\n\n        if ((i == 0) && (refCommit.identityId == 0)) {\n            //  No head -> Setting new head\n            sasProxy.setV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex, commitId);\n        } else if ((i == 0) && (score <= refCommit.score)) {\n            // There is a head with higher or equal score, add new commit on the right\n            _linkCommits(agreementId, epoch, stateIndex, refCommit.identityId, identityId);\n        } else if ((i == 0) && (score > refCommit.score)) {\n            // There is a head with lower score, replace the head\n            sasProxy.setV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex, commitId);\n            _linkCommits(agreementId, epoch, stateIndex, identityId, refCommit.identityId);\n        } else if (score > refCommit.score) {\n            // [H] - head\n            // [RC] - reference commit\n            // [RC-] - commit before reference commit\n            // [RC+] - commit after reference commit\n            // [NC] - new commit\n            // [] <-> [H] <-> [X] ... [RC-] <-> [RC] <-> [RC+] ... [C] <-> []\n            // [] <-> [H] <-> [X] ... [RC-] <-(NL)-> [NC] <-(NL)-> [RC] <-> [RC+] ... [C] <-> []\n            _linkCommits(agreementId, epoch, stateIndex, refCommit.prevIdentityId, identityId);\n            _linkCommits(agreementId, epoch, stateIndex, identityId, refCommit.identityId);\n        } else {\n            // [] <-> [H] <-> [RC] <-> []\n            // [] <-> [H] <-> [RC] <-(NL)-> [NC] <-> []\n            _linkCommits(agreementId, epoch, stateIndex, refCommit.identityId, identityId);\n        }\n\n        sasProxy.incrementCommitsCount(keccak256(abi.encodePacked(agreementId, epoch, stateIndex)));\n    }\n\n    function _linkCommits(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 leftIdentityId,\n        uint72 rightIdentityId\n    ) internal virtual {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        sasProxy.setCommitSubmissionNextIdentityId(\n            keccak256(abi.encodePacked(agreementId, epoch, stateIndex, leftIdentityId)), // leftCommitId\n            rightIdentityId\n        );\n\n        sasProxy.setCommitSubmissionPrevIdentityId(\n            keccak256(abi.encodePacked(agreementId, epoch, stateIndex, rightIdentityId)), // rightCommitId\n            leftIdentityId\n        );\n    }\n}\n"
    },
    "contracts/constants/assets/ContentAssetConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nuint8 constant HASH_FUNCTION_ID = 1; // SHA256\n"
    },
    "contracts/constants/IdentityConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nuint256 constant ADMIN_KEY = 1;\nuint256 constant OPERATIONAL_KEY = 2;\nuint256 constant ECDSA = 1;\nuint256 constant RSA = 2;\n"
    },
    "contracts/constants/ShardingTableConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nuint72 constant NULL = 0;\n"
    },
    "contracts/errors/assets/ContentAssetErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ContentAssetErrors {\n    error AssetDoesntExist(uint256 tokenId);\n    error AssetExpired(uint256 tokenId);\n    error CommitPhaseOngoing(bytes32 agreementId);\n    error CommitPhaseSucceeded(bytes32 agreementId);\n    error FirstEpochHasAlreadyEnded(bytes32 agreementId);\n    error NoPendingUpdate(address assetStorage, uint256 tokenId);\n    error UpdateIsNotFinalized(address assetStorage, uint256 tokenId, bytes32 latestState);\n    error PendingUpdateFinalization(address assetStorage, uint256 tokenId, uint256 latestStateIndex);\n}\n"
    },
    "contracts/errors/GeneralErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary GeneralErrors {\n    error OnlyHubOwnerFunction(address caller);\n    error OnlyHubContractsFunction(address caller);\n}\n"
    },
    "contracts/errors/ServiceAgreementErrorsV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ServiceAgreementErrorsV1 {\n    error ServiceAgreementDoesntExist(bytes32 agreementId);\n    error EmptyAssetCreatorAddress();\n    error AssetStorageNotInTheHub(address contractAddress);\n    error EmptyKeyword();\n    error ZeroEpochsNumber();\n    error ZeroTokenAmount();\n    error ScoreFunctionDoesntExist(uint8 scoreFunctionId);\n    error TooLowAllowance(uint256 amount);\n    error TooLowBalance(uint256 amount);\n    error ServiceAgreementHasBeenExpired(\n        bytes32 agreementId,\n        uint256 startTime,\n        uint16 epochsNumber,\n        uint128 epochLength\n    );\n    error CommitWindowClosed(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 commitWindowOpen,\n        uint256 commitWindowClose,\n        uint256 timeNow\n    );\n    error NodeNotInShardingTable(uint72 identityId, bytes nodeId, uint96 ask, uint96 stake);\n    error ProofWindowClosed(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 proofWindowOpen,\n        uint256 proofWindowClose,\n        uint256 timeNow\n    );\n    error NodeAlreadyRewarded(bytes32 agreementId, uint16 epoch, uint72 identityId, bytes nodeId);\n    error NodeNotAwarded(bytes32 agreementId, uint16 epoch, uint72 identityId, bytes nodeId, uint8 rank);\n    error WrongMerkleProof(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint72 identityId,\n        bytes nodeId,\n        bytes32[] merkleProof,\n        bytes32 merkleRoot,\n        bytes32 chunkHash,\n        uint256 challenge\n    );\n    error NodeAlreadySubmittedCommit(bytes32 agreementId, uint16 epoch, uint72 identityId, bytes nodeId);\n}\n"
    },
    "contracts/errors/ServiceAgreementErrorsV1U1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ServiceAgreementErrorsV1U1 {\n    error ServiceAgreementDoesntExist(bytes32 agreementId);\n    error EmptyAssetCreatorAddress();\n    error AssetStorageNotInTheHub(address contractAddress);\n    error EmptyKeyword();\n    error ZeroEpochsNumber();\n    error ZeroTokenAmount();\n    error ScoreFunctionDoesntExist(uint8 scoreFunctionId);\n    error HashFunctionDoesntExist(uint8 hashFunctionId);\n    error TooLowAllowance(uint256 amount);\n    error TooLowBalance(uint256 amount);\n    error ServiceAgreementHasBeenExpired(\n        bytes32 agreementId,\n        uint256 startTime,\n        uint16 epochsNumber,\n        uint128 epochLength\n    );\n    error CommitWindowClosed(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint256 commitWindowOpen,\n        uint256 commitWindowClose,\n        uint256 timeNow\n    );\n    error NodeNotInShardingTable(uint72 identityId, bytes nodeId, uint96 ask, uint96 stake);\n    error ProofWindowClosed(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint256 proofWindowOpen,\n        uint256 proofWindowClose,\n        uint256 timeNow\n    );\n    error NodeAlreadyRewarded(bytes32 agreementId, uint16 epoch, uint256 stateIndex, uint72 identityId, bytes nodeId);\n    error NodeNotAwarded(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 identityId,\n        bytes nodeId,\n        uint8 rank\n    );\n    error WrongMerkleProof(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 identityId,\n        bytes nodeId,\n        bytes32[] merkleProof,\n        bytes32 merkleRoot,\n        bytes32 chunkHash,\n        uint256 challenge\n    );\n    error NodeAlreadySubmittedCommit(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 identityId,\n        bytes nodeId\n    );\n    error NoPendingUpdate(address assetStorage, uint256 tokenId);\n}\n"
    },
    "contracts/Guardian.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"./abstract/HubDependent.sol\";\nimport {ICustodian} from \"./interface/ICustodian.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Guardian is HubDependent {\n    event TokenTransferred(address indexed custodian, uint256 amount);\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\n\n    IERC20 public tokenContract;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        tokenContract = IERC20(hub.getContractAddress(\"Token\"));\n    }\n\n    function transferTokens(address payable custodian) external onlyHubOwner {\n        require(custodian != address(0x0), \"Custodian cannot be a zero address\");\n        uint contractSize;\n        assembly {\n            contractSize := extcodesize(custodian)\n        }\n        require(contractSize > 0, \"Cannot transfer tokens to custodian that is not a contract!\");\n\n        ICustodian custodianContract = ICustodian(custodian);\n        bool hasOwnersFunction = false;\n        try custodianContract.getOwners() returns (address[] memory owners) {\n            hasOwnersFunction = true;\n            require(owners.length > 0, \"Cannot transfer tokens to custodian without owners defined!\");\n        } catch {}\n        require(hasOwnersFunction, \"Cannot transfer tokens to custodian without getOwners function!\");\n\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\n        require(transactionResult, \"Token transaction execution failed!\");\n\n        emit TokenTransferred(custodian, balanceTransferred);\n    }\n\n    function withdrawMisplacedOTP() external onlyHubOwner {\n        uint256 balance = address(this).balance;\n        if (balance > 0) {\n            (bool success, ) = msg.sender.call{value: balance}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\n    }\n\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\n        require(tokenContractAddress != address(tokenContract), \"Cannot use this function with the TRAC contract\");\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\n\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\n        if (balance > 0) {\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\n            require(transactionResult, \"Token transaction execution failed\");\n        }\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\n    }\n}\n"
    },
    "contracts/hashing/sha256.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {IHashFunction} from \"../interface/IHashFunction.sol\";\nimport {Indexable} from \"../interface/Indexable.sol\";\nimport {Named} from \"../interface/Named.sol\";\n\ncontract SHA256 is IHashFunction, Indexable, Named {\n    uint8 private constant _ID = 1;\n    string private constant _NAME = \"sha256\";\n\n    function id() external pure virtual override returns (uint8) {\n        return _ID;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function hash(bytes calldata data) external pure returns (bytes32) {\n        return sha256(data);\n    }\n}\n"
    },
    "contracts/HashingProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {IHashFunction} from \"./interface/IHashFunction.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {UnorderedIndexableContractDynamicSetLib} from \"./utils/UnorderedIndexableContractDynamicSet.sol\";\n\ncontract HashingProxy is Named, Versioned, ContractStatus {\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\n\n    event NewHashFunctionContract(uint8 indexed hashFunctionId, address newContractAddress);\n    event HashFunctionContractChanged(uint8 indexed hashFunctionId, address newContractAddress);\n\n    string private constant _NAME = \"HashingProxy\";\n    string private constant _VERSION = \"1.0.1\";\n\n    UnorderedIndexableContractDynamicSetLib.Set internal hashFunctionSet;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function setContractAddress(uint8 hashFunctionId, address hashingContractAddress) external onlyHubOwner {\n        if (hashFunctionSet.exists(hashFunctionId)) {\n            hashFunctionSet.update(hashFunctionId, hashingContractAddress);\n            emit HashFunctionContractChanged(hashFunctionId, hashingContractAddress);\n        } else {\n            hashFunctionSet.append(hashFunctionId, hashingContractAddress);\n            emit NewHashFunctionContract(hashFunctionId, hashingContractAddress);\n        }\n    }\n\n    function removeContract(uint8 hashFunctionId) external onlyHubOwner {\n        hashFunctionSet.remove(hashFunctionId);\n    }\n\n    function callHashFunction(uint8 hashFunctionId, bytes calldata data) external view returns (bytes32) {\n        return IHashFunction(hashFunctionSet.get(hashFunctionId).addr).hash(data);\n    }\n\n    function getHashFunctionName(uint8 hashFunctionId) external view returns (string memory) {\n        return Named(hashFunctionSet.get(hashFunctionId).addr).name();\n    }\n\n    function getHashFunctionContractAddress(uint8 hashFunctionId) external view returns (address) {\n        return hashFunctionSet.get(hashFunctionId).addr;\n    }\n\n    function getAllHashFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\n        return hashFunctionSet.getAll();\n    }\n\n    function isHashFunction(uint8 hashFunctionId) external view returns (bool) {\n        return hashFunctionSet.exists(hashFunctionId);\n    }\n}\n"
    },
    "contracts/Hub.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {UnorderedNamedContractDynamicSetLib} from \"./utils/UnorderedNamedContractDynamicSet.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Hub is Named, Versioned, Ownable {\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\n\n    event NewContract(string contractName, address newContractAddress);\n    event ContractChanged(string contractName, address newContractAddress);\n    event NewAssetStorage(string contractName, address newContractAddress);\n    event AssetStorageChanged(string contractName, address newContractAddress);\n\n    string private constant _NAME = \"Hub\";\n    string private constant _VERSION = \"1.0.0\";\n\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\n        if (contractSet.exists(contractName)) {\n            emit ContractChanged(contractName, newContractAddress);\n            contractSet.update(contractName, newContractAddress);\n        } else {\n            emit NewContract(contractName, newContractAddress);\n            contractSet.append(contractName, newContractAddress);\n        }\n    }\n\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\n        if (assetStorageSet.exists(assetStorageName)) {\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\n        } else {\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\n        }\n    }\n\n    function getContractAddress(string calldata contractName) external view returns (address) {\n        return contractSet.get(contractName).addr;\n    }\n\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\n        return assetStorageSet.get(assetStorageName).addr;\n    }\n\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\n        return contractSet.getAll();\n    }\n\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\n        return assetStorageSet.getAll();\n    }\n\n    function isContract(string calldata contractName) external view returns (bool) {\n        return contractSet.exists(contractName);\n    }\n\n    function isContract(address selectedContractAddress) external view returns (bool) {\n        return contractSet.exists(selectedContractAddress);\n    }\n\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\n        return assetStorageSet.exists(assetStorageName);\n    }\n\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\n        return assetStorageSet.exists(assetStorageAddress);\n    }\n}\n"
    },
    "contracts/HubController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {ScoringProxy} from \"./ScoringProxy.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {ICustodian} from \"./interface/ICustodian.sol\";\nimport {Indexable} from \"./interface/Indexable.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {GeneralStructs} from \"./structs/GeneralStructs.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract HubController is Named, Versioned, ContractStatus, Ownable {\n    string private constant _NAME = \"HubController\";\n    string private constant _VERSION = \"1.0.0\";\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    // @dev Only transactions by HubController owner or one of the owners of the MultiSig Wallet\n    modifier onlyOwnerOrMultiSigOwner() {\n        _checkOwnerOrMultiSigOwner();\n        _;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    /**\n     * @dev Forwards a function call to a specified target contract.\n     * @notice This function can only be called by the contract owner or a multisig owner.\n     * @param target The address of the target contract.\n     * @param data The calldata containing the function signature and arguments for the target contract's function.\n     * @return result The return data of the target contract's function call.\n     */\n    function forwardCall(address target, bytes calldata data) public onlyOwnerOrMultiSigOwner returns (bytes memory) {\n        // Check if the target contract is registered in the Hub\n        require(hub.isContract(target), \"Target contract isn't in the Hub\");\n\n        // Perform the function call to the target contract with the specified calldata\n        (bool success, bytes memory result) = target.call{value: 0}(data);\n\n        // If the call is unsuccessful, revert the transaction with the original revert reason\n        if (!success) {\n            assembly {\n                // Load the free memory pointer from memory slot 0x40\n                // Memory slot 0x40 is conventionally used to store the free memory pointer in Solidity, which points\n                // to the next available memory slot for storing data during the execution of a contract function.\n                let ptr := mload(0x40)\n                // Get the size of the return data from the unsuccessful call\n                let size := returndatasize()\n                // Copy the return data to the memory location pointed to by ptr\n                returndatacopy(ptr, 0, size)\n                // Revert the transaction with the return data as the revert reason\n                revert(ptr, size)\n            }\n        }\n\n        return result;\n    }\n\n    function setAndReinitializeContracts(\n        GeneralStructs.Contract[] calldata newContracts,\n        GeneralStructs.Contract[] calldata newAssetStorageContracts,\n        address[] calldata contractsToReinitialize,\n        bytes[] calldata setParametersEncodedData,\n        address[] calldata newHashFunctions,\n        address[] calldata newScoreFunctions\n    ) external onlyOwnerOrMultiSigOwner {\n        _setContracts(newContracts);\n        _setAssetStorageContracts(newAssetStorageContracts);\n        _reinitializeContracts(contractsToReinitialize);\n        _setParameters(setParametersEncodedData);\n        _setHashFunctions(newHashFunctions);\n        _setScoreFunctions(newScoreFunctions);\n    }\n\n    function setContractAddress(\n        string calldata contractName,\n        address newContractAddress\n    ) external onlyOwnerOrMultiSigOwner {\n        hub.setContractAddress(contractName, newContractAddress);\n    }\n\n    function setAssetStorageAddress(\n        string calldata assetStorageName,\n        address assetStorageAddress\n    ) external onlyOwnerOrMultiSigOwner {\n        hub.setAssetStorageAddress(assetStorageName, assetStorageAddress);\n    }\n\n    function renounceHubOwnership() external onlyOwner {\n        hub.renounceOwnership();\n    }\n\n    function transferHubOwnership(address newOwner) external onlyOwner {\n        hub.transferOwnership(newOwner);\n    }\n\n    function _setContracts(GeneralStructs.Contract[] calldata newContracts) internal {\n        for (uint i; i < newContracts.length; ) {\n            hub.setContractAddress(newContracts[i].name, newContracts[i].addr);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function _setAssetStorageContracts(GeneralStructs.Contract[] calldata newAssetStorageContracts) internal {\n        for (uint i; i < newAssetStorageContracts.length; ) {\n            hub.setAssetStorageAddress(newAssetStorageContracts[i].name, newAssetStorageContracts[i].addr);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function _reinitializeContracts(address[] calldata contractsToReinitialize) internal {\n        for (uint i; i < contractsToReinitialize.length; ) {\n            Initializable(contractsToReinitialize[i]).initialize();\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function _setParameters(bytes[] calldata setParametersEncodedData) internal {\n        address parametersStorageAddress = hub.getContractAddress(\"ParametersStorage\");\n        for (uint i; i < setParametersEncodedData.length; ) {\n            forwardCall(parametersStorageAddress, setParametersEncodedData[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function _setHashFunctions(address[] calldata newHashFunctions) internal {\n        HashingProxy hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        for (uint i; i < newHashFunctions.length; ) {\n            hashingProxy.setContractAddress(Indexable(newHashFunctions[i]).id(), newHashFunctions[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function _setScoreFunctions(address[] calldata newScoreFunctions) internal {\n        ScoringProxy scoringProxy = ScoringProxy(hub.getContractAddress(\"ScoringProxy\"));\n        for (uint i; i < newScoreFunctions.length; ) {\n            scoringProxy.setContractAddress(Indexable(newScoreFunctions[i]).id(), newScoreFunctions[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function _isMultiSigOwner(address multiSigAddress) internal view returns (bool) {\n        try ICustodian(multiSigAddress).getOwners() returns (address[] memory multiSigOwners) {\n            for (uint i = 0; i < multiSigOwners.length; i++) {\n                if (msg.sender == multiSigOwners[i]) {\n                    return true;\n                }\n            } // solhint-disable-next-line no-empty-blocks\n        } catch {}\n\n        return false;\n    }\n\n    function _checkOwnerOrMultiSigOwner() internal view virtual {\n        address hubControllerOwner = owner();\n        require(\n            (msg.sender == hubControllerOwner) || _isMultiSigOwner(hubControllerOwner),\n            \"Owner / MultiSig owner function!\"\n        );\n    }\n}\n"
    },
    "contracts/Identity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ADMIN_KEY, OPERATIONAL_KEY, ECDSA, RSA} from \"./constants/IdentityConstants.sol\";\n\ncontract Identity is Named, Versioned, ContractStatus, Initializable {\n    event IdentityCreated(uint72 indexed identityId, bytes32 indexed operationalKey, bytes32 indexed adminKey);\n    event IdentityDeleted(uint72 indexed identityId);\n\n    string private constant _NAME = \"Identity\";\n    string private constant _VERSION = \"1.0.1\";\n\n    IdentityStorage public identityStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    modifier onlyAdmin(uint72 identityId) {\n        _checkAdmin(identityId);\n        _;\n    }\n\n    function initialize() public onlyHubOwner {\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createIdentity(address operational, address admin) external onlyContracts returns (uint72) {\n        require(operational != address(0), \"Operational address can't be 0x0\");\n        require(admin != address(0), \"Admin address can't be 0x0\");\n        require(admin != operational, \"Admin should != Operational\");\n\n        IdentityStorage ids = identityStorage;\n\n        uint72 identityId = ids.generateIdentityId();\n\n        bytes32 adminKey = keccak256(abi.encodePacked(admin));\n        ids.addKey(identityId, adminKey, ADMIN_KEY, ECDSA);\n\n        bytes32 operationalKey = keccak256(abi.encodePacked(operational));\n        ids.addKey(identityId, operationalKey, OPERATIONAL_KEY, ECDSA);\n\n        ids.setOperationalKeyIdentityId(operationalKey, identityId);\n\n        emit IdentityCreated(identityId, operationalKey, adminKey);\n\n        return identityId;\n    }\n\n    function deleteIdentity(uint72 identityId) external onlyContracts {\n        identityStorage.deleteIdentity(identityId);\n\n        emit IdentityDeleted(identityId);\n    }\n\n    function addKey(\n        uint72 identityId,\n        bytes32 key,\n        uint256 keyPurpose,\n        uint256 keyType\n    ) external onlyAdmin(identityId) {\n        require(key != bytes32(0), \"Key arg is empty\");\n\n        IdentityStorage ids = identityStorage;\n\n        bytes32 attachedKey;\n        (, , attachedKey) = ids.getKey(identityId, key);\n        require(attachedKey != key, \"Key is already attached\");\n\n        ids.addKey(identityId, key, keyPurpose, keyType);\n\n        if (keyPurpose == OPERATIONAL_KEY) {\n            ids.setOperationalKeyIdentityId(key, identityId);\n        }\n    }\n\n    function removeKey(uint72 identityId, bytes32 key) external onlyAdmin(identityId) {\n        require(key != bytes32(0), \"Key arg is empty\");\n\n        IdentityStorage ids = identityStorage;\n\n        uint256 purpose;\n        bytes32 attachedKey;\n        (purpose, , attachedKey) = ids.getKey(identityId, key);\n        require(attachedKey == key, \"Key isn't attached\");\n\n        require(\n            !(ids.getKeysByPurpose(identityId, ADMIN_KEY).length == 1 && ids.keyHasPurpose(identityId, key, ADMIN_KEY)),\n            \"Cannot delete the only admin key\"\n        );\n        require(\n            !(ids.getKeysByPurpose(identityId, OPERATIONAL_KEY).length == 1 &&\n                ids.keyHasPurpose(identityId, key, OPERATIONAL_KEY)),\n            \"Cannot delete the only oper. key\"\n        );\n\n        ids.removeKey(identityId, key);\n\n        if (purpose == OPERATIONAL_KEY) {\n            ids.removeOperationalKeyIdentityId(key);\n        }\n    }\n\n    function _checkAdmin(uint72 identityId) internal view virtual {\n        require(\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\n            \"Admin function\"\n        );\n    }\n}\n"
    },
    "contracts/interface/ICustodian.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface ICustodian {\n    function getOwners() external view returns (address[] memory);\n}\n"
    },
    "contracts/interface/IERC734Extended.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface IERC734Extended {\n    event KeyAdded(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\n    event KeyRemoved(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\n\n    struct Key {\n        uint256 purpose; //e.g., ADMIN_KEY = 1, OPERATIONAL_KEY = 2, etc.\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\n        bytes32 key;\n    }\n\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _keyType) external;\n\n    function removeKey(uint72 identityId, bytes32 _key) external;\n\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view returns (bool exists);\n\n    function getKey(\n        uint72 identityId,\n        bytes32 _key\n    ) external view returns (uint256 purpose, uint256 keyType, bytes32 key);\n\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view returns (bytes32[] memory keys);\n}\n"
    },
    "contracts/interface/IHashFunction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface IHashFunction {\n    function hash(bytes calldata data) external pure returns (bytes32);\n}\n"
    },
    "contracts/interface/Indexable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface Indexable {\n    function id() external view returns (uint8);\n}\n"
    },
    "contracts/interface/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface Initializable {\n    function initialize() external;\n}\n"
    },
    "contracts/interface/IScoreFunction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface IScoreFunction {\n    function calculateScore(uint256 distance, uint96 stake) external view returns (uint40);\n\n    function calculateDistance(\n        uint8 hashFunctionId,\n        bytes calldata nodeId,\n        bytes calldata keyword\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interface/Named.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface Named {\n    function name() external view returns (string memory);\n}\n"
    },
    "contracts/interface/Versioned.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface Versioned {\n    function version() external view returns (string memory);\n}\n"
    },
    "contracts/Profile.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {Identity} from \"./Identity.sol\";\nimport {Shares} from \"./Shares.sol\";\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {Staking} from \"./Staking.sol\";\nimport {WhitelistStorage} from \"./storage/WhitelistStorage.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {UnorderedIndexableContractDynamicSetLib} from \"./utils/UnorderedIndexableContractDynamicSet.sol\";\nimport {ADMIN_KEY, OPERATIONAL_KEY} from \"./constants/IdentityConstants.sol\";\n\ncontract Profile is Named, Versioned, ContractStatus, Initializable {\n    event ProfileCreated(uint72 indexed identityId, bytes nodeId);\n    event ProfileDeleted(uint72 indexed identityId);\n    event AskUpdated(uint72 indexed identityId, bytes nodeId, uint96 ask);\n\n    string private constant _NAME = \"Profile\";\n    string private constant _VERSION = \"1.0.2\";\n\n    HashingProxy public hashingProxy;\n    Identity public identityContract;\n    Staking public stakingContract;\n    IdentityStorage public identityStorage;\n    ParametersStorage public parametersStorage;\n    ProfileStorage public profileStorage;\n    WhitelistStorage public whitelistStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    modifier onlyIdentityOwner(uint72 identityId) {\n        _checkIdentityOwner(identityId);\n        _;\n    }\n\n    modifier onlyAdmin(uint72 identityId) {\n        _checkAdmin(identityId);\n        _;\n    }\n\n    modifier onlyOperational(uint72 identityId) {\n        _checkOperational(identityId);\n        _;\n    }\n\n    modifier onlyWhitelisted() {\n        _checkWhitelist();\n        _;\n    }\n\n    function initialize() public onlyHubOwner {\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        identityContract = Identity(hub.getContractAddress(\"Identity\"));\n        stakingContract = Staking(hub.getContractAddress(\"Staking\"));\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        whitelistStorage = WhitelistStorage(hub.getContractAddress(\"WhitelistStorage\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createProfile(\n        address adminWallet,\n        bytes calldata nodeId,\n        string calldata sharesTokenName,\n        string calldata sharesTokenSymbol\n    ) external onlyWhitelisted {\n        IdentityStorage ids = identityStorage;\n        ProfileStorage ps = profileStorage;\n\n        require(ids.getIdentityId(msg.sender) == 0, \"Identity already exists\");\n        require(nodeId.length != 0, \"Node ID can't be empty\");\n        require(!ps.nodeIdsList(nodeId), \"Node ID is already registered\");\n        require(\n            keccak256(abi.encodePacked(sharesTokenName)) != keccak256(abi.encodePacked(\"\")),\n            \"Token name cannot be empty\"\n        );\n        require(\n            keccak256(abi.encodePacked(sharesTokenSymbol)) != keccak256(abi.encodePacked(\"\")),\n            \"Token symbol cannot be empty\"\n        );\n        require(!ps.sharesNames(sharesTokenName), \"Token name is already taken\");\n        require(!ps.sharesSymbols(sharesTokenSymbol), \"Token symbol is already taken\");\n\n        uint72 identityId = identityContract.createIdentity(msg.sender, adminWallet);\n\n        Shares sharesContract = new Shares(address(hub), sharesTokenName, sharesTokenSymbol);\n\n        ps.createProfile(identityId, nodeId, address(sharesContract));\n        _setAvailableNodeAddresses(identityId);\n\n        emit ProfileCreated(identityId, nodeId);\n    }\n\n    function setAsk(uint72 identityId, uint96 ask) external onlyIdentityOwner(identityId) {\n        require(ask != 0, \"Ask cannot be 0\");\n        ProfileStorage ps = profileStorage;\n        ps.setAsk(identityId, ask);\n\n        emit AskUpdated(identityId, ps.getNodeId(identityId), ask);\n    }\n\n    // function deleteProfile(uint72 identityId) external onlyAdmin(identityId) {\n    //     // TODO: add checks\n    //     profileStorage.deleteProfile(identityId);\n    //     identityContract.deleteIdentity(identityId);\n    //\n    //     emit ProfileDeleted(identityId);\n    // }\n\n    // function changeNodeId(uint72 identityId, bytes calldata nodeId) external onlyOperational(identityId) {\n    //     require(nodeId.length != 0, \"Node ID can't be empty\");\n\n    //     profileStorage.setNodeId(identityId, nodeId);\n    // }\n\n    // function addNewNodeIdHash(uint72 identityId, uint8 hashFunctionId) external onlyOperational(identityId) {\n    //     HashingProxy hp = hashingProxy;\n    //     require(hp.isHashFunction(hashFunctionId), \"Hash function doesn't exist\");\n\n    //     profileStorage.setNodeAddress(\n    //         identityId,\n    //         hashFunctionId,\n    //         hp.callHashFunction(hashFunctionId, profileStorage.getNodeId(identityId))\n    //     );\n    // }\n\n    // TODO: Define where it can be called, change internal modifier\n    function _setAvailableNodeAddresses(uint72 identityId) internal virtual {\n        ProfileStorage ps = profileStorage;\n        HashingProxy hp = hashingProxy;\n\n        bytes memory nodeId = ps.getNodeId(identityId);\n        bytes32 nodeAddress;\n\n        UnorderedIndexableContractDynamicSetLib.Contract[] memory hashFunctions = hp.getAllHashFunctions();\n        uint256 hashFunctionsNumber = hashFunctions.length;\n        uint8 hashFunctionId;\n        for (uint8 i; i < hashFunctionsNumber; ) {\n            hashFunctionId = hashFunctions[i].id;\n            nodeAddress = hp.callHashFunction(hashFunctionId, nodeId);\n            ps.setNodeAddress(identityId, hashFunctionId, nodeAddress);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function stakeAccumulatedOperatorFee(uint72 identityId) external onlyAdmin(identityId) {\n        ProfileStorage ps = profileStorage;\n\n        uint96 accumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\n        require(accumulatedOperatorFee != 0, \"You have no operator fees\");\n\n        ps.setAccumulatedOperatorFee(identityId, 0);\n        stakingContract.addStake(msg.sender, identityId, accumulatedOperatorFee);\n    }\n\n    function startAccumulatedOperatorFeeWithdrawal(uint72 identityId) external onlyAdmin(identityId) {\n        ProfileStorage ps = profileStorage;\n\n        uint96 accumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\n\n        require(accumulatedOperatorFee != 0, \"You have no operator fees\");\n\n        ps.setAccumulatedOperatorFee(identityId, 0);\n        ps.setAccumulatedOperatorFeeWithdrawalAmount(\n            identityId,\n            ps.getAccumulatedOperatorFeeWithdrawalAmount(identityId) + accumulatedOperatorFee\n        );\n        ps.setAccumulatedOperatorFeeWithdrawalTimestamp(\n            identityId,\n            block.timestamp + parametersStorage.stakeWithdrawalDelay()\n        );\n    }\n\n    function withdrawAccumulatedOperatorFee(uint72 identityId) external onlyAdmin(identityId) {\n        ProfileStorage ps = profileStorage;\n\n        uint96 withdrawalAmount = ps.getAccumulatedOperatorFeeWithdrawalAmount(identityId);\n\n        require(withdrawalAmount != 0, \"Withdrawal hasn't been initiated\");\n        require(\n            ps.getAccumulatedOperatorFeeWithdrawalTimestamp(identityId) < block.timestamp,\n            \"Withdrawal period hasn't ended\"\n        );\n\n        ps.setAccumulatedOperatorFeeWithdrawalAmount(identityId, 0);\n        ps.setAccumulatedOperatorFeeWithdrawalTimestamp(identityId, 0);\n        ps.transferAccumulatedOperatorFee(msg.sender, withdrawalAmount);\n    }\n\n    function _checkIdentityOwner(uint72 identityId) internal view virtual {\n        require(\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY) ||\n                identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), OPERATIONAL_KEY),\n            \"Fn can be used only by id owner\"\n        );\n    }\n\n    function _checkAdmin(uint72 identityId) internal view virtual {\n        require(\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\n            \"Admin function\"\n        );\n    }\n\n    function _checkOperational(uint72 identityId) internal view virtual {\n        require(\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), OPERATIONAL_KEY),\n            \"Fn can be called only by oper.\"\n        );\n    }\n\n    function _checkWhitelist() internal view virtual {\n        WhitelistStorage ws = whitelistStorage;\n        if (ws.whitelistingEnabled()) {\n            require(ws.whitelisted(msg.sender), \"Address isn't whitelisted\");\n        }\n    }\n}\n"
    },
    "contracts/ProofManagerV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {Staking} from \"./Staking.sol\";\nimport {AssertionStorage} from \"./storage/AssertionStorage.sol\";\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"./storage/ServiceAgreementStorageProxy.sol\";\nimport {AbstractAsset} from \"./abstract/AbstractAsset.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ServiceAgreementStructsV1} from \"./structs/ServiceAgreementStructsV1.sol\";\nimport {ContentAssetErrors} from \"./errors/assets/ContentAssetErrors.sol\";\nimport {GeneralErrors} from \"./errors/GeneralErrors.sol\";\nimport {ServiceAgreementErrorsV1} from \"./errors/ServiceAgreementErrorsV1.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract ProofManagerV1 is Named, Versioned, ContractStatus, Initializable {\n    event ProofSubmitted(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        bytes keyword,\n        uint8 hashFunctionId,\n        uint16 epoch,\n        uint72 indexed identityId\n    );\n\n    string private constant _NAME = \"ProofManagerV1\";\n    string private constant _VERSION = \"1.0.0\";\n\n    bool[4] public reqs = [false, false, false, false];\n\n    HashingProxy public hashingProxy;\n    Staking public stakingContract;\n    AssertionStorage public assertionStorage;\n    IdentityStorage public identityStorage;\n    ParametersStorage public parametersStorage;\n    ProfileStorage public profileStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        stakingContract = Staking(hub.getContractAddress(\"Staking\"));\n        assertionStorage = AssertionStorage(hub.getContractAddress(\"AssertionStorage\"));\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function isProofWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        uint256 startTime = sasProxy.getAgreementStartTime(agreementId);\n\n        if (startTime == 0) revert ServiceAgreementErrorsV1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                startTime,\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                sasProxy.getAgreementEpochLength(agreementId)\n            );\n\n        uint256 timeNow = block.timestamp;\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n        uint8 proofWindowOffsetPerc = sasProxy.getAgreementProofWindowOffsetPerc(agreementId);\n\n        uint256 proofWindowOffset = (epochLength * proofWindowOffsetPerc) / 100;\n        uint256 proofWindowDuration = (epochLength * parametersStorage.proofWindowDurationPerc()) / 100;\n\n        return (timeNow >= (startTime + epochLength * epoch + proofWindowOffset) &&\n            timeNow < (startTime + epochLength * epoch + proofWindowOffset + proofWindowDuration));\n    }\n\n    function getChallenge(\n        address sender,\n        address assetContract,\n        uint256 tokenId,\n        uint16 epoch\n    ) public view returns (bytes32 assertionId, uint256 challenge) {\n        uint72 identityId = identityStorage.getIdentityId(sender);\n\n        AbstractAsset generalAssetInterface = AbstractAsset(assetContract);\n        assertionId = generalAssetInterface.getLatestAssertionId(tokenId);\n\n        uint256 assertionChunksNumber = assertionStorage.getAssertionChunksNumber(assertionId);\n\n        // blockchash() function only works for last 256 blocks (25.6 min window in case of 6s block time)\n        // TODO: figure out how to achieve randomness\n        return (assertionId, uint256(sha256(abi.encodePacked(epoch, identityId))) % assertionChunksNumber);\n    }\n\n    function sendProof(ServiceAgreementStructsV1.ProofInputArgs calldata args) external {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1.ServiceAgreementDoesntExist(agreementId);\n\n        if (!reqs[0] && !isProofWindowOpen(agreementId, args.epoch)) {\n            uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n            uint256 actualCommitWindowStart = (sasProxy.getAgreementStartTime(agreementId) + args.epoch * epochLength);\n\n            revert ServiceAgreementErrorsV1.ProofWindowClosed(\n                agreementId,\n                args.epoch,\n                actualCommitWindowStart,\n                actualCommitWindowStart + (parametersStorage.commitWindowDurationPerc() * epochLength) / 100,\n                block.timestamp\n            );\n        }\n\n        IdentityStorage ids = identityStorage;\n\n        uint72 identityId = ids.getIdentityId(msg.sender);\n\n        if (\n            !reqs[1] &&\n            (sasProxy.getCommitSubmissionScore(keccak256(abi.encodePacked(agreementId, args.epoch, identityId))) == 0)\n        )\n            revert ServiceAgreementErrorsV1.NodeAlreadyRewarded(\n                agreementId,\n                args.epoch,\n                identityId,\n                profileStorage.getNodeId(identityId)\n            );\n\n        bytes32 nextCommitId = sasProxy.getV1AgreementEpochSubmissionHead(agreementId, args.epoch);\n        uint32 r0 = parametersStorage.r0();\n        uint8 i;\n        while ((identityId != sasProxy.getCommitSubmissionIdentityId(nextCommitId)) && (i < r0)) {\n            nextCommitId = keccak256(\n                abi.encodePacked(agreementId, args.epoch, sasProxy.getCommitSubmissionNextIdentityId(nextCommitId))\n            );\n            unchecked {\n                i++;\n            }\n        }\n\n        if (!reqs[2] && (i >= r0))\n            revert ServiceAgreementErrorsV1.NodeNotAwarded(\n                agreementId,\n                args.epoch,\n                identityId,\n                profileStorage.getNodeId(identityId),\n                i\n            );\n\n        bytes32 merkleRoot;\n        uint256 challenge;\n        (merkleRoot, challenge) = getChallenge(msg.sender, args.assetContract, args.tokenId, args.epoch);\n\n        if (\n            !reqs[3] &&\n            !MerkleProof.verify(args.proof, merkleRoot, keccak256(abi.encodePacked(args.chunkHash, challenge)))\n        )\n            revert ServiceAgreementErrorsV1.WrongMerkleProof(\n                agreementId,\n                args.epoch,\n                identityId,\n                profileStorage.getNodeId(identityId),\n                args.proof,\n                merkleRoot,\n                args.chunkHash,\n                challenge\n            );\n\n        emit ProofSubmitted(\n            args.assetContract,\n            args.tokenId,\n            args.keyword,\n            args.hashFunctionId,\n            args.epoch,\n            identityId\n        );\n\n        uint96 reward = (sasProxy.getAgreementTokenAmount(agreementId) /\n            (sasProxy.getAgreementEpochsNumber(agreementId) - args.epoch + 1) /\n            (r0 - sasProxy.getAgreementRewardedNodesNumber(agreementId, args.epoch)));\n\n        stakingContract.addReward(agreementId, identityId, reward);\n        sasProxy.setAgreementTokenAmount(agreementId, sasProxy.getAgreementTokenAmount(agreementId) - reward);\n        sasProxy.incrementAgreementRewardedNodesNumber(agreementId, args.epoch);\n\n        // To make sure that node already received reward\n        sasProxy.setCommitSubmissionScore(keccak256(abi.encodePacked(agreementId, args.epoch, identityId)), 0);\n    }\n\n    function setReq(uint256 index, bool req) external onlyHubOwner {\n        reqs[index] = req;\n    }\n}\n"
    },
    "contracts/ProofManagerV1U1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {Staking} from \"./Staking.sol\";\nimport {AssertionStorage} from \"./storage/AssertionStorage.sol\";\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"./storage/ServiceAgreementStorageProxy.sol\";\nimport {AbstractAsset} from \"./abstract/AbstractAsset.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ServiceAgreementStructsV1} from \"./structs/ServiceAgreementStructsV1.sol\";\nimport {ContentAssetErrors} from \"./errors/assets/ContentAssetErrors.sol\";\nimport {GeneralErrors} from \"./errors/GeneralErrors.sol\";\nimport {ServiceAgreementErrorsV1U1} from \"./errors/ServiceAgreementErrorsV1U1.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract ProofManagerV1U1 is Named, Versioned, ContractStatus, Initializable {\n    event ProofSubmitted(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        bytes keyword,\n        uint8 hashFunctionId,\n        uint16 epoch,\n        uint256 stateIndex,\n        uint72 indexed identityId\n    );\n\n    string private constant _NAME = \"ProofManagerV1U1\";\n    string private constant _VERSION = \"1.0.0\";\n\n    bool[4] public reqs = [false, false, false, false];\n\n    HashingProxy public hashingProxy;\n    Staking public stakingContract;\n    AssertionStorage public assertionStorage;\n    IdentityStorage public identityStorage;\n    ParametersStorage public parametersStorage;\n    ProfileStorage public profileStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        stakingContract = Staking(hub.getContractAddress(\"Staking\"));\n        assertionStorage = AssertionStorage(hub.getContractAddress(\"AssertionStorage\"));\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function isProofWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        uint256 startTime = sasProxy.getAgreementStartTime(agreementId);\n\n        if (startTime == 0) revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\n                agreementId,\n                startTime,\n                sasProxy.getAgreementEpochsNumber(agreementId),\n                sasProxy.getAgreementEpochLength(agreementId)\n            );\n\n        uint256 timeNow = block.timestamp;\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n        uint8 proofWindowOffsetPerc = sasProxy.getAgreementProofWindowOffsetPerc(agreementId);\n\n        uint256 proofWindowOffset = (epochLength * proofWindowOffsetPerc) / 100;\n        uint256 proofWindowDuration = (epochLength * parametersStorage.proofWindowDurationPerc()) / 100;\n\n        return (timeNow >= (startTime + epochLength * epoch + proofWindowOffset) &&\n            timeNow < (startTime + epochLength * epoch + proofWindowOffset + proofWindowDuration));\n    }\n\n    function getChallenge(\n        address assetContract,\n        uint256 tokenId,\n        uint16 epoch\n    ) public view returns (bytes32 assertionId, uint256 challenge) {\n        return _getChallenge(msg.sender, assetContract, tokenId, epoch);\n    }\n\n    function sendProof(ServiceAgreementStructsV1.ProofInputArgs calldata args) external {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (!sasProxy.serviceAgreementExists(agreementId))\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\n\n        uint256 latestFinalizedStateIndex = AbstractAsset(args.assetContract).getAssertionIdsLength(args.tokenId) - 1;\n\n        if (!reqs[0] && !isProofWindowOpen(agreementId, args.epoch)) {\n            uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\n\n            uint256 actualProofWindowStart = (sasProxy.getAgreementStartTime(agreementId) +\n                args.epoch *\n                epochLength +\n                (sasProxy.getAgreementProofWindowOffsetPerc(agreementId) * epochLength) /\n                100);\n\n            revert ServiceAgreementErrorsV1U1.ProofWindowClosed(\n                agreementId,\n                args.epoch,\n                latestFinalizedStateIndex,\n                actualProofWindowStart,\n                actualProofWindowStart + (parametersStorage.proofWindowDurationPerc() * epochLength) / 100,\n                block.timestamp\n            );\n        }\n\n        IdentityStorage ids = identityStorage;\n\n        uint72 identityId = ids.getIdentityId(msg.sender);\n        bytes32 commitId = keccak256(abi.encodePacked(agreementId, args.epoch, latestFinalizedStateIndex, identityId));\n\n        if (!reqs[1] && (sasProxy.getCommitSubmissionScore(commitId) == 0))\n            revert ServiceAgreementErrorsV1U1.NodeAlreadyRewarded(\n                agreementId,\n                args.epoch,\n                latestFinalizedStateIndex,\n                identityId,\n                profileStorage.getNodeId(identityId)\n            );\n\n        bytes32 nextCommitId = sasProxy.getV1U1AgreementEpochSubmissionHead(\n            agreementId,\n            args.epoch,\n            latestFinalizedStateIndex\n        );\n        uint32 r0 = parametersStorage.r0();\n        uint8 i;\n        while ((identityId != sasProxy.getCommitSubmissionIdentityId(nextCommitId)) && (i < r0)) {\n            nextCommitId = keccak256(\n                abi.encodePacked(\n                    agreementId,\n                    args.epoch,\n                    latestFinalizedStateIndex,\n                    sasProxy.getCommitSubmissionNextIdentityId(nextCommitId)\n                )\n            );\n            unchecked {\n                i++;\n            }\n        }\n\n        if (!reqs[2] && (i >= r0))\n            revert ServiceAgreementErrorsV1U1.NodeNotAwarded(\n                agreementId,\n                args.epoch,\n                latestFinalizedStateIndex,\n                identityId,\n                profileStorage.getNodeId(identityId),\n                i\n            );\n\n        bytes32 merkleRoot;\n        uint256 challenge;\n        (merkleRoot, challenge) = _getChallenge(msg.sender, args.assetContract, args.tokenId, args.epoch);\n\n        if (\n            !reqs[3] &&\n            !MerkleProof.verify(args.proof, merkleRoot, keccak256(abi.encodePacked(args.chunkHash, challenge)))\n        )\n            revert ServiceAgreementErrorsV1U1.WrongMerkleProof(\n                agreementId,\n                args.epoch,\n                latestFinalizedStateIndex,\n                identityId,\n                profileStorage.getNodeId(identityId),\n                args.proof,\n                merkleRoot,\n                args.chunkHash,\n                challenge\n            );\n\n        emit ProofSubmitted(\n            args.assetContract,\n            args.tokenId,\n            args.keyword,\n            args.hashFunctionId,\n            args.epoch,\n            latestFinalizedStateIndex,\n            identityId\n        );\n\n        uint96 reward = (sasProxy.getAgreementTokenAmount(agreementId) /\n            (sasProxy.getAgreementEpochsNumber(agreementId) - args.epoch + 1) /\n            (r0 - sasProxy.getAgreementRewardedNodesNumber(agreementId, args.epoch)));\n\n        stakingContract.addReward(agreementId, identityId, reward);\n        sasProxy.setAgreementTokenAmount(agreementId, sasProxy.getAgreementTokenAmount(agreementId) - reward);\n        sasProxy.incrementAgreementRewardedNodesNumber(agreementId, args.epoch);\n\n        // To make sure that node already received reward\n        sasProxy.setCommitSubmissionScore(commitId, 0);\n    }\n\n    function setReq(uint256 index, bool req) external onlyHubOwner {\n        reqs[index] = req;\n    }\n\n    function _getChallenge(\n        address sender,\n        address assetContract,\n        uint256 tokenId,\n        uint16 epoch\n    ) internal view returns (bytes32 assertionId, uint256 challenge) {\n        uint72 identityId = identityStorage.getIdentityId(sender);\n\n        AbstractAsset generalAssetInterface = AbstractAsset(assetContract);\n        bytes32 latestFinalizedState = generalAssetInterface.getLatestAssertionId(tokenId);\n\n        uint256 assertionChunksNumber = assertionStorage.getAssertionChunksNumber(latestFinalizedState);\n\n        // blockchash() function only works for last 256 blocks (25.6 min window in case of 6s block time)\n        // TODO: figure out how to achieve randomness\n        return (latestFinalizedState, uint256(sha256(abi.encodePacked(epoch, identityId))) % assertionChunksNumber);\n    }\n}\n"
    },
    "contracts/scoring/log2pldsf.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HashingProxy} from \"../HashingProxy.sol\";\nimport {ParametersStorage} from \"../storage/ParametersStorage.sol\";\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Indexable} from \"../interface/Indexable.sol\";\nimport {Initializable} from \"../interface/Initializable.sol\";\nimport {IScoreFunction} from \"../interface/IScoreFunction.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {PRBMathUD60x18} from \"@prb/math/contracts/PRBMathUD60x18.sol\";\n\n// Logarithmic Polynomial Long Division Score Function\ncontract Log2PLDSF is IScoreFunction, Indexable, Named, HubDependent, Initializable {\n    using PRBMathUD60x18 for uint256;\n\n    uint8 private constant _ID = 1;\n    string private constant _NAME = \"Log2PLDSF\";\n\n    HashingProxy public hashingProxy;\n    ParametersStorage public parametersStorage;\n\n    uint256 public distanceMappingCoefficient;\n    uint96 public stakeRangeMax;\n\n    uint32 public multiplier;\n    uint32 public logArgumentConstant;\n    uint32 public a;\n    uint32 public stakeExponent;\n    uint32 public b;\n    uint32 public c;\n    uint32 public distanceExponent;\n    uint32 public d;\n\n    constructor(address hubAddress) HubDependent(hubAddress) {\n        distanceMappingCoefficient = type(uint256).max / 1_000;\n        stakeRangeMax = 200_000;\n\n        multiplier = 10000;\n        logArgumentConstant = 1;\n        a = 1;\n        stakeExponent = 1;\n        b = 0;\n        c = 1;\n        distanceExponent = 2;\n        d = 1;\n    }\n\n    function initialize() public onlyHubOwner {\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n    }\n\n    function id() external pure virtual override returns (uint8) {\n        return _ID;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function calculateScore(uint256 distance, uint96 stake) external view returns (uint40) {\n        uint256 mappedDistance = distance / distanceMappingCoefficient;\n        uint96 mappedStake = stake / (parametersStorage.maximumStake() / stakeRangeMax);\n\n        uint64 coefficient = 1 ether;\n\n        return\n            uint40(\n                (multiplier *\n                    (logArgumentConstant *\n                        coefficient +\n                        (coefficient * (a * (mappedStake ** stakeExponent) + b)) /\n                        (c * (mappedDistance ** distanceExponent) + d)).log2()) / coefficient\n            );\n    }\n\n    function calculateDistance(\n        uint8 hashFunctionId,\n        bytes calldata nodeId,\n        bytes calldata keyword\n    ) external view returns (uint256) {\n        HashingProxy hp = hashingProxy;\n        bytes32 nodeIdHash = hp.callHashFunction(hashFunctionId, nodeId);\n        bytes32 keywordHash = hp.callHashFunction(hashFunctionId, keyword);\n\n        return uint256(nodeIdHash ^ keywordHash);\n    }\n\n    function getParameters()\n        external\n        view\n        returns (uint256 distanceMapCoefficient, uint96 stakeMapCoefficient, uint32[8] memory formulaCoefficients)\n    {\n        return (\n            distanceMappingCoefficient,\n            (parametersStorage.maximumStake() / stakeRangeMax),\n            [multiplier, logArgumentConstant, a, stakeExponent, b, c, distanceExponent, d]\n        );\n    }\n\n    function setDistanceMappingCoefficient(uint256 distanceRangeMax) external onlyHubOwner {\n        distanceMappingCoefficient = type(uint256).max / distanceRangeMax;\n    }\n\n    function setStakeRangeMax(uint96 stakeRangeMax_) external onlyHubOwner {\n        stakeRangeMax = stakeRangeMax_;\n    }\n\n    function setMultiplier(uint32 multiplier_) external onlyHubOwner {\n        multiplier = multiplier_;\n    }\n\n    function setLogArgumentConstant(uint32 logArgumentConstant_) external onlyHubOwner {\n        logArgumentConstant = logArgumentConstant_;\n    }\n\n    function setA(uint32 a_) external onlyHubOwner {\n        a = a_;\n    }\n\n    function setStakeExponent(uint32 stakeExponent_) external onlyHubOwner {\n        stakeExponent = stakeExponent_;\n    }\n\n    function setB(uint32 b_) external onlyHubOwner {\n        b = b_;\n    }\n\n    function setC(uint32 c_) external onlyHubOwner {\n        c = c_;\n    }\n\n    function setDistanceExponent(uint32 distanceExponent_) external onlyHubOwner {\n        distanceExponent = distanceExponent_;\n    }\n\n    function setD(uint32 d_) external onlyHubOwner {\n        d = d_;\n    }\n}\n"
    },
    "contracts/ScoringProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {IScoreFunction} from \"./interface/IScoreFunction.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {UnorderedIndexableContractDynamicSetLib} from \"./utils/UnorderedIndexableContractDynamicSet.sol\";\n\ncontract ScoringProxy is Named, Versioned, ContractStatus {\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\n\n    event NewScoringFunctionContract(uint8 indexed scoreFunctionId, address newContractAddress);\n    event ScoringFunctionContractUpdated(uint8 indexed scoreFunctionId, address newContractAddress);\n\n    string private constant _NAME = \"ScoringProxy\";\n    string private constant _VERSION = \"1.0.1\";\n\n    UnorderedIndexableContractDynamicSetLib.Set internal scoreFunctionSet;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function setContractAddress(uint8 scoreFunctionId, address scoringContractAddress) external onlyHubOwner {\n        if (scoreFunctionSet.exists(scoreFunctionId)) {\n            emit ScoringFunctionContractUpdated(scoreFunctionId, scoringContractAddress);\n            scoreFunctionSet.update(scoreFunctionId, scoringContractAddress);\n        } else {\n            emit NewScoringFunctionContract(scoreFunctionId, scoringContractAddress);\n            scoreFunctionSet.append(scoreFunctionId, scoringContractAddress);\n        }\n    }\n\n    function removeContract(uint8 scoreFunctionId) external onlyHubOwner {\n        scoreFunctionSet.remove(scoreFunctionId);\n    }\n\n    function callScoreFunction(\n        uint8 scoreFunctionId,\n        uint8 hashFunctionId,\n        bytes calldata nodeId,\n        bytes calldata keyword,\n        uint96 stake\n    ) external view returns (uint40) {\n        IScoreFunction scoringFunction = IScoreFunction(scoreFunctionSet.get(scoreFunctionId).addr);\n        uint256 distance = scoringFunction.calculateDistance(hashFunctionId, nodeId, keyword);\n        return scoringFunction.calculateScore(distance, stake);\n    }\n\n    function getScoreFunctionName(uint8 scoreFunctionId) external view returns (string memory) {\n        return Named(scoreFunctionSet.get(scoreFunctionId).addr).name();\n    }\n\n    function getScoreFunctionContractAddress(uint8 scoreFunctionId) external view returns (address) {\n        return scoreFunctionSet.get(scoreFunctionId).addr;\n    }\n\n    function getAllScoreFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\n        return scoreFunctionSet.getAll();\n    }\n\n    function isScoreFunction(uint8 scoreFunctionId) external view returns (bool) {\n        return scoreFunctionSet.exists(scoreFunctionId);\n    }\n}\n"
    },
    "contracts/ServiceAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {CommitManagerV1} from \"./CommitManagerV1.sol\";\nimport {CommitManagerV1U1} from \"./CommitManagerV1U1.sol\";\nimport {HashingProxy} from \"./HashingProxy.sol\";\nimport {ProofManagerV1} from \"./ProofManagerV1.sol\";\nimport {ProofManagerV1U1} from \"./ProofManagerV1U1.sol\";\nimport {ScoringProxy} from \"./ScoringProxy.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"./storage/ServiceAgreementStorageProxy.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ServiceAgreementStructsV1} from \"./structs/ServiceAgreementStructsV1.sol\";\nimport {GeneralErrors} from \"./errors/GeneralErrors.sol\";\nimport {ServiceAgreementErrorsV1U1} from \"./errors/ServiceAgreementErrorsV1U1.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract ServiceAgreementV1 is Named, Versioned, ContractStatus, Initializable {\n    event ServiceAgreementV1Created(\n        address indexed assetContract,\n        uint256 indexed tokenId,\n        bytes keyword,\n        uint8 hashFunctionId,\n        uint256 startTime,\n        uint16 epochsNumber,\n        uint128 epochLength,\n        uint96 tokenAmount\n    );\n    event ServiceAgreementV1Terminated(bytes32 indexed agreementId);\n    event ServiceAgreementV1Extended(bytes32 indexed agreementId, uint16 epochsNumber);\n    event ServiceAgreementV1RewardRaised(bytes32 indexed agreementId, uint96 tokenAmount);\n    event ServiceAgreementV1UpdateRewardRaised(bytes32 indexed agreementId, uint96 updateTokenAmount);\n\n    string private constant _NAME = \"ServiceAgreementV1\";\n    string private constant _VERSION = \"1.1.1\";\n\n    CommitManagerV1 public commitManagerV1;\n    CommitManagerV1U1 public commitManagerV1U1;\n    ProofManagerV1 public proofManagerV1;\n    ProofManagerV1U1 public proofManagerV1U1;\n    HashingProxy public hashingProxy;\n    ScoringProxy public scoringProxy;\n    ParametersStorage public parametersStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n    IERC20 public tokenContract;\n\n    error ScoreError();\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        commitManagerV1 = CommitManagerV1(hub.getContractAddress(\"CommitManagerV1\"));\n        commitManagerV1U1 = CommitManagerV1U1(hub.getContractAddress(\"CommitManagerV1U1\"));\n        proofManagerV1 = ProofManagerV1(hub.getContractAddress(\"ProofManagerV1\"));\n        proofManagerV1U1 = ProofManagerV1U1(hub.getContractAddress(\"ProofManagerV1U1\"));\n        hashingProxy = HashingProxy(hub.getContractAddress(\"HashingProxy\"));\n        scoringProxy = ScoringProxy(hub.getContractAddress(\"ScoringProxy\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n        tokenContract = IERC20(hub.getContractAddress(\"Token\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createServiceAgreement(\n        ServiceAgreementStructsV1.ServiceAgreementInputArgs calldata args\n    ) external onlyContracts {\n        if (args.epochsNumber == 0) revert ServiceAgreementErrorsV1U1.ZeroEpochsNumber();\n        if (args.tokenAmount == 0) revert ServiceAgreementErrorsV1U1.ZeroTokenAmount();\n        if (!scoringProxy.isScoreFunction(args.scoreFunctionId))\n            revert ServiceAgreementErrorsV1U1.ScoreFunctionDoesntExist(args.scoreFunctionId);\n\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        ParametersStorage params = parametersStorage;\n\n        sasProxy.createV1ServiceAgreementObject(\n            agreementId,\n            args.epochsNumber,\n            params.epochLength(),\n            args.tokenAmount,\n            args.scoreFunctionId,\n            params.minProofWindowOffsetPerc() +\n                _generatePseudorandomUint8(\n                    args.assetCreator,\n                    params.maxProofWindowOffsetPerc() - params.minProofWindowOffsetPerc() + 1\n                )\n        );\n\n        IERC20 tknc = tokenContract;\n        if (tknc.allowance(args.assetCreator, address(this)) < args.tokenAmount)\n            revert ServiceAgreementErrorsV1U1.TooLowAllowance(tknc.allowance(args.assetCreator, address(this)));\n        if (tknc.balanceOf(args.assetCreator) < args.tokenAmount)\n            revert ServiceAgreementErrorsV1U1.TooLowBalance(tknc.balanceOf(args.assetCreator));\n\n        tknc.transferFrom(args.assetCreator, sasProxy.agreementV1StorageAddress(), args.tokenAmount);\n\n        emit ServiceAgreementV1Created(\n            args.assetContract,\n            args.tokenId,\n            args.keyword,\n            args.hashFunctionId,\n            block.timestamp,\n            args.epochsNumber,\n            params.epochLength(),\n            args.tokenAmount\n        );\n    }\n\n    function terminateAgreement(address assetOwner, bytes32 agreementId) external onlyContracts {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        uint96 agreementBalance = sasProxy.getAgreementTokenAmount(agreementId);\n\n        sasProxy.setAgreementTokenAmount(agreementId, 0);\n        sasProxy.transferAgreementTokens(agreementId, assetOwner, agreementBalance);\n        sasProxy.deleteServiceAgreementObject(agreementId);\n\n        emit ServiceAgreementV1Terminated(agreementId);\n    }\n\n    function extendStoringPeriod(\n        address assetOwner,\n        bytes32 agreementId,\n        uint16 epochsNumber,\n        uint96 tokenAmount\n    ) external onlyContracts {\n        if (epochsNumber == 0) revert ServiceAgreementErrorsV1U1.ZeroEpochsNumber();\n\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        sasProxy.setAgreementEpochsNumber(agreementId, sasProxy.getAgreementEpochsNumber(agreementId) + epochsNumber);\n        sasProxy.setAgreementTokenAmount(agreementId, sasProxy.getAgreementTokenAmount(agreementId) + tokenAmount);\n\n        if (sasProxy.agreementV1Exists(agreementId)) {\n            _addTokens(assetOwner, sasProxy.agreementV1StorageAddress(), tokenAmount);\n        } else {\n            _addTokens(assetOwner, sasProxy.agreementV1U1StorageAddress(), tokenAmount);\n        }\n\n        emit ServiceAgreementV1Extended(agreementId, epochsNumber);\n    }\n\n    function addTokens(address assetOwner, bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        sasProxy.setAgreementTokenAmount(agreementId, sasProxy.getAgreementTokenAmount(agreementId) + tokenAmount);\n\n        if (sasProxy.agreementV1Exists(agreementId)) {\n            _addTokens(assetOwner, sasProxy.agreementV1StorageAddress(), tokenAmount);\n        } else {\n            _addTokens(assetOwner, sasProxy.agreementV1U1StorageAddress(), tokenAmount);\n        }\n\n        emit ServiceAgreementV1RewardRaised(agreementId, tokenAmount);\n    }\n\n    function addUpdateTokens(address assetOwner, bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n\n        sasProxy.setAgreementUpdateTokenAmount(\n            agreementId,\n            sasProxy.getAgreementUpdateTokenAmount(agreementId) + tokenAmount\n        );\n\n        _addTokens(assetOwner, sasProxy.agreementV1U1StorageAddress(), tokenAmount);\n\n        emit ServiceAgreementV1UpdateRewardRaised(agreementId, tokenAmount);\n    }\n\n    function isCommitWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\n        if (serviceAgreementStorageProxy.agreementV1Exists(agreementId)) {\n            return commitManagerV1.isCommitWindowOpen(agreementId, epoch);\n        } else {\n            return commitManagerV1U1.isCommitWindowOpen(agreementId, epoch);\n        }\n    }\n\n    function getTopCommitSubmissions(\n        bytes32 agreementId,\n        uint16 epoch\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission[] memory) {\n        if (serviceAgreementStorageProxy.agreementV1Exists(agreementId)) {\n            return commitManagerV1.getTopCommitSubmissions(agreementId, epoch);\n        } else {\n            return commitManagerV1U1.getTopCommitSubmissions(agreementId, epoch, 0);\n        }\n    }\n\n    function submitCommit(ServiceAgreementStructsV1.CommitInputArgs calldata args) external {\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (serviceAgreementStorageProxy.agreementV1Exists(agreementId)) {\n            commitManagerV1.submitCommit(args);\n        } else {\n            commitManagerV1U1.submitCommit(args);\n        }\n    }\n\n    function isProofWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\n        if (serviceAgreementStorageProxy.agreementV1Exists(agreementId)) {\n            return proofManagerV1.isProofWindowOpen(agreementId, epoch);\n        } else {\n            return proofManagerV1U1.isProofWindowOpen(agreementId, epoch);\n        }\n    }\n\n    function getChallenge(\n        address sender,\n        address assetContract,\n        uint256 tokenId,\n        uint16 epoch\n    ) public view returns (bytes32 assertionId, uint256 challenge) {\n        return proofManagerV1.getChallenge(sender, assetContract, tokenId, epoch);\n    }\n\n    function sendProof(ServiceAgreementStructsV1.ProofInputArgs calldata args) external {\n        bytes32 agreementId = hashingProxy.callHashFunction(\n            args.hashFunctionId,\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\n        );\n\n        if (serviceAgreementStorageProxy.agreementV1Exists(agreementId)) {\n            proofManagerV1.sendProof(args);\n        } else {\n            proofManagerV1U1.sendProof(args);\n        }\n    }\n\n    function _addTokens(address assetOwner, address sasAddress, uint96 tokenAmount) internal virtual {\n        if (tokenAmount == 0) revert ServiceAgreementErrorsV1U1.ZeroTokenAmount();\n\n        IERC20 tknc = tokenContract;\n\n        if (tknc.allowance(assetOwner, address(this)) < tokenAmount)\n            revert ServiceAgreementErrorsV1U1.TooLowAllowance(tknc.allowance(assetOwner, address(this)));\n        if (tknc.balanceOf(assetOwner) < tokenAmount)\n            revert ServiceAgreementErrorsV1U1.TooLowBalance(tknc.balanceOf(assetOwner));\n\n        tknc.transferFrom(assetOwner, sasAddress, tokenAmount);\n    }\n\n    function _generatePseudorandomUint8(address sender, uint8 limit) internal view virtual returns (uint8) {\n        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, sender, block.number))) % limit);\n    }\n}\n"
    },
    "contracts/ShardingTable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {ShardingTableStorage} from \"./storage/ShardingTableStorage.sol\";\nimport {StakingStorage} from \"./storage/StakingStorage.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ShardingTableStructs} from \"./structs/ShardingTableStructs.sol\";\nimport {NULL} from \"./constants/ShardingTableConstants.sol\";\n\ncontract ShardingTable is Named, Versioned, ContractStatus, Initializable {\n    event NodeAdded(uint72 indexed identityId, bytes nodeId, uint96 ask, uint96 stake);\n    event NodeRemoved(uint72 indexed identityId, bytes nodeId);\n\n    string private constant _NAME = \"ShardingTable\";\n    string private constant _VERSION = \"1.0.1\";\n\n    ProfileStorage public profileStorage;\n    ShardingTableStorage public shardingTableStorage;\n    StakingStorage public stakingStorage;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\"ShardingTableStorage\"));\n        stakingStorage = StakingStorage(hub.getContractAddress(\"StakingStorage\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function getShardingTable(\n        uint72 startingIdentityId,\n        uint72 nodesNumber\n    ) external view returns (ShardingTableStructs.NodeInfo[] memory) {\n        return _getShardingTable(startingIdentityId, nodesNumber);\n    }\n\n    function getShardingTable() external view returns (ShardingTableStructs.NodeInfo[] memory) {\n        ShardingTableStorage sts = shardingTableStorage;\n        return _getShardingTable(sts.head(), sts.nodesCount());\n    }\n\n    function pushBack(uint72 identityId) external onlyContracts {\n        ProfileStorage ps = profileStorage;\n        require(ps.profileExists(identityId), \"Profile doesn't exist\");\n\n        ShardingTableStorage sts = shardingTableStorage;\n\n        sts.createNodeObject(identityId, NULL, NULL);\n\n        if (sts.tail() != NULL) sts.link(sts.tail(), identityId);\n\n        sts.setTail(identityId);\n\n        if (sts.head() == NULL) sts.setHead(identityId);\n\n        sts.incrementNodesCount();\n\n        emit NodeAdded(\n            identityId,\n            ps.getNodeId(identityId),\n            ps.getAsk(identityId),\n            stakingStorage.totalStakes(identityId)\n        );\n    }\n\n    function pushFront(uint72 identityId) external onlyContracts {\n        ProfileStorage ps = profileStorage;\n        require(ps.profileExists(identityId), \"Profile doesn't exist\");\n\n        ShardingTableStorage sts = shardingTableStorage;\n\n        sts.createNodeObject(identityId, NULL, NULL);\n\n        if (sts.head() != NULL) sts.link(identityId, sts.head());\n\n        shardingTableStorage.setHead(identityId);\n\n        if (sts.tail() == NULL) sts.setTail(identityId);\n\n        sts.incrementNodesCount();\n\n        emit NodeAdded(\n            identityId,\n            ps.getNodeId(identityId),\n            ps.getAsk(identityId),\n            stakingStorage.totalStakes(identityId)\n        );\n    }\n\n    function removeNode(uint72 identityId) external onlyContracts {\n        ProfileStorage ps = profileStorage;\n        require(ps.profileExists(identityId), \"Profile doesn't exist\");\n\n        ShardingTableStorage sts = shardingTableStorage;\n\n        ShardingTableStructs.Node memory nodeToRemove = sts.getNode(identityId);\n\n        uint72 head = sts.head();\n        uint72 tail = sts.tail();\n\n        if ((head == identityId) && (tail == identityId)) {\n            sts.setHead(NULL);\n            sts.setTail(NULL);\n        } else if (tail == identityId) {\n            sts.setTail(nodeToRemove.prevIdentityId);\n            sts.setNextIdentityId(tail, NULL);\n        } else if (head == identityId) {\n            sts.setHead(nodeToRemove.nextIdentityId);\n            sts.setPrevIdentityId(head, NULL);\n        } else {\n            sts.link(nodeToRemove.prevIdentityId, nodeToRemove.nextIdentityId);\n        }\n\n        sts.deleteNodeObject(identityId);\n        sts.decrementNodesCount();\n\n        emit NodeRemoved(identityId, ps.getNodeId(identityId));\n    }\n\n    function _getShardingTable(\n        uint72 startingIdentityId,\n        uint72 nodesNumber\n    ) internal view virtual returns (ShardingTableStructs.NodeInfo[] memory) {\n        ShardingTableStructs.NodeInfo[] memory nodesPage;\n        ShardingTableStorage sts = shardingTableStorage;\n\n        if ((sts.nodesCount() == 0) || (nodesNumber == 0)) {\n            return nodesPage;\n        }\n\n        ShardingTableStructs.Node memory startingNode = sts.getNode(startingIdentityId);\n\n        require((startingIdentityId == NULL) || (startingNode.identityId != NULL), \"Wrong starting Identity ID\");\n\n        nodesPage = new ShardingTableStructs.NodeInfo[](nodesNumber);\n\n        ProfileStorage ps = profileStorage;\n        StakingStorage ss = stakingStorage;\n\n        nodesPage[0] = ShardingTableStructs.NodeInfo({\n            nodeId: ps.getNodeId(startingIdentityId),\n            identityId: startingIdentityId,\n            ask: ps.getAsk(startingNode.identityId),\n            stake: ss.totalStakes(startingNode.identityId)\n        });\n\n        uint72 nextIdentityId = startingIdentityId;\n        uint72 i = 1;\n        while ((i < nodesNumber) && (nextIdentityId != NULL)) {\n            nextIdentityId = sts.getNode(nextIdentityId).nextIdentityId;\n\n            nodesPage[i] = ShardingTableStructs.NodeInfo({\n                nodeId: ps.getNodeId(nextIdentityId),\n                identityId: nextIdentityId,\n                ask: ps.getAsk(nextIdentityId),\n                stake: ss.totalStakes(nextIdentityId)\n            });\n\n            unchecked {\n                i += 1;\n            }\n        }\n\n        return nodesPage;\n    }\n}\n"
    },
    "contracts/Shares.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"./abstract/HubDependent.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract Shares is HubDependent, ERC20, ERC20Burnable {\n    constructor(\n        address hubAddress,\n        string memory name,\n        string memory symbol\n    )\n        HubDependent(hubAddress)\n        ERC20(name, symbol) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function mint(address to, uint256 amount) external onlyContracts {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {ShardingTable} from \"./ShardingTable.sol\";\nimport {Shares} from \"./Shares.sol\";\nimport {IdentityStorage} from \"./storage/IdentityStorage.sol\";\nimport {ParametersStorage} from \"./storage/ParametersStorage.sol\";\nimport {ProfileStorage} from \"./storage/ProfileStorage.sol\";\nimport {ServiceAgreementStorageProxy} from \"./storage/ServiceAgreementStorageProxy.sol\";\nimport {ShardingTableStorage} from \"./storage/ShardingTableStorage.sol\";\nimport {StakingStorage} from \"./storage/StakingStorage.sol\";\nimport {ContractStatus} from \"./abstract/ContractStatus.sol\";\nimport {Initializable} from \"./interface/Initializable.sol\";\nimport {Named} from \"./interface/Named.sol\";\nimport {Versioned} from \"./interface/Versioned.sol\";\nimport {ADMIN_KEY} from \"./constants/IdentityConstants.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Staking is Named, Versioned, ContractStatus, Initializable {\n    event StakeIncreased(\n        uint72 indexed identityId,\n        bytes nodeId,\n        address indexed staker,\n        uint96 oldStake,\n        uint96 newStake\n    );\n    event StakeWithdrawalStarted(\n        uint72 indexed identityId,\n        bytes nodeId,\n        address indexed staker,\n        uint96 oldStake,\n        uint96 newStake,\n        uint256 withdrawalPeriodEnd\n    );\n    event StakeWithdrawn(uint72 indexed identityId, bytes nodeId, address indexed staker, uint96 withdrawnStakeAmount);\n    event AccumulatedOperatorFeeIncreased(\n        uint72 indexed identityId,\n        bytes nodeId,\n        uint96 oldAccumulatedOperatorFee,\n        uint96 newAccumulatedOperatorFee\n    );\n    event OperatorFeeUpdated(uint72 indexed identityId, bytes nodeId, uint8 operatorFee);\n\n    string private constant _NAME = \"Staking\";\n    string private constant _VERSION = \"1.0.2\";\n\n    ShardingTable public shardingTableContract;\n    IdentityStorage public identityStorage;\n    ParametersStorage public parametersStorage;\n    ProfileStorage public profileStorage;\n    StakingStorage public stakingStorage;\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\n    ShardingTableStorage public shardingTableStorage;\n    IERC20 public tokenContract;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\n\n    modifier onlyAdmin(uint72 identityId) {\n        _checkAdmin(identityId);\n        _;\n    }\n\n    function initialize() public onlyHubOwner {\n        shardingTableContract = ShardingTable(hub.getContractAddress(\"ShardingTable\"));\n        identityStorage = IdentityStorage(hub.getContractAddress(\"IdentityStorage\"));\n        parametersStorage = ParametersStorage(hub.getContractAddress(\"ParametersStorage\"));\n        profileStorage = ProfileStorage(hub.getContractAddress(\"ProfileStorage\"));\n        stakingStorage = StakingStorage(hub.getContractAddress(\"StakingStorage\"));\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\n            hub.getContractAddress(\"ServiceAgreementStorageProxy\")\n        );\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\"ShardingTableStorage\"));\n        tokenContract = IERC20(hub.getContractAddress(\"Token\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function addStake(address sender, uint72 identityId, uint96 stakeAmount) external onlyContracts {\n        _addStake(sender, identityId, stakeAmount);\n    }\n\n    function addStake(uint72 identityId, uint96 stakeAmount) external onlyAdmin(identityId) {\n        _addStake(msg.sender, identityId, stakeAmount);\n    }\n\n    function startStakeWithdrawal(uint72 identityId, uint96 sharesToBurn) external {\n        require(sharesToBurn != 0, \"Withdrawal amount cannot be 0\");\n\n        ProfileStorage ps = profileStorage;\n        StakingStorage ss = stakingStorage;\n\n        require(ps.profileExists(identityId), \"Profile doesn't exist\");\n\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\n\n        require(sharesToBurn <= sharesContract.balanceOf(msg.sender), \"sharesToBurn must be <= balance\");\n\n        uint96 oldStake = ss.totalStakes(identityId);\n        uint96 stakeWithdrawalAmount = uint96((uint256(oldStake) * sharesToBurn) / sharesContract.totalSupply());\n        uint96 newStake = oldStake - stakeWithdrawalAmount;\n        uint96 newStakeWithdrawalAmount = ss.getWithdrawalRequestAmount(identityId, msg.sender) + stakeWithdrawalAmount;\n\n        ParametersStorage params = parametersStorage;\n\n        uint256 withdrawalPeriodEnd = block.timestamp + params.stakeWithdrawalDelay();\n        ss.createWithdrawalRequest(identityId, msg.sender, newStakeWithdrawalAmount, withdrawalPeriodEnd);\n        ss.setTotalStake(identityId, newStake);\n        sharesContract.burnFrom(msg.sender, sharesToBurn);\n\n        if (shardingTableStorage.nodeExists(identityId) && (newStake < params.minimumStake())) {\n            shardingTableContract.removeNode(identityId);\n        }\n\n        emit StakeWithdrawalStarted(\n            identityId,\n            ps.getNodeId(identityId),\n            msg.sender,\n            oldStake,\n            newStake,\n            withdrawalPeriodEnd\n        );\n    }\n\n    function withdrawStake(uint72 identityId) external {\n        ProfileStorage ps = profileStorage;\n\n        require(ps.profileExists(identityId), \"Profile doesn't exist\");\n\n        StakingStorage ss = stakingStorage;\n\n        uint96 stakeWithdrawalAmount;\n        uint256 withdrawalTimestamp;\n        (stakeWithdrawalAmount, withdrawalTimestamp) = ss.withdrawalRequests(identityId, msg.sender);\n\n        require(stakeWithdrawalAmount != 0, \"Withdrawal hasn't been initiated\");\n        require(withdrawalTimestamp < block.timestamp, \"Withdrawal period hasn't ended\");\n\n        ss.deleteWithdrawalRequest(identityId, msg.sender);\n        ss.transferStake(msg.sender, stakeWithdrawalAmount);\n\n        emit StakeWithdrawn(identityId, ps.getNodeId(identityId), msg.sender, stakeWithdrawalAmount);\n    }\n\n    function addReward(bytes32 agreementId, uint72 identityId, uint96 rewardAmount) external onlyContracts {\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\n        StakingStorage ss = stakingStorage;\n\n        uint96 operatorFee = (rewardAmount * ss.operatorFees(identityId)) / 100;\n        uint96 delegatorsReward = rewardAmount - operatorFee;\n\n        ProfileStorage ps = profileStorage;\n\n        uint96 oldAccumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\n        uint96 oldStake = ss.totalStakes(identityId);\n\n        if (operatorFee != 0) {\n            ps.setAccumulatedOperatorFee(identityId, oldAccumulatedOperatorFee + operatorFee);\n            sasProxy.transferAgreementTokens(agreementId, address(ps), operatorFee);\n        }\n\n        if (delegatorsReward != 0) {\n            ss.setTotalStake(identityId, oldStake + delegatorsReward);\n            sasProxy.transferAgreementTokens(agreementId, address(ss), delegatorsReward);\n\n            if (!shardingTableStorage.nodeExists(identityId) && oldStake >= parametersStorage.minimumStake()) {\n                shardingTableContract.pushBack(identityId);\n            }\n        }\n\n        emit AccumulatedOperatorFeeIncreased(\n            identityId,\n            ps.getNodeId(identityId),\n            oldAccumulatedOperatorFee,\n            oldAccumulatedOperatorFee + operatorFee\n        );\n\n        address sasAddress;\n        if (sasProxy.agreementV1Exists(agreementId)) {\n            sasAddress = sasProxy.agreementV1StorageAddress();\n        } else {\n            sasAddress = sasProxy.agreementV1U1StorageAddress();\n        }\n\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sasAddress, oldStake, oldStake + delegatorsReward);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function slash(uint72 identityId) external onlyContracts {\n        // TBD\n    }\n\n    function setOperatorFee(uint72 identityId, uint8 operatorFee) external onlyAdmin(identityId) {\n        require(operatorFee <= 100, \"Operator fee out of [0, 100]\");\n        stakingStorage.setOperatorFee(identityId, operatorFee);\n\n        emit OperatorFeeUpdated(identityId, profileStorage.getNodeId(identityId), operatorFee);\n    }\n\n    function _addStake(address sender, uint72 identityId, uint96 stakeAmount) internal virtual {\n        StakingStorage ss = stakingStorage;\n        ProfileStorage ps = profileStorage;\n        ParametersStorage params = parametersStorage;\n        IERC20 tknc = tokenContract;\n\n        uint96 oldStake = ss.totalStakes(identityId);\n        uint96 newStake = oldStake + stakeAmount;\n\n        require(ps.profileExists(identityId), \"Profile doesn't exist\");\n        require(tknc.allowance(sender, address(this)) >= stakeAmount, \"Allowance < stakeAmount\");\n        require(newStake <= params.maximumStake(), \"Exceeded the maximum stake\");\n\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\n\n        uint256 sharesMinted;\n        if (sharesContract.totalSupply() == 0) {\n            sharesMinted = stakeAmount;\n        } else {\n            sharesMinted = ((stakeAmount * sharesContract.totalSupply()) / oldStake);\n        }\n        sharesContract.mint(sender, sharesMinted);\n\n        ss.setTotalStake(identityId, newStake);\n        tknc.transferFrom(sender, address(ss), stakeAmount);\n\n        if (!shardingTableStorage.nodeExists(identityId) && newStake >= params.minimumStake()) {\n            shardingTableContract.pushBack(identityId);\n        }\n\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sender, oldStake, newStake);\n    }\n\n    function _checkAdmin(uint72 identityId) internal view virtual {\n        require(\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\n            \"Admin function\"\n        );\n    }\n}\n"
    },
    "contracts/storage/AssertionStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {AssertionStructs} from \"../structs/AssertionStructs.sol\";\n\ncontract AssertionStorage is Named, Versioned, HubDependent {\n    string private constant _NAME = \"AssertionStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    // assertionId => Assertion\n    mapping(bytes32 => AssertionStructs.Assertion) internal assertions;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createAssertion(\n        bytes32 assertionId,\n        uint128 size,\n        uint32 triplesNumber,\n        uint96 chunksNumber\n    ) external onlyContracts {\n        assertions[assertionId] = AssertionStructs.Assertion({\n            timestamp: block.timestamp,\n            size: size,\n            triplesNumber: triplesNumber,\n            chunksNumber: chunksNumber\n        });\n    }\n\n    function deleteAssertion(bytes32 assertionId) external onlyContracts {\n        delete assertions[assertionId];\n    }\n\n    function getAssertion(bytes32 assertionId) external view returns (AssertionStructs.Assertion memory) {\n        return assertions[assertionId];\n    }\n\n    function getAssertionTimestamp(bytes32 assertionId) external view returns (uint256) {\n        return assertions[assertionId].timestamp;\n    }\n\n    function getAssertionSize(bytes32 assertionId) external view returns (uint128) {\n        return assertions[assertionId].size;\n    }\n\n    function getAssertionTriplesNumber(bytes32 assertionId) external view returns (uint32) {\n        return assertions[assertionId].triplesNumber;\n    }\n\n    function getAssertionChunksNumber(bytes32 assertionId) external view returns (uint96) {\n        return assertions[assertionId].chunksNumber;\n    }\n\n    function assertionExists(bytes32 assertionId) external view returns (bool) {\n        return assertions[assertionId].timestamp != 0;\n    }\n}\n"
    },
    "contracts/storage/assets/ContentAssetStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {AbstractAsset} from \"../../abstract/AbstractAsset.sol\";\nimport {Named} from \"../../interface/Named.sol\";\nimport {ContentAssetStructs} from \"../../structs/assets/ContentAssetStructs.sol\";\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract ContentAssetStorage is AbstractAsset, ERC721 {\n    string private constant _NAME = \"ContentAssetStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    uint256 private _tokenId;\n\n    // tokenId => Asset\n    mapping(uint256 => ContentAssetStructs.Asset) internal assets;\n\n    // keccak256(tokenId + assertionId + assertionIdIndex) => issuer\n    mapping(bytes32 => address) public issuers;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) AbstractAsset(hubAddress) ERC721(\"ContentAssetStorage\", \"DKG\") {}\n\n    function name() public view override(Named, ERC721) returns (string memory) {\n        return ERC721.name();\n    }\n\n    function version() external pure override returns (string memory) {\n        return _VERSION;\n    }\n\n    function mint(address to, uint256 tokenId) external onlyContracts {\n        _mint(to, tokenId);\n    }\n\n    function burn(uint256 tokenId) external onlyContracts {\n        _burn(tokenId);\n    }\n\n    function generateTokenId() external onlyContracts returns (uint256) {\n        unchecked {\n            return _tokenId++;\n        }\n    }\n\n    function deleteAsset(uint256 tokenId) external onlyContracts {\n        bytes32[] memory assertionIds = assets[tokenId].assertionIds;\n        uint256 assertionIdsLength = assertionIds.length;\n\n        for (uint256 i; i < assertionIdsLength; ) {\n            delete issuers[_generateAssetAssertionId(tokenId, assertionIds[i], i)];\n            unchecked {\n                i++;\n            }\n        }\n\n        delete assets[tokenId];\n    }\n\n    function getAsset(uint256 tokenId) external view returns (ContentAssetStructs.Asset memory) {\n        return assets[tokenId];\n    }\n\n    function setMutability(uint256 tokenId, bool immutable_) external onlyContracts {\n        assets[tokenId].immutable_ = immutable_;\n    }\n\n    function isMutable(uint256 tokenId) external view returns (bool) {\n        return !assets[tokenId].immutable_;\n    }\n\n    function pushAssertionId(uint256 tokenId, bytes32 assertionId) external onlyContracts {\n        assets[tokenId].assertionIds.push(assertionId);\n    }\n\n    function getAssertionIds(uint256 tokenId) public view override returns (bytes32[] memory) {\n        return assets[tokenId].assertionIds;\n    }\n\n    function setAssertionIssuer(uint256 tokenId, bytes32 assertionId, address issuer) external onlyContracts {\n        issuers[_generateAssetAssertionId(tokenId, assertionId, this.getAssertionIdsLength(tokenId))] = issuer;\n    }\n\n    function deleteAssertionIssuer(uint256 tokenId, bytes32 assertionId, uint256 index) external onlyContracts {\n        delete issuers[_generateAssetAssertionId(tokenId, assertionId, index)];\n    }\n\n    function getAssertionIssuer(\n        uint256 tokenId,\n        bytes32 assertionId,\n        uint256 assertionIndex\n    ) external view returns (address) {\n        return issuers[keccak256(abi.encodePacked(tokenId, assertionId, assertionIndex))];\n    }\n\n    function assertionExists(bytes32 assetAssertionId) external view returns (bool) {\n        return issuers[assetAssertionId] != address(0);\n    }\n\n    function _generateAssetAssertionId(\n        uint256 tokenId,\n        bytes32 assertionId,\n        uint256 index\n    ) internal pure virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(tokenId, assertionId, index));\n    }\n}\n"
    },
    "contracts/storage/IdentityStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {IERC734Extended} from \"../interface/IERC734Extended.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {ByteArr} from \"../utils/ByteArr.sol\";\nimport {OPERATIONAL_KEY} from \"../constants/IdentityConstants.sol\";\n\ncontract IdentityStorage is IERC734Extended, Named, Versioned, HubDependent {\n    using ByteArr for bytes32[];\n\n    string private constant _NAME = \"IdentityStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    uint72 private _identityId;\n\n    struct Identity {\n        mapping(bytes32 => Key) keys;\n        mapping(uint256 => bytes32[]) keysByPurpose;\n    }\n\n    // operationalKey => identityId\n    mapping(bytes32 => uint72) public identityIds;\n    // identityId => Identity\n    mapping(uint72 => Identity) internal identities;\n\n    constructor(address hubAddress) HubDependent(hubAddress) {\n        _identityId = 1;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function deleteIdentity(uint72 identityId) external onlyContracts {\n        bytes32[] memory operationalKeys = identities[identityId].keysByPurpose[OPERATIONAL_KEY];\n        uint256 operationalKeysNumber = operationalKeys.length;\n\n        for (uint256 i; i < operationalKeysNumber; ) {\n            delete identityIds[operationalKeys[i]];\n            unchecked {\n                i++;\n            }\n        }\n\n        delete identities[identityId];\n    }\n\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _type) external override onlyContracts {\n        Identity storage identity = identities[identityId];\n        identity.keys[_key].purpose = _purpose;\n        identity.keys[_key].keyType = _type;\n        identity.keys[_key].key = _key;\n        identity.keysByPurpose[_purpose].push(_key);\n\n        emit KeyAdded(identityId, _key, _purpose, _type);\n    }\n\n    function removeKey(uint72 identityId, bytes32 _key) external override onlyContracts {\n        Identity storage identity = identities[identityId];\n\n        uint256 index;\n        (index, ) = identity.keysByPurpose[identity.keys[_key].purpose].indexOf(_key);\n        identity.keysByPurpose[identity.keys[_key].purpose].removeByIndex(index);\n\n        delete identity.keys[_key];\n\n        emit KeyRemoved(identityId, identity.keys[_key].key, identity.keys[_key].purpose, identity.keys[_key].keyType);\n    }\n\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view override returns (bool) {\n        return identities[identityId].keys[_key].purpose == _purpose;\n    }\n\n    function getKey(uint72 identityId, bytes32 _key) external view override returns (uint256, uint256, bytes32) {\n        return (\n            identities[identityId].keys[_key].purpose,\n            identities[identityId].keys[_key].keyType,\n            identities[identityId].keys[_key].key\n        );\n    }\n\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view override returns (bytes32[] memory) {\n        return identities[identityId].keysByPurpose[_purpose];\n    }\n\n    function getIdentityId(address operational) external view returns (uint72) {\n        return identityIds[keccak256(abi.encodePacked(operational))];\n    }\n\n    function setOperationalKeyIdentityId(bytes32 operationalKey, uint72 identityId) external onlyContracts {\n        identityIds[operationalKey] = identityId;\n    }\n\n    function removeOperationalKeyIdentityId(bytes32 operationalKey) external onlyContracts {\n        delete identityIds[operationalKey];\n    }\n\n    function generateIdentityId() external onlyContracts returns (uint72) {\n        unchecked {\n            return _identityId++;\n        }\n    }\n}\n"
    },
    "contracts/storage/ParametersStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\n\ncontract ParametersStorage is Named, Versioned, HubDependent {\n    event ParameterChanged(string parameterName, uint256 parameterValue);\n\n    string private constant _NAME = \"ParametersStorage\";\n    string private constant _VERSION = \"1.1.0\";\n\n    // 0 - minProofWindowOffsetPerc\n    // 1 - maxProofWindowOffsetPerc\n    // 2 - commitWindowDurationPerc\n    // 3 - proofWindowDurationPerc\n    // 4 - replacementWindowDurationPerc\n    // 5 - finalizationCommitsNumber\n    uint8[6] internal args1;\n\n    // 0 - r0\n    // 1 - r1\n    // 2 - slashingFreezeDuration\n    uint32[3] internal args2;\n    uint48 public r2;\n\n    // 0 - minimumStake\n    // 1 - maximumStake\n    uint96[2] internal args3;\n\n    uint128 public epochLength;\n\n    // 0 - stakeWithdrawalDelay\n    // 1 - rewardWithdrawalDelay\n    uint24[2] internal args4;\n\n    uint16 public updateCommitWindowDuration;\n\n    constructor(address hubAddress) HubDependent(hubAddress) {\n        // minimumStake\n        args3[0] = 50_000 ether;\n        // maximumStake\n        args3[1] = 5_000_000 ether;\n\n        r2 = 20;\n        // r1\n        args2[1] = 8;\n        // r0\n        args2[0] = 3;\n\n        // minProofWindowOffsetPerc\n        args1[0] = 50;\n        // maxProofWindowOffsetPerc\n        args1[1] = 75;\n        // commitWindowDurationPerc\n        args1[2] = 25;\n        // proofWindowDurationPerc\n        args1[3] = 25;\n        // replacementWindowDurationPerc\n        args1[4] = 0;\n\n        epochLength = 90 days;\n\n        // stakeWithdrawalDelay\n        args4[0] = 5 minutes;\n        // rewardWithdrawalDelay\n        args4[1] = 5 minutes;\n        // slashingFreezeDuration\n        args2[2] = 730 days;\n\n        updateCommitWindowDuration = 30 minutes;\n\n        // finalizationCommitsNumber\n        args1[5] = 3;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function minimumStake() external view returns (uint96) {\n        return args3[0];\n    }\n\n    function setMinimumStake(uint96 newMinimumStake) external onlyHubOwner {\n        args3[0] = newMinimumStake;\n\n        emit ParameterChanged(\"minimumStake\", newMinimumStake);\n    }\n\n    function maximumStake() external view returns (uint96) {\n        return args3[1];\n    }\n\n    function setMaximumStake(uint96 newMaximumStake) external onlyHubOwner {\n        args3[1] = newMaximumStake;\n\n        emit ParameterChanged(\"maximumStake\", newMaximumStake);\n    }\n\n    function setR2(uint48 newR2) external onlyHubOwner {\n        r2 = newR2;\n\n        emit ParameterChanged(\"r2\", newR2);\n    }\n\n    function r1() external view returns (uint32) {\n        return args2[1];\n    }\n\n    function setR1(uint32 newR1) external onlyHubOwner {\n        require(newR1 >= (2 * args2[0] - 1), \"R1 should be >= 2*R0-1\");\n\n        args2[1] = newR1;\n\n        emit ParameterChanged(\"r1\", newR1);\n    }\n\n    function r0() external view returns (uint32) {\n        return args2[0];\n    }\n\n    function setR0(uint32 newR0) external onlyHubOwner {\n        require(newR0 <= ((args2[1] + 1) / 2), \"R0 should be <= (R1+1)/2\");\n\n        args2[0] = newR0;\n\n        emit ParameterChanged(\"r0\", newR0);\n    }\n\n    function minProofWindowOffsetPerc() external view returns (uint8) {\n        return args1[0];\n    }\n\n    function setMinProofWindowOffsetPerc(uint8 newMinProofWindowOffsetPerc) external onlyHubOwner {\n        args1[0] = newMinProofWindowOffsetPerc;\n\n        emit ParameterChanged(\"minProofWindowOffsetPerc\", newMinProofWindowOffsetPerc);\n    }\n\n    function maxProofWindowOffsetPerc() external view returns (uint8) {\n        return args1[1];\n    }\n\n    function setMaxProofWindowOffsetPerc(uint8 newMaxProofWindowOffsetPerc) external onlyHubOwner {\n        args1[1] = newMaxProofWindowOffsetPerc;\n\n        emit ParameterChanged(\"maxProofWindowOffsetPerc\", newMaxProofWindowOffsetPerc);\n    }\n\n    function commitWindowDurationPerc() external view returns (uint8) {\n        return args1[2];\n    }\n\n    function setCommitWindowDurationPerc(uint8 newCommitWindowDurationPerc) external onlyHubOwner {\n        args1[2] = newCommitWindowDurationPerc;\n\n        emit ParameterChanged(\"commitWindowDurationPerc\", newCommitWindowDurationPerc);\n    }\n\n    function proofWindowDurationPerc() external view returns (uint8) {\n        return args1[3];\n    }\n\n    function setProofWindowDurationPerc(uint8 newProofWindowDurationPerc) external onlyHubOwner {\n        args1[3] = newProofWindowDurationPerc;\n\n        emit ParameterChanged(\"proofWindowDurationPerc\", newProofWindowDurationPerc);\n    }\n\n    function replacementWindowDurationPerc() external view returns (uint8) {\n        return args1[4];\n    }\n\n    function setReplacementWindowDurationPerc(uint8 newReplacementWindowDurationPerc) external onlyHubOwner {\n        args1[4] = newReplacementWindowDurationPerc;\n\n        emit ParameterChanged(\"replacementWindowDurationPerc\", newReplacementWindowDurationPerc);\n    }\n\n    function setEpochLength(uint128 newEpochLength) external onlyHubOwner {\n        epochLength = newEpochLength;\n\n        emit ParameterChanged(\"epochLength\", newEpochLength);\n    }\n\n    function stakeWithdrawalDelay() external view returns (uint24) {\n        return args4[0];\n    }\n\n    function setStakeWithdrawalDelay(uint24 newStakeWithdrawalDelay) external onlyHubOwner {\n        args4[0] = newStakeWithdrawalDelay;\n\n        emit ParameterChanged(\"stakeWithdrawalDelay\", newStakeWithdrawalDelay);\n    }\n\n    function rewardWithdrawalDelay() external view returns (uint24) {\n        return args4[1];\n    }\n\n    function setRewardWithdrawalDelay(uint24 newRewardWithdrawalDelay) external onlyHubOwner {\n        args4[1] = newRewardWithdrawalDelay;\n\n        emit ParameterChanged(\"rewardWithdrawalDelay\", newRewardWithdrawalDelay);\n    }\n\n    function slashingFreezeDuration() external view returns (uint32) {\n        return args2[2];\n    }\n\n    function setSlashingFreezeDuration(uint32 newSlashingFreezeDuration) external onlyHubOwner {\n        args2[2] = newSlashingFreezeDuration;\n\n        emit ParameterChanged(\"slashingFreezeDuration\", newSlashingFreezeDuration);\n    }\n\n    function setUpdateCommitWindowDuration(uint16 newUpdateCommitWindowDuration) external onlyHubOwner {\n        updateCommitWindowDuration = newUpdateCommitWindowDuration;\n\n        emit ParameterChanged(\"updateCommitWindowDuration\", newUpdateCommitWindowDuration);\n    }\n\n    function finalizationCommitsNumber() external view returns (uint8) {\n        return args1[5];\n    }\n\n    function setFinalizationCommitsNumber(uint8 newFinalizationCommitsNumber) external onlyHubOwner {\n        args1[5] = newFinalizationCommitsNumber;\n\n        emit ParameterChanged(\"finalizationCommitsNumber\", newFinalizationCommitsNumber);\n    }\n}\n"
    },
    "contracts/storage/ProfileStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Guardian} from \"../Guardian.sol\";\nimport {Shares} from \"../Shares.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\n\ncontract ProfileStorage is Named, Versioned, Guardian {\n    string private constant _NAME = \"ProfileStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    struct ProfileDefinition {\n        bytes nodeId;\n        uint96 ask;\n        uint96 accumulatedOperatorFee;\n        uint96 accumulatedOperatorFeeWithdrawalAmount;\n        uint256 operatorFeeWithdrawalTimestamp;\n        address sharesContractAddress;\n        mapping(uint8 => bytes32) nodeAddresses;\n    }\n\n    // nodeId => isRegistered?\n    mapping(bytes => bool) public nodeIdsList;\n    // identityId => Profile\n    mapping(uint72 => ProfileDefinition) internal profiles;\n\n    // shares token name => isTaken?\n    mapping(string => bool) public sharesNames;\n    // shares token ID => isTaken?\n    mapping(string => bool) public sharesSymbols;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) Guardian(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createProfile(\n        uint72 identityId,\n        bytes calldata nodeId,\n        address sharesContractAddress\n    ) external onlyContracts {\n        ProfileDefinition storage profile = profiles[identityId];\n        profile.nodeId = nodeId;\n        profile.sharesContractAddress = sharesContractAddress;\n\n        nodeIdsList[nodeId] = true;\n\n        Shares sharesContract = Shares(sharesContractAddress);\n        sharesNames[sharesContract.name()] = true;\n        sharesSymbols[sharesContract.symbol()] = true;\n    }\n\n    function getProfile(\n        uint72 identityId\n    ) external view returns (bytes memory nodeId, uint96[2] memory profileSettings, address sharesContractAddress) {\n        ProfileDefinition storage profile = profiles[identityId];\n        return (profile.nodeId, [profile.ask, profile.accumulatedOperatorFee], profile.sharesContractAddress);\n    }\n\n    function deleteProfile(uint72 identityId) external onlyContracts {\n        nodeIdsList[profiles[identityId].nodeId] = false;\n        delete profiles[identityId];\n    }\n\n    function getNodeId(uint72 identityId) external view returns (bytes memory) {\n        return profiles[identityId].nodeId;\n    }\n\n    function setNodeId(uint72 identityId, bytes calldata nodeId) external onlyContracts {\n        ProfileDefinition storage profile = profiles[identityId];\n\n        nodeIdsList[profile.nodeId] = false;\n        profile.nodeId = nodeId;\n        nodeIdsList[nodeId] = true;\n    }\n\n    function getAsk(uint72 identityId) external view returns (uint96) {\n        return profiles[identityId].ask;\n    }\n\n    function setAsk(uint72 identityId, uint96 ask) external onlyContracts {\n        profiles[identityId].ask = ask;\n    }\n\n    function getAccumulatedOperatorFee(uint72 identityId) external view returns (uint96) {\n        return profiles[identityId].accumulatedOperatorFee;\n    }\n\n    function setAccumulatedOperatorFee(uint72 identityId, uint96 newOperatorFeeAmount) external onlyContracts {\n        profiles[identityId].accumulatedOperatorFee = newOperatorFeeAmount;\n    }\n\n    function getAccumulatedOperatorFeeWithdrawalAmount(uint72 identityId) external view returns (uint96) {\n        return profiles[identityId].accumulatedOperatorFeeWithdrawalAmount;\n    }\n\n    function setAccumulatedOperatorFeeWithdrawalAmount(\n        uint72 identityId,\n        uint96 accumulatedOperatorFeeWithdrawalAmount\n    ) external onlyContracts {\n        profiles[identityId].accumulatedOperatorFeeWithdrawalAmount = accumulatedOperatorFeeWithdrawalAmount;\n    }\n\n    function getAccumulatedOperatorFeeWithdrawalTimestamp(uint72 identityId) external view returns (uint256) {\n        return profiles[identityId].operatorFeeWithdrawalTimestamp;\n    }\n\n    function setAccumulatedOperatorFeeWithdrawalTimestamp(\n        uint72 identityId,\n        uint256 operatorFeeWithdrawalTimestamp\n    ) external onlyContracts {\n        profiles[identityId].operatorFeeWithdrawalTimestamp = operatorFeeWithdrawalTimestamp;\n    }\n\n    function getSharesContractAddress(uint72 identityId) external view returns (address) {\n        return profiles[identityId].sharesContractAddress;\n    }\n\n    function setSharesContractAddress(uint72 identityId, address sharesContractAddress) external onlyContracts {\n        profiles[identityId].sharesContractAddress = sharesContractAddress;\n    }\n\n    function getNodeAddress(uint72 identityId, uint8 hashFunctionId) external view returns (bytes32) {\n        return profiles[identityId].nodeAddresses[hashFunctionId];\n    }\n\n    function setNodeAddress(uint72 identityId, uint8 hashFunctionId, bytes32 nodeAddress) external onlyContracts {\n        profiles[identityId].nodeAddresses[hashFunctionId] = nodeAddress;\n    }\n\n    function profileExists(uint72 identityId) external view returns (bool) {\n        return keccak256(profiles[identityId].nodeId) != keccak256(bytes(\"\"));\n    }\n\n    function transferAccumulatedOperatorFee(address receiver, uint96 amount) external onlyContracts {\n        tokenContract.transfer(receiver, amount);\n    }\n}\n"
    },
    "contracts/storage/ServiceAgreementStorageProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {ServiceAgreementStorageV1} from \"./ServiceAgreementStorageV1.sol\";\nimport {ServiceAgreementStorageV1U1} from \"./ServiceAgreementStorageV1U1.sol\";\nimport {ServiceAgreementStructsV1} from \"../structs/ServiceAgreementStructsV1.sol\";\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Initializable} from \"../interface/Initializable.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {GeneralErrors} from \"../errors/GeneralErrors.sol\";\n\ncontract ServiceAgreementStorageProxy is Named, Versioned, HubDependent, Initializable {\n    string private constant _NAME = \"ServiceAgreementStorageProxy\";\n    string private constant _VERSION = \"1.0.0\";\n\n    ServiceAgreementStorageV1 public storageV1;\n    ServiceAgreementStorageV1U1 public storageV1U1;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function initialize() public onlyHubOwner {\n        storageV1 = ServiceAgreementStorageV1(hub.getContractAddress(\"ServiceAgreementStorageV1\"));\n        storageV1U1 = ServiceAgreementStorageV1U1(hub.getContractAddress(\"ServiceAgreementStorageV1U1\"));\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function migrateV1ServiceAgreement(bytes32 agreementId) external onlyContracts {\n        ServiceAgreementStorageV1 sasV1 = storageV1;\n        ServiceAgreementStorageV1U1 sasV1U1 = storageV1U1;\n\n        uint96 tokenAmount = sasV1.getAgreementTokenAmount(agreementId);\n\n        sasV1.deleteServiceAgreementObject(agreementId);\n\n        sasV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\n        sasV1.transferAgreementTokens(address(sasV1U1), tokenAmount);\n    }\n\n    function createV1U1ServiceAgreementObject(\n        bytes32 agreementId,\n        uint256 startTime,\n        uint16 epochsNumber,\n        uint128 epochLength,\n        uint96 tokenAmount,\n        uint8 scoreFunctionId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        storageV1U1.createServiceAgreementObject(\n            agreementId,\n            startTime,\n            epochsNumber,\n            epochLength,\n            tokenAmount,\n            scoreFunctionId,\n            proofWindowOffsetPerc\n        );\n    }\n\n    function createV1ServiceAgreementObject(\n        bytes32 agreementId,\n        uint16 epochsNumber,\n        uint128 epochLength,\n        uint96 tokenAmount,\n        uint8 scoreFunctionId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        storageV1.createServiceAgreementObject(\n            agreementId,\n            epochsNumber,\n            epochLength,\n            tokenAmount,\n            scoreFunctionId,\n            proofWindowOffsetPerc\n        );\n    }\n\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.deleteServiceAgreementObject(agreementId);\n        } else {\n            storageV1U1.deleteServiceAgreementObject(agreementId);\n        }\n    }\n\n    function getAgreementData(\n        bytes32 agreementId\n    )\n        external\n        view\n        returns (\n            uint256 startTime,\n            uint16 epochsNumber,\n            uint128 epochLength,\n            uint96[2] memory tokens,\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\n        )\n    {\n        if (this.agreementV1Exists(agreementId)) {\n            uint96 tokenAmount;\n            (startTime, epochsNumber, epochLength, tokenAmount, scoreFunctionIdAndProofWindowOffsetPerc) = storageV1\n                .getAgreementData(agreementId);\n            return (\n                startTime,\n                epochsNumber,\n                epochLength,\n                [tokenAmount, storageV1U1.getAgreementUpdateTokenAmount(agreementId)],\n                scoreFunctionIdAndProofWindowOffsetPerc\n            );\n        } else {\n            return storageV1U1.getAgreementData(agreementId);\n        }\n    }\n\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementStartTime(agreementId);\n        } else {\n            return storageV1U1.getAgreementStartTime(agreementId);\n        }\n    }\n\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementStartTime(agreementId, startTime);\n        } else {\n            storageV1U1.setAgreementStartTime(agreementId, startTime);\n        }\n    }\n\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementEpochsNumber(agreementId);\n        } else {\n            return storageV1U1.getAgreementEpochsNumber(agreementId);\n        }\n    }\n\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementEpochsNumber(agreementId, epochsNumber);\n        } else {\n            storageV1U1.setAgreementEpochsNumber(agreementId, epochsNumber);\n        }\n    }\n\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementEpochLength(agreementId);\n        } else {\n            return storageV1U1.getAgreementEpochLength(agreementId);\n        }\n    }\n\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementEpochLength(agreementId, epochLength);\n        } else {\n            storageV1U1.setAgreementEpochLength(agreementId, epochLength);\n        }\n    }\n\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementTokenAmount(agreementId);\n        } else {\n            return storageV1U1.getAgreementTokenAmount(agreementId);\n        }\n    }\n\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementTokenAmount(agreementId, tokenAmount);\n        } else {\n            storageV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\n        }\n    }\n\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\n        return storageV1U1.getAgreementUpdateTokenAmount(agreementId);\n    }\n\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\n        storageV1U1.setAgreementUpdateTokenAmount(agreementId, updateTokenAmount);\n    }\n\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementScoreFunctionId(agreementId);\n        } else {\n            return storageV1U1.getAgreementScoreFunctionId(agreementId);\n        }\n    }\n\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\n        } else {\n            storageV1U1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\n        }\n    }\n\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementProofWindowOffsetPerc(agreementId);\n        } else {\n            return storageV1U1.getAgreementProofWindowOffsetPerc(agreementId);\n        }\n    }\n\n    function setAgreementProofWindowOffsetPerc(\n        bytes32 agreementId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\n        } else {\n            storageV1U1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\n        }\n    }\n\n    function getV1U1AgreementEpochSubmissionHead(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex\n    ) external view returns (bytes32) {\n        return storageV1U1.getAgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\n    }\n\n    function getV1AgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\n        return storageV1.getAgreementEpochSubmissionHead(agreementId, epoch);\n    }\n\n    function setV1U1AgreementEpochSubmissionHead(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        bytes32 headCommitId\n    ) external onlyContracts {\n        storageV1U1.setAgreementEpochSubmissionHead(agreementId, epoch, stateIndex, headCommitId);\n    }\n\n    function setV1AgreementEpochSubmissionHead(\n        bytes32 agreementId,\n        uint16 epoch,\n        bytes32 headCommitId\n    ) external onlyContracts {\n        storageV1.setAgreementEpochSubmissionHead(agreementId, epoch, headCommitId);\n    }\n\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\n        } else {\n            storageV1U1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\n        }\n    }\n\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\n        } else {\n            storageV1U1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\n        }\n    }\n\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\n        if (this.agreementV1Exists(agreementId)) {\n            return storageV1.getAgreementRewardedNodesNumber(agreementId, epoch);\n        } else {\n            return storageV1U1.getAgreementRewardedNodesNumber(agreementId, epoch);\n        }\n    }\n\n    function setAgreementRewardedNodesNumber(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint32 rewardedNodesNumber\n    ) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\n        } else {\n            storageV1U1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\n        }\n    }\n\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, 0);\n        } else {\n            storageV1U1.deleteAgreementRewardedNodesNumber(agreementId, epoch);\n        }\n    }\n\n    function createV1CommitSubmissionObject(\n        bytes32 commitId,\n        uint72 identityId,\n        uint72 prevIdentityId,\n        uint72 nextIdentityId,\n        uint40 score\n    ) external onlyContracts {\n        storageV1.createCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\n    }\n\n    function createV1U1CommitSubmissionObject(\n        bytes32 commitId,\n        uint72 identityId,\n        uint72 prevIdentityId,\n        uint72 nextIdentityId,\n        uint40 score\n    ) external onlyContracts {\n        storageV1U1.createEpochStateCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\n    }\n\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\n        if (this.commitV1U1Exists(commitId)) {\n            storageV1U1.deleteEpochStateCommitSubmissionsObject(commitId);\n        } else {\n            storageV1.deleteCommitSubmissionsObject(commitId);\n        }\n    }\n\n    function getCommitSubmission(\n        bytes32 commitId\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\n        if (this.commitV1U1Exists(commitId)) {\n            return storageV1U1.getEpochStateCommitSubmission(commitId);\n        } else {\n            return storageV1.getCommitSubmission(commitId);\n        }\n    }\n\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\n        if (this.commitV1U1Exists(commitId)) {\n            return storageV1U1.getEpochStateCommitSubmissionIdentityId(commitId);\n        } else {\n            return storageV1.getCommitSubmissionIdentityId(commitId);\n        }\n    }\n\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\n        if (this.commitV1U1Exists(commitId)) {\n            storageV1U1.setEpochStateCommitSubmissionIdentityId(commitId, identityId);\n        } else {\n            storageV1.setCommitSubmissionIdentityId(commitId, identityId);\n        }\n    }\n\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\n        if (this.commitV1U1Exists(commitId)) {\n            return storageV1U1.getEpochStateCommitSubmissionPrevIdentityId(commitId);\n        } else {\n            return storageV1.getCommitSubmissionPrevIdentityId(commitId);\n        }\n    }\n\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\n        if (this.commitV1U1Exists(commitId)) {\n            storageV1U1.setEpochStateCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\n        } else {\n            storageV1.setCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\n        }\n    }\n\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\n        if (this.commitV1U1Exists(commitId)) {\n            return storageV1U1.getEpochStateCommitSubmissionNextIdentityId(commitId);\n        } else {\n            return storageV1.getCommitSubmissionNextIdentityId(commitId);\n        }\n    }\n\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\n        if (this.commitV1U1Exists(commitId)) {\n            storageV1U1.setEpochStateCommitSubmissionNextIdentityId(commitId, nextIdentityId);\n        } else {\n            storageV1.setCommitSubmissionNextIdentityId(commitId, nextIdentityId);\n        }\n    }\n\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\n        if (this.commitV1U1Exists(commitId)) {\n            return storageV1U1.getEpochStateCommitSubmissionScore(commitId);\n        } else {\n            return storageV1.getCommitSubmissionScore(commitId);\n        }\n    }\n\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\n        if (this.commitV1U1Exists(commitId)) {\n            storageV1U1.setEpochStateCommitSubmissionScore(commitId, score);\n        } else {\n            storageV1.setCommitSubmissionScore(commitId, score);\n        }\n    }\n\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\n        if (this.commitV1U1Exists(commitId)) {\n            return storageV1U1.epochStateCommitSubmissionExists(commitId);\n        } else {\n            return storageV1.commitSubmissionExists(commitId);\n        }\n    }\n\n    function incrementCommitsCount(bytes32 epochStateId) external onlyContracts {\n        storageV1U1.incrementEpochStateCommitsCount(epochStateId);\n    }\n\n    function decrementCommitsCount(bytes32 epochStateId) external onlyContracts {\n        storageV1U1.decrementEpochStateCommitsCount(epochStateId);\n    }\n\n    function getCommitsCount(bytes32 epochStateId) external view returns (uint8) {\n        return storageV1U1.getEpochStateCommitsCount(epochStateId);\n    }\n\n    function setCommitsCount(bytes32 epochStateId, uint8 epochStateCommitsCount) external onlyContracts {\n        storageV1U1.setEpochStateCommitsCount(epochStateId, epochStateCommitsCount);\n    }\n\n    function deleteCommitsCount(bytes32 epochStateId) external onlyContracts {\n        storageV1U1.deleteEpochStateCommitsCount(epochStateId);\n    }\n\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\n        return storageV1U1.getUpdateCommitsDeadline(stateId);\n    }\n\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\n        storageV1U1.setUpdateCommitsDeadline(stateId, deadline);\n    }\n\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\n        storageV1U1.deleteUpdateCommitsDeadline(stateId);\n    }\n\n    function transferAgreementTokens(bytes32 agreementId, address receiver, uint96 tokenAmount) external onlyContracts {\n        if (this.agreementV1Exists(agreementId)) {\n            storageV1.transferAgreementTokens(receiver, tokenAmount);\n        } else {\n            storageV1U1.transferAgreementTokens(receiver, tokenAmount);\n        }\n    }\n\n    function transferV1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\n        storageV1.transferAgreementTokens(receiver, tokenAmount);\n    }\n\n    function transferV1U1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\n        storageV1U1.transferAgreementTokens(receiver, tokenAmount);\n    }\n\n    function agreementV1Exists(bytes32 agreementId) external view returns (bool) {\n        return storageV1.serviceAgreementExists(agreementId);\n    }\n\n    function agreementV1U1Exists(bytes32 agreementId) external view returns (bool) {\n        return storageV1U1.serviceAgreementExists(agreementId);\n    }\n\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\n        return storageV1.serviceAgreementExists(agreementId) || storageV1U1.serviceAgreementExists(agreementId);\n    }\n\n    function commitV1Exists(bytes32 commitId) external view returns (bool) {\n        return storageV1.commitSubmissionExists(commitId);\n    }\n\n    function commitV1U1Exists(bytes32 commitId) external view returns (bool) {\n        return storageV1U1.epochStateCommitSubmissionExists(commitId);\n    }\n\n    function agreementV1StorageAddress() external view returns (address) {\n        return address(storageV1);\n    }\n\n    function agreementV1U1StorageAddress() external view returns (address) {\n        return address(storageV1U1);\n    }\n}\n"
    },
    "contracts/storage/ServiceAgreementStorageV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Guardian} from \"../Guardian.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {ServiceAgreementStructsV1} from \"../structs/ServiceAgreementStructsV1.sol\";\n\ncontract ServiceAgreementStorageV1 is Named, Versioned, Guardian {\n    string private constant _NAME = \"ServiceAgreementStorageV1\";\n    string private constant _VERSION = \"1.0.0\";\n\n    // CommitId [keccak256(agreementId + epoch + identityId)] => CommitSubmission\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal commitSubmissions;\n\n    // AgreementId [hash(asset type contract + tokenId + key)] => ServiceAgreement\n    mapping(bytes32 => ServiceAgreementStructsV1.ServiceAgreement) internal serviceAgreements;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) Guardian(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createServiceAgreementObject(\n        bytes32 agreementId,\n        uint16 epochsNumber,\n        uint128 epochLength,\n        uint96 tokenAmount,\n        uint8 scoreFunctionId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        ServiceAgreementStructsV1.ServiceAgreement storage agreement = serviceAgreements[agreementId];\n        agreement.startTime = block.timestamp;\n        agreement.epochsNumber = epochsNumber;\n        agreement.epochLength = epochLength;\n        agreement.tokenAmount = tokenAmount;\n        agreement.scoreFunctionId = scoreFunctionId;\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\n    }\n\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\n        delete serviceAgreements[agreementId];\n    }\n\n    function getAgreementData(\n        bytes32 agreementId\n    )\n        external\n        view\n        returns (\n            uint256 startTime,\n            uint16 epochsNumber,\n            uint128 epochLength,\n            uint96 tokenAmount,\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\n        )\n    {\n        return (\n            serviceAgreements[agreementId].startTime,\n            serviceAgreements[agreementId].epochsNumber,\n            serviceAgreements[agreementId].epochLength,\n            serviceAgreements[agreementId].tokenAmount,\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\n        );\n    }\n\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\n        return serviceAgreements[agreementId].startTime;\n    }\n\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\n        serviceAgreements[agreementId].startTime = startTime;\n    }\n\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\n        return serviceAgreements[agreementId].epochsNumber;\n    }\n\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\n    }\n\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\n        return serviceAgreements[agreementId].epochLength;\n    }\n\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\n        serviceAgreements[agreementId].epochLength = epochLength;\n    }\n\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\n        return serviceAgreements[agreementId].tokenAmount;\n    }\n\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\n    }\n\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\n        return serviceAgreements[agreementId].scoreFunctionId;\n    }\n\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\n    }\n\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\n    }\n\n    function setAgreementProofWindowOffsetPerc(\n        bytes32 agreementId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\n    }\n\n    function getAgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\n        return serviceAgreements[agreementId].epochSubmissionHeads[epoch];\n    }\n\n    function setAgreementEpochSubmissionHead(\n        bytes32 agreementId,\n        uint16 epoch,\n        bytes32 headCommitId\n    ) external onlyContracts {\n        serviceAgreements[agreementId].epochSubmissionHeads[epoch] = headCommitId;\n    }\n\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\n    }\n\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\n    }\n\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\n    }\n\n    function setAgreementRewardedNodesNumber(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint32 rewardedNodesNumber\n    ) external onlyContracts {\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\n    }\n\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\n        return serviceAgreements[agreementId].startTime != 0;\n    }\n\n    function createCommitSubmissionObject(\n        bytes32 commitId,\n        uint72 identityId,\n        uint72 prevIdentityId,\n        uint72 nextIdentityId,\n        uint40 score\n    ) external onlyContracts {\n        commitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\n            identityId: identityId,\n            prevIdentityId: prevIdentityId,\n            nextIdentityId: nextIdentityId,\n            score: score\n        });\n    }\n\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\n        delete commitSubmissions[commitId];\n    }\n\n    function getCommitSubmission(\n        bytes32 commitId\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\n        return commitSubmissions[commitId];\n    }\n\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\n        return commitSubmissions[commitId].identityId;\n    }\n\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\n        commitSubmissions[commitId].identityId = identityId;\n    }\n\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\n        return commitSubmissions[commitId].prevIdentityId;\n    }\n\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\n        commitSubmissions[commitId].prevIdentityId = prevIdentityId;\n    }\n\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\n        return commitSubmissions[commitId].nextIdentityId;\n    }\n\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\n        commitSubmissions[commitId].nextIdentityId = nextIdentityId;\n    }\n\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\n        return commitSubmissions[commitId].score;\n    }\n\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\n        commitSubmissions[commitId].score = score;\n    }\n\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\n        return commitSubmissions[commitId].identityId != 0;\n    }\n\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\n        tokenContract.transfer(receiver, tokenAmount);\n    }\n}\n"
    },
    "contracts/storage/ServiceAgreementStorageV1U1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Guardian} from \"../Guardian.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {ServiceAgreementStructsV1} from \"../structs/ServiceAgreementStructsV1.sol\";\n\ncontract ServiceAgreementStorageV1U1 is Named, Versioned, Guardian {\n    string private constant _NAME = \"ServiceAgreementStorageV1U1\";\n    string private constant _VERSION = \"1.0.0\";\n\n    // AgreementId [hash(assetStorage + tokenId + key)] => ExtendedServiceAgreement\n    mapping(bytes32 => ServiceAgreementStructsV1.ExtendedServiceAgreement) internal serviceAgreements;\n\n    // CommitId [keccak256(agreementId + epoch + stateIndex + identityId)] => stateCommitSubmission\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal epochStateCommitSubmissions;\n\n    // EpochStateId [keccak256(agreementId + epoch + stateIndex)] => epochStateCommitsCount\n    mapping(bytes32 => uint8) internal epochStateCommitsCount;\n\n    // StateId [keccak256(agreementId + stateIndex)] => updateCommitsDeadline\n    mapping(bytes32 => uint256) internal updateCommitsDeadlines;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) Guardian(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function createServiceAgreementObject(\n        bytes32 agreementId,\n        uint256 startTime,\n        uint16 epochsNumber,\n        uint128 epochLength,\n        uint96 tokenAmount,\n        uint8 scoreFunctionId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        ServiceAgreementStructsV1.ExtendedServiceAgreement storage agreement = serviceAgreements[agreementId];\n        agreement.startTime = startTime;\n        agreement.epochsNumber = epochsNumber;\n        agreement.epochLength = epochLength;\n        agreement.tokenAmount = tokenAmount;\n        agreement.scoreFunctionId = scoreFunctionId;\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\n    }\n\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\n        delete serviceAgreements[agreementId];\n    }\n\n    function getAgreementData(\n        bytes32 agreementId\n    )\n        external\n        view\n        returns (\n            uint256 startTime,\n            uint16 epochsNumber,\n            uint128 epochLength,\n            uint96[2] memory tokens,\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\n        )\n    {\n        return (\n            serviceAgreements[agreementId].startTime,\n            serviceAgreements[agreementId].epochsNumber,\n            serviceAgreements[agreementId].epochLength,\n            [serviceAgreements[agreementId].tokenAmount, serviceAgreements[agreementId].updateTokenAmount],\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\n        );\n    }\n\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\n        return serviceAgreements[agreementId].startTime;\n    }\n\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\n        serviceAgreements[agreementId].startTime = startTime;\n    }\n\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\n        return serviceAgreements[agreementId].epochsNumber;\n    }\n\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\n    }\n\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\n        return serviceAgreements[agreementId].epochLength;\n    }\n\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\n        serviceAgreements[agreementId].epochLength = epochLength;\n    }\n\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\n        return serviceAgreements[agreementId].tokenAmount;\n    }\n\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\n    }\n\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\n        return serviceAgreements[agreementId].updateTokenAmount;\n    }\n\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\n        serviceAgreements[agreementId].updateTokenAmount = updateTokenAmount;\n    }\n\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\n        return serviceAgreements[agreementId].scoreFunctionId;\n    }\n\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\n    }\n\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\n    }\n\n    function setAgreementProofWindowOffsetPerc(\n        bytes32 agreementId,\n        uint8 proofWindowOffsetPerc\n    ) external onlyContracts {\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\n    }\n\n    function getAgreementEpochSubmissionHead(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex\n    ) external view returns (bytes32) {\n        return serviceAgreements[agreementId].epochSubmissionHeads[keccak256(abi.encodePacked(epoch, stateIndex))];\n    }\n\n    function setAgreementEpochSubmissionHead(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint256 stateIndex,\n        bytes32 headCommitId\n    ) external onlyContracts {\n        serviceAgreements[agreementId].epochSubmissionHeads[\n            keccak256(abi.encodePacked(epoch, stateIndex))\n        ] = headCommitId;\n    }\n\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\n    }\n\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\n    }\n\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\n    }\n\n    function setAgreementRewardedNodesNumber(\n        bytes32 agreementId,\n        uint16 epoch,\n        uint32 rewardedNodesNumber\n    ) external onlyContracts {\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\n    }\n\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\n        delete serviceAgreements[agreementId].rewardedNodesNumber[epoch];\n    }\n\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\n        return serviceAgreements[agreementId].startTime != 0;\n    }\n\n    function createEpochStateCommitSubmissionObject(\n        bytes32 commitId,\n        uint72 identityId,\n        uint72 prevIdentityId,\n        uint72 nextIdentityId,\n        uint40 score\n    ) external onlyContracts {\n        epochStateCommitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\n            identityId: identityId,\n            prevIdentityId: prevIdentityId,\n            nextIdentityId: nextIdentityId,\n            score: score\n        });\n    }\n\n    function deleteEpochStateCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\n        delete epochStateCommitSubmissions[commitId];\n    }\n\n    function getEpochStateCommitSubmission(\n        bytes32 commitId\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\n        return epochStateCommitSubmissions[commitId];\n    }\n\n    function getEpochStateCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\n        return epochStateCommitSubmissions[commitId].identityId;\n    }\n\n    function setEpochStateCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\n        epochStateCommitSubmissions[commitId].identityId = identityId;\n    }\n\n    function getEpochStateCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\n        return epochStateCommitSubmissions[commitId].prevIdentityId;\n    }\n\n    function setEpochStateCommitSubmissionPrevIdentityId(\n        bytes32 commitId,\n        uint72 prevIdentityId\n    ) external onlyContracts {\n        epochStateCommitSubmissions[commitId].prevIdentityId = prevIdentityId;\n    }\n\n    function getEpochStateCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\n        return epochStateCommitSubmissions[commitId].nextIdentityId;\n    }\n\n    function setEpochStateCommitSubmissionNextIdentityId(\n        bytes32 commitId,\n        uint72 nextIdentityId\n    ) external onlyContracts {\n        epochStateCommitSubmissions[commitId].nextIdentityId = nextIdentityId;\n    }\n\n    function getEpochStateCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\n        return epochStateCommitSubmissions[commitId].score;\n    }\n\n    function setEpochStateCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\n        epochStateCommitSubmissions[commitId].score = score;\n    }\n\n    function epochStateCommitSubmissionExists(bytes32 commitId) external view returns (bool) {\n        return epochStateCommitSubmissions[commitId].identityId != 0;\n    }\n\n    function incrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\n        epochStateCommitsCount[epochStateId]++;\n    }\n\n    function decrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\n        epochStateCommitsCount[epochStateId]--;\n    }\n\n    function getEpochStateCommitsCount(bytes32 epochStateId) external view returns (uint8) {\n        return epochStateCommitsCount[epochStateId];\n    }\n\n    function setEpochStateCommitsCount(bytes32 epochStateId, uint8 newEpochStateCommitsCount) external onlyContracts {\n        epochStateCommitsCount[epochStateId] = newEpochStateCommitsCount;\n    }\n\n    function deleteEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\n        delete epochStateCommitsCount[epochStateId];\n    }\n\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\n        return updateCommitsDeadlines[stateId];\n    }\n\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\n        updateCommitsDeadlines[stateId] = deadline;\n    }\n\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\n        delete updateCommitsDeadlines[stateId];\n    }\n\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\n        tokenContract.transfer(receiver, tokenAmount);\n    }\n}\n"
    },
    "contracts/storage/ShardingTableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\nimport {ShardingTableStructs} from \"../structs/ShardingTableStructs.sol\";\nimport {NULL} from \"../constants/ShardingTableConstants.sol\";\n\ncontract ShardingTableStorage is Named, Versioned, HubDependent {\n    string private constant _NAME = \"ShardingTableStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    uint72 public head;\n    uint72 public tail;\n    uint72 public nodesCount;\n\n    // identityId => Node\n    mapping(uint72 => ShardingTableStructs.Node) internal nodes;\n\n    constructor(address hubAddress) HubDependent(hubAddress) {\n        head = NULL;\n        tail = NULL;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function incrementNodesCount() external onlyContracts {\n        nodesCount++;\n    }\n\n    function decrementNodesCount() external onlyContracts {\n        nodesCount--;\n    }\n\n    function setHead(uint72 identityId) external onlyContracts {\n        head = identityId;\n    }\n\n    function setTail(uint72 identityId) external onlyContracts {\n        tail = identityId;\n    }\n\n    function createNodeObject(uint72 identityId, uint72 prevIdentityId, uint72 nextIdentityId) external onlyContracts {\n        nodes[identityId] = ShardingTableStructs.Node({\n            identityId: identityId,\n            prevIdentityId: prevIdentityId,\n            nextIdentityId: nextIdentityId\n        });\n    }\n\n    function getNode(uint72 identityId) external view returns (ShardingTableStructs.Node memory) {\n        return nodes[identityId];\n    }\n\n    function deleteNodeObject(uint72 identityId) external onlyContracts {\n        delete nodes[identityId];\n    }\n\n    function nodeExists(uint72 identityId) external view returns (bool) {\n        return nodes[identityId].identityId != 0;\n    }\n\n    function setPrevIdentityId(uint72 identityId, uint72 newPrevIdentityId) external onlyContracts {\n        nodes[identityId].prevIdentityId = newPrevIdentityId;\n    }\n\n    function setNextIdentityId(uint72 identityId, uint72 newNextIdentityId) external onlyContracts {\n        nodes[identityId].nextIdentityId = newNextIdentityId;\n    }\n\n    function getMultipleNodes(\n        uint72 firstIdentityId,\n        uint16 nodesNumber\n    ) external view returns (ShardingTableStructs.Node[] memory) {\n        ShardingTableStructs.Node[] memory nodesPage = new ShardingTableStructs.Node[](nodesNumber);\n\n        ShardingTableStructs.Node memory currentNode = nodes[firstIdentityId];\n        for (uint256 i; i < nodesNumber; ) {\n            nodesPage[i] = currentNode;\n            currentNode = nodes[currentNode.nextIdentityId];\n            unchecked {\n                i++;\n            }\n        }\n\n        return nodesPage;\n    }\n\n    function link(uint72 leftNodeIdentityId, uint72 rightNodeIdentityId) external onlyContracts {\n        nodes[leftNodeIdentityId].nextIdentityId = rightNodeIdentityId;\n        nodes[rightNodeIdentityId].prevIdentityId = leftNodeIdentityId;\n    }\n}\n"
    },
    "contracts/storage/StakingStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Guardian} from \"../Guardian.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\n\ncontract StakingStorage is Named, Versioned, Guardian {\n    string private constant _NAME = \"StakingStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    struct WithdrawalRequest {\n        uint96 amount;\n        uint256 timestamp;\n    }\n\n    // identityId => totalStake\n    mapping(uint72 => uint96) public totalStakes;\n\n    // identityId => operatorFee\n    mapping(uint72 => uint96) public operatorFees;\n\n    // identityId => withdrawalRequest\n    mapping(uint72 => mapping(address => WithdrawalRequest)) public withdrawalRequests;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) Guardian(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function setTotalStake(uint72 identityId, uint96 newTotalStake) external onlyContracts {\n        totalStakes[identityId] = newTotalStake;\n    }\n\n    function setOperatorFee(uint72 identityId, uint96 operatorFee) external onlyContracts {\n        operatorFees[identityId] = operatorFee;\n    }\n\n    function createWithdrawalRequest(\n        uint72 identityId,\n        address staker,\n        uint96 amount,\n        uint256 timestamp\n    ) external onlyContracts {\n        withdrawalRequests[identityId][staker] = WithdrawalRequest({amount: amount, timestamp: timestamp});\n    }\n\n    function deleteWithdrawalRequest(uint72 identityId, address staker) external onlyContracts {\n        delete withdrawalRequests[identityId][staker];\n    }\n\n    function getWithdrawalRequestAmount(uint72 identityId, address staker) external view returns (uint96) {\n        return withdrawalRequests[identityId][staker].amount;\n    }\n\n    function getWithdrawalRequestTimestamp(uint72 identityId, address staker) external view returns (uint256) {\n        return withdrawalRequests[identityId][staker].timestamp;\n    }\n\n    function withdrawalRequestExists(uint72 identityId, address staker) external view returns (bool) {\n        return withdrawalRequests[identityId][staker].amount != 0;\n    }\n\n    function transferStake(address receiver, uint96 stakeAmount) external onlyContracts {\n        tokenContract.transfer(receiver, stakeAmount);\n    }\n}\n"
    },
    "contracts/storage/UnfinalizedStateStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\n\ncontract UnfinalizedStateStorage is Named, Versioned, HubDependent {\n    string private constant _NAME = \"UnfinalizedStateStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    // tokenId => latestState\n    mapping(uint256 => bytes32) internal unfinalizedStates;\n    // tokenId => issuer\n    mapping(uint256 => address) internal issuers;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) {}\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function getUnfinalizedState(uint256 tokenId) external view returns (bytes32) {\n        return unfinalizedStates[tokenId];\n    }\n\n    function setUnfinalizedState(uint256 tokenId, bytes32 state) external onlyContracts {\n        unfinalizedStates[tokenId] = state;\n    }\n\n    function deleteUnfinalizedState(uint256 tokenId) external onlyContracts {\n        delete unfinalizedStates[tokenId];\n    }\n\n    function getIssuer(uint256 tokenId) external view returns (address) {\n        return issuers[tokenId];\n    }\n\n    function setIssuer(uint256 tokenId, address issuer) external onlyContracts {\n        issuers[tokenId] = issuer;\n    }\n\n    function deleteIssuer(uint256 tokenId) external onlyContracts {\n        delete issuers[tokenId];\n    }\n\n    function hasPendingUpdate(uint256 tokenId) external view returns (bool) {\n        return unfinalizedStates[tokenId] != bytes32(0);\n    }\n}\n"
    },
    "contracts/storage/WhitelistStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"../abstract/HubDependent.sol\";\nimport {Named} from \"../interface/Named.sol\";\nimport {Versioned} from \"../interface/Versioned.sol\";\n\ncontract WhitelistStorage is Named, Versioned, HubDependent {\n    string private constant _NAME = \"WhitelistStorage\";\n    string private constant _VERSION = \"1.0.0\";\n\n    bool public whitelistingEnabled;\n\n    mapping(address => bool) public whitelisted;\n\n    constructor(address hubAddress) HubDependent(hubAddress) {\n        whitelistingEnabled = false;\n    }\n\n    function name() external pure virtual override returns (string memory) {\n        return _NAME;\n    }\n\n    function version() external pure virtual override returns (string memory) {\n        return _VERSION;\n    }\n\n    function whitelistAddress(address addr) external onlyHubOwner {\n        whitelisted[addr] = true;\n    }\n\n    function blacklistAddress(address addr) external onlyHubOwner {\n        whitelisted[addr] = false;\n    }\n\n    function enableWhitelist() external onlyHubOwner {\n        whitelistingEnabled = true;\n    }\n\n    function disableWhitelist() external onlyHubOwner {\n        whitelistingEnabled = false;\n    }\n}\n"
    },
    "contracts/structs/AssertionStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary AssertionStructs {\n    struct Assertion {\n        uint256 timestamp;\n        uint128 size;\n        uint32 triplesNumber;\n        uint96 chunksNumber;\n    }\n}\n"
    },
    "contracts/structs/assets/ContentAssetStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ContentAssetStructs {\n    struct AssetInputArgs {\n        bytes32 assertionId;\n        uint128 size;\n        uint32 triplesNumber;\n        uint96 chunksNumber;\n        uint16 epochsNumber;\n        uint96 tokenAmount;\n        uint8 scoreFunctionId;\n        bool immutable_;\n    }\n\n    struct Asset {\n        bool immutable_;\n        bytes32[] assertionIds;\n    }\n}\n"
    },
    "contracts/structs/GeneralStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary GeneralStructs {\n    struct Contract {\n        string name;\n        address addr;\n    }\n}\n"
    },
    "contracts/structs/ServiceAgreementStructsV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ServiceAgreementStructsV1 {\n    struct CommitSubmission {\n        uint72 identityId;\n        uint72 prevIdentityId;\n        uint72 nextIdentityId;\n        uint40 score;\n    }\n\n    struct ServiceAgreementInputArgs {\n        address assetCreator;\n        address assetContract;\n        uint256 tokenId;\n        bytes keyword;\n        uint8 hashFunctionId;\n        uint16 epochsNumber;\n        uint96 tokenAmount;\n        uint8 scoreFunctionId;\n    }\n\n    struct ServiceAgreement {\n        uint256 startTime;\n        uint16 epochsNumber;\n        uint128 epochLength;\n        uint96 tokenAmount;\n        uint8 scoreFunctionId;\n        uint8 proofWindowOffsetPerc;\n        // epoch => headCommitId\n        mapping(uint16 => bytes32) epochSubmissionHeads;\n        // epoch => number of nodes received rewards\n        mapping(uint16 => uint32) rewardedNodesNumber;\n    }\n\n    struct ExtendedServiceAgreement {\n        uint256 startTime;\n        uint16 epochsNumber;\n        uint128 epochLength;\n        uint96 tokenAmount;\n        uint96 updateTokenAmount;\n        uint8 scoreFunctionId;\n        uint8 proofWindowOffsetPerc;\n        // keccak256(epoch + stateIndex) => headCommitId\n        mapping(bytes32 => bytes32) epochSubmissionHeads;\n        // epoch => number of nodes received rewards\n        mapping(uint16 => uint32) rewardedNodesNumber;\n    }\n\n    struct CommitInputArgs {\n        address assetContract;\n        uint256 tokenId;\n        bytes keyword;\n        uint8 hashFunctionId;\n        uint16 epoch;\n    }\n\n    struct ProofInputArgs {\n        address assetContract;\n        uint256 tokenId;\n        bytes keyword;\n        uint8 hashFunctionId;\n        uint16 epoch;\n        bytes32[] proof;\n        bytes32 chunkHash;\n    }\n}\n"
    },
    "contracts/structs/ShardingTableStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ShardingTableStructs {\n    struct NodeInfo {\n        bytes nodeId;\n        uint72 identityId;\n        uint96 ask;\n        uint96 stake;\n    }\n\n    struct Node {\n        uint72 identityId;\n        uint72 prevIdentityId;\n        uint72 nextIdentityId;\n    }\n}\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {HubDependent} from \"./abstract/HubDependent.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is HubDependent, ERC20, AccessControl {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address hubAddress) HubDependent(hubAddress) ERC20(\"TEST TOKEN\", \"TEST\") {}\n\n    function setupRole(address minter) public onlyHubOwner {\n        _setupRole(MINTER_ROLE, minter);\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(hasRole(MINTER_ROLE, msg.sender), \"Caller is not a minter\");\n\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/utils/ByteArr.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary ByteArr {\n    function indexOf(bytes32[] storage self, bytes32 item) internal view returns (uint index, bool isThere) {\n        for (uint i; i < self.length; i++) {\n            if (self[i] == item) {\n                return (i, true);\n            }\n        }\n        return (0, false);\n    }\n\n    function removeByIndex(bytes32[] storage self, uint256 index) internal returns (bytes32[] memory) {\n        require(index < self.length, \"Index is out of array length\");\n\n        self[index] = self[self.length - 1];\n        self.pop();\n\n        return self;\n    }\n\n    function getFuncHash(bytes storage _data) internal view returns (bytes4) {\n        bytes4 output;\n        for (uint i; i < 4; i++) {\n            output |= bytes4(_data[i] & 0xFF) >> (i * 8);\n        }\n        return output;\n    }\n}\n"
    },
    "contracts/utils/UnorderedIndexableContractDynamicSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Indexable} from \"../interface/Indexable.sol\";\n\nlibrary UnorderedIndexableContractDynamicSetLib {\n    struct Contract {\n        uint8 id;\n        address addr;\n    }\n\n    struct Set {\n        mapping(uint8 => uint256) indexPointers;\n        Contract[] contractList;\n    }\n\n    function append(Set storage self, uint8 id, address addr) internal {\n        require(id != 0, \"IndexableContractSet: ID canot be 0\");\n        require(addr != address(0), \"IndexableContractSet: Address cannot be 0x0\");\n        require(!exists(self, id), \"IndexableContractSet: Contract with given ID already exists\");\n        self.indexPointers[id] = size(self);\n        self.contractList.push(Contract(id, addr));\n    }\n\n    function update(Set storage self, uint8 id, address addr) internal {\n        require(addr != address(0), \"IndexableContractSet: Address cannot be 0x0\");\n        require(exists(self, id), \"IndexableContractSet: Contract with given ID doesn't exists\");\n        self.contractList[self.indexPointers[id]].addr = addr;\n    }\n\n    function remove(Set storage self, uint8 id) internal {\n        require(exists(self, id), \"IndexableContractSet: Contract with given ID doesn't exists\");\n        uint256 contractToRemoveIndex = self.indexPointers[id];\n        Contract memory contractToMove = self.contractList[size(self) - 1];\n        uint8 contractToMoveId = Indexable(contractToMove.addr).id();\n\n        self.indexPointers[contractToMoveId] = contractToRemoveIndex;\n        self.contractList[contractToRemoveIndex] = contractToMove;\n\n        delete self.indexPointers[id];\n        self.contractList.pop();\n    }\n\n    function get(Set storage self, uint8 id) internal view returns (Contract memory) {\n        require(exists(self, id), \"IndexableContractSet: Contract with given ID doesn't exists\");\n        return self.contractList[self.indexPointers[id]];\n    }\n\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\n        return self.contractList;\n    }\n\n    function getIndex(Set storage self, uint8 id) internal view returns (uint256) {\n        return self.indexPointers[id];\n    }\n\n    function getByIndex(Set storage self, uint256 index) internal view returns (Contract memory) {\n        return self.contractList[index];\n    }\n\n    function exists(Set storage self, uint8 id) internal view returns (bool) {\n        if (size(self) == 0) return false;\n        return self.contractList[self.indexPointers[id]].id == id;\n    }\n\n    function size(Set storage self) internal view returns (uint256) {\n        return self.contractList.length;\n    }\n}\n"
    },
    "contracts/utils/UnorderedNamedContractDynamicSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary UnorderedNamedContractDynamicSetLib {\n    struct Contract {\n        string name;\n        address addr;\n    }\n\n    struct Set {\n        mapping(string => uint256) stringIndexPointers;\n        mapping(address => uint256) addressIndexPointers;\n        Contract[] contractList;\n    }\n\n    function append(Set storage self, string calldata name, address addr) internal {\n        require(\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\"\")),\n            \"NamedContractSet: Name cannot be empty\"\n        );\n        require(addr != address(0), \"NamedContractSet: Address cannot be 0x0\");\n        require(!exists(self, name), \"NamedContractSet: Contract with given name already exists\");\n        self.stringIndexPointers[name] = size(self);\n        self.addressIndexPointers[addr] = size(self);\n        self.contractList.push(Contract(name, addr));\n    }\n\n    function update(Set storage self, string calldata name, address addr) internal {\n        require(addr != address(0), \"NamedContractSet: Address cannot be 0x0\");\n        require(exists(self, name), \"NamedContractSet: Contract with given name doesn't exists\");\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\n    }\n\n    function remove(Set storage self, string calldata name) internal {\n        require(exists(self, name), \"NamedContractSet: Contract with given name doesn't exist\");\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\n\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\n\n        Contract memory contractToMove = self.contractList[size(self) - 1];\n\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\n        self.contractList[contractToRemoveIndex] = contractToMove;\n\n        delete self.stringIndexPointers[name];\n        self.contractList.pop();\n    }\n\n    function remove(Set storage self, address addr) internal {\n        require(exists(self, addr), \"NamedContractSet: Contract with given address doesn't exist\");\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\n\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\n\n        Contract memory contractToMove = self.contractList[size(self) - 1];\n\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\n        self.contractList[contractToRemoveIndex] = contractToMove;\n\n        delete self.addressIndexPointers[addr];\n        self.contractList.pop();\n    }\n\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\n        require(exists(self, name), \"NamedContractSet: Contract with given name doesn't exist\");\n        return self.contractList[self.stringIndexPointers[name]];\n    }\n\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\n        require(exists(self, addr), \"NamedContractSet: Contract with given address doesn't exist\");\n        return self.contractList[self.addressIndexPointers[addr]];\n    }\n\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\n        return self.contractList[index];\n    }\n\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\n        return self.contractList;\n    }\n\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\n        return self.stringIndexPointers[name];\n    }\n\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\n        return self.addressIndexPointers[addr];\n    }\n\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\n        if (size(self) == 0) return false;\n        return\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\n            keccak256(abi.encodePacked(name));\n    }\n\n    function exists(Set storage self, address addr) internal view returns (bool) {\n        if (size(self) == 0) return false;\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\n    }\n\n    function size(Set storage self) internal view returns (uint256) {\n        return self.contractList.length;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "peephole": true,
        "inliner": true,
        "jumpdestRemover": true,
        "orderLiterals": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true,
        "yul": true,
        "yulDetails": {
          "stackAllocation": true
        }
      }
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
