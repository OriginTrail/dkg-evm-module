{
  "address": "0x85C4E94b0a852E014C054E6372A177062Dd41ac4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitWindowOpen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitWindowClose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeNow",
          "type": "uint256"
        }
      ],
      "name": "CommitWindowClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetStorage",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NoPendingUpdate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        }
      ],
      "name": "NodeAlreadySubmittedCommit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "rank",
          "type": "uint8"
        }
      ],
      "name": "NodeNotAwarded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "internalType": "uint96",
          "name": "ask",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "name": "NodeNotInShardingTable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        }
      ],
      "name": "ServiceAgreementDoesntExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "epochsNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "epochLength",
          "type": "uint128"
        }
      ],
      "name": "ServiceAgreementHasBeenExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "keyword",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "score",
          "type": "uint40"
        }
      ],
      "name": "CommitSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "keyword",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "hashFunctionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "state",
          "type": "bytes32"
        }
      ],
      "name": "StateFinalized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contentAssetStorage",
      "outputs": [
        {
          "internalType": "contract ContentAssetStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        }
      ],
      "name": "getTopCommitSubmissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "prevIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "nextIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "score",
              "type": "uint40"
            }
          ],
          "internalType": "struct ServiceAgreementStructsV1.CommitSubmission[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashingProxy",
      "outputs": [
        {
          "internalType": "contract HashingProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityStorage",
      "outputs": [
        {
          "internalType": "contract IdentityStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        }
      ],
      "name": "isCommitWindowOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agreementId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        }
      ],
      "name": "isUpdateCommitWindowOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parametersStorage",
      "outputs": [
        {
          "internalType": "contract ParametersStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profileStorage",
      "outputs": [
        {
          "internalType": "contract ProfileStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reqs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scoringProxy",
      "outputs": [
        {
          "internalType": "contract ScoringProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceAgreementStorageProxy",
      "outputs": [
        {
          "internalType": "contract ServiceAgreementStorageProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "req",
          "type": "bool"
        }
      ],
      "name": "setReq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shardingTableStorage",
      "outputs": [
        {
          "internalType": "contract ShardingTableStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingStorage",
      "outputs": [
        {
          "internalType": "contract StakingStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "keyword",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "hashFunctionId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct ServiceAgreementStructsV1.CommitInputArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "submitCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "keyword",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "hashFunctionId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct ServiceAgreementStructsV1.CommitInputArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "submitUpdateCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfinalizedStateStorage",
      "outputs": [
        {
          "internalType": "contract UnfinalizedStateStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f739e9add7caa3c4465de8c3b67dfd631fdf6e5eaf34732841cdbaf7df55c37",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0x85C4E94b0a852E014C054E6372A177062Dd41ac4",
    "transactionIndex": 48,
    "gasUsed": "3299933",
    "logsBloom": "0x
    "blockHash": "0x173ab8da392e8092739c313d42d91996c75e07268c827202e05bf60538c0cd3c",
    "transactionHash": "0x7f739e9add7caa3c4465de8c3b67dfd631fdf6e5eaf34732841cdbaf7df55c37",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 37384539,
        "transactionHash": "0x7f739e9add7caa3c4465de8c3b67dfd631fdf6e5eaf34732841cdbaf7df55c37",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001358191db488dd00000000000000000000000000000000000000000000000084e26649d29b5eb0000000000000000000000000000000000000000000000c05e5149ce27aefdb6c00000000000000000000000000000000000000000000000084cf0e30b4e6d5d3000000000000000000000000000000000000000000000c05e527f4fb98a46449",
        "logIndex": 124,
        "blockHash": "0x173ab8da392e8092739c313d42d91996c75e07268c827202e05bf60538c0cd3c"
      }
    ],
    "blockNumber": 37384539,
    "cumulativeGasUsed": "6636471",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitWindowOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitWindowClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"CommitWindowClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NoPendingUpdate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"}],\"name\":\"NodeAlreadySubmittedCommit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"rank\",\"type\":\"uint8\"}],\"name\":\"NodeNotAwarded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"ask\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"name\":\"NodeNotInShardingTable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"ServiceAgreementDoesntExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"epochsNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"}],\"name\":\"ServiceAgreementHasBeenExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyword\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"name\":\"CommitSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"keyword\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"state\",\"type\":\"bytes32\"}],\"name\":\"StateFinalized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contentAssetStorage\",\"outputs\":[{\"internalType\":\"contract ContentAssetStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"}],\"name\":\"getTopCommitSubmissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"score\",\"type\":\"uint40\"}],\"internalType\":\"struct ServiceAgreementStructsV1.CommitSubmission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashingProxy\",\"outputs\":[{\"internalType\":\"contract HashingProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IdentityStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"isCommitWindowOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"}],\"name\":\"isUpdateCommitWindowOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parametersStorage\",\"outputs\":[{\"internalType\":\"contract ParametersStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileStorage\",\"outputs\":[{\"internalType\":\"contract ProfileStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reqs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scoringProxy\",\"outputs\":[{\"internalType\":\"contract ScoringProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceAgreementStorageProxy\",\"outputs\":[{\"internalType\":\"contract ServiceAgreementStorageProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"req\",\"type\":\"bool\"}],\"name\":\"setReq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardingTableStorage\",\"outputs\":[{\"internalType\":\"contract ShardingTableStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStorage\",\"outputs\":[{\"internalType\":\"contract StakingStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"keyword\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct ServiceAgreementStructsV1.CommitInputArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"submitCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"keyword\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"hashFunctionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct ServiceAgreementStructsV1.CommitInputArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"submitUpdateCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfinalizedStateStorage\",\"outputs\":[{\"internalType\":\"contract UnfinalizedStateStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CommitManagerV1U1.sol\":\"CommitManagerV1U1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CommitManagerV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HashingProxy} from \\\"./HashingProxy.sol\\\";\\nimport {ScoringProxy} from \\\"./ScoringProxy.sol\\\";\\nimport {Staking} from \\\"./Staking.sol\\\";\\nimport {ContentAssetStorage} from \\\"./storage/assets/ContentAssetStorage.sol\\\";\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ParametersStorage} from \\\"./storage/ParametersStorage.sol\\\";\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ServiceAgreementStorageProxy} from \\\"./storage/ServiceAgreementStorageProxy.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {UnfinalizedStateStorage} from \\\"./storage/UnfinalizedStateStorage.sol\\\";\\nimport {AbstractAsset} from \\\"./abstract/AbstractAsset.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"./structs/ServiceAgreementStructsV1.sol\\\";\\nimport {ContentAssetErrors} from \\\"./errors/assets/ContentAssetErrors.sol\\\";\\nimport {GeneralErrors} from \\\"./errors/GeneralErrors.sol\\\";\\nimport {ServiceAgreementErrorsV1U1} from \\\"./errors/ServiceAgreementErrorsV1U1.sol\\\";\\n\\ncontract CommitManagerV1U1 is Named, Versioned, ContractStatus, Initializable {\\n    event CommitSubmitted(\\n        address indexed assetContract,\\n        uint256 indexed tokenId,\\n        bytes keyword,\\n        uint8 hashFunctionId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 indexed identityId,\\n        uint40 score\\n    );\\n    event StateFinalized(\\n        address indexed assetContract,\\n        uint256 indexed tokenId,\\n        bytes keyword,\\n        uint8 hashFunctionId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 state\\n    );\\n\\n    string private constant _NAME = \\\"CommitManagerV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    bool[6] public reqs = [false, false, false, false, false, false];\\n\\n    HashingProxy public hashingProxy;\\n    ScoringProxy public scoringProxy;\\n    Staking public stakingContract;\\n    ContentAssetStorage public contentAssetStorage;\\n    IdentityStorage public identityStorage;\\n    ParametersStorage public parametersStorage;\\n    ProfileStorage public profileStorage;\\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\\n    ShardingTableStorage public shardingTableStorage;\\n    StakingStorage public stakingStorage;\\n    UnfinalizedStateStorage public unfinalizedStateStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        hashingProxy = HashingProxy(hub.getContractAddress(\\\"HashingProxy\\\"));\\n        scoringProxy = ScoringProxy(hub.getContractAddress(\\\"ScoringProxy\\\"));\\n        stakingContract = Staking(hub.getContractAddress(\\\"Staking\\\"));\\n        contentAssetStorage = ContentAssetStorage(hub.getAssetStorageAddress(\\\"ContentAssetStorage\\\"));\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n        parametersStorage = ParametersStorage(hub.getContractAddress(\\\"ParametersStorage\\\"));\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\\n            hub.getContractAddress(\\\"ServiceAgreementStorageProxy\\\")\\n        );\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n        unfinalizedStateStorage = UnfinalizedStateStorage(hub.getContractAddress(\\\"UnfinalizedStateStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function isCommitWindowOpen(bytes32 agreementId, uint16 epoch) public view returns (bool) {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n        uint256 startTime = sasProxy.getAgreementStartTime(agreementId);\\n\\n        ParametersStorage params = parametersStorage;\\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\\n\\n        if (startTime == 0) revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\\n                agreementId,\\n                startTime,\\n                sasProxy.getAgreementEpochsNumber(agreementId),\\n                epochLength\\n            );\\n\\n        uint256 timeNow = block.timestamp;\\n        uint256 commitWindowDuration = (params.commitWindowDurationPerc() * epochLength) / 100;\\n\\n        if (epoch == 0) {\\n            return timeNow < (startTime + commitWindowDuration);\\n        }\\n\\n        return (timeNow >= (startTime + epochLength * epoch) &&\\n            timeNow < (startTime + epochLength * epoch + commitWindowDuration));\\n    }\\n\\n    function isUpdateCommitWindowOpen(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) public view returns (bool) {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\\n\\n        if (!sasProxy.serviceAgreementExists(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\\n                agreementId,\\n                sasProxy.getAgreementStartTime(agreementId),\\n                sasProxy.getAgreementEpochsNumber(agreementId),\\n                epochLength\\n            );\\n\\n        uint256 commitWindowEnd = sasProxy.getUpdateCommitsDeadline(\\n            keccak256(abi.encodePacked(agreementId, stateIndex))\\n        );\\n\\n        return block.timestamp < commitWindowEnd;\\n    }\\n\\n    function getTopCommitSubmissions(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission[] memory) {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        if (!sasProxy.serviceAgreementExists(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n        if (epoch >= sasProxy.getAgreementEpochsNumber(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementHasBeenExpired(\\n                agreementId,\\n                sasProxy.getAgreementStartTime(agreementId),\\n                sasProxy.getAgreementEpochsNumber(agreementId),\\n                sasProxy.getAgreementEpochLength(agreementId)\\n            );\\n\\n        uint32 r0 = parametersStorage.r0();\\n\\n        ServiceAgreementStructsV1.CommitSubmission[]\\n            memory epochStateCommits = new ServiceAgreementStructsV1.CommitSubmission[](r0);\\n\\n        bytes32 epochSubmissionsHead = sasProxy.getV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\\n\\n        epochStateCommits[0] = sasProxy.getCommitSubmission(epochSubmissionsHead);\\n\\n        bytes32 commitId;\\n        uint72 nextIdentityId = epochStateCommits[0].nextIdentityId;\\n        uint8 submissionsIdx = 1;\\n        while ((submissionsIdx < r0) && (nextIdentityId != 0)) {\\n            commitId = keccak256(abi.encodePacked(agreementId, epoch, stateIndex, nextIdentityId));\\n            epochStateCommits[submissionsIdx] = sasProxy.getCommitSubmission(commitId);\\n\\n            nextIdentityId = epochStateCommits[submissionsIdx].nextIdentityId;\\n\\n            unchecked {\\n                submissionsIdx++;\\n            }\\n        }\\n\\n        return epochStateCommits;\\n    }\\n\\n    function submitCommit(ServiceAgreementStructsV1.CommitInputArgs calldata args) external {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        bytes32 agreementId = hashingProxy.callHashFunction(\\n            args.hashFunctionId,\\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\\n        );\\n\\n        if (!sasProxy.serviceAgreementExists(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n\\n        uint256 latestFinalizedStateIndex = AbstractAsset(args.assetContract).getAssertionIdsLength(args.tokenId) - 1;\\n\\n        if (!reqs[0] && !isCommitWindowOpen(agreementId, args.epoch)) {\\n            uint128 epochLength = sasProxy.getAgreementEpochLength(agreementId);\\n\\n            uint256 actualCommitWindowStart = (sasProxy.getAgreementStartTime(agreementId) + args.epoch * epochLength);\\n\\n            revert ServiceAgreementErrorsV1U1.CommitWindowClosed(\\n                agreementId,\\n                args.epoch,\\n                latestFinalizedStateIndex,\\n                actualCommitWindowStart,\\n                actualCommitWindowStart + (parametersStorage.commitWindowDurationPerc() * epochLength) / 100,\\n                block.timestamp\\n            );\\n        }\\n\\n        uint72 identityId = identityStorage.getIdentityId(msg.sender);\\n\\n        if (!reqs[1] && !shardingTableStorage.nodeExists(identityId)) {\\n            ProfileStorage ps = profileStorage;\\n\\n            revert ServiceAgreementErrorsV1U1.NodeNotInShardingTable(\\n                identityId,\\n                ps.getNodeId(identityId),\\n                ps.getAsk(identityId),\\n                stakingStorage.totalStakes(identityId)\\n            );\\n        }\\n\\n        uint40 score = scoringProxy.callScoreFunction(\\n            sasProxy.getAgreementScoreFunctionId(agreementId),\\n            args.hashFunctionId,\\n            profileStorage.getNodeId(identityId),\\n            args.keyword,\\n            stakingStorage.totalStakes(identityId)\\n        );\\n\\n        _insertCommit(agreementId, args.epoch, latestFinalizedStateIndex, identityId, 0, 0, score);\\n\\n        emit CommitSubmitted(\\n            args.assetContract,\\n            args.tokenId,\\n            args.keyword,\\n            args.hashFunctionId,\\n            args.epoch,\\n            latestFinalizedStateIndex,\\n            identityId,\\n            score\\n        );\\n    }\\n\\n    function submitUpdateCommit(ServiceAgreementStructsV1.CommitInputArgs calldata args) external {\\n        UnfinalizedStateStorage uss = unfinalizedStateStorage;\\n        AbstractAsset generalAssetInterface = AbstractAsset(args.assetContract);\\n\\n        bytes32 unfinalizedState = uss.getUnfinalizedState(args.tokenId);\\n        uint256 unfinalizedStateIndex = generalAssetInterface.getAssertionIdsLength(args.tokenId);\\n\\n        if (uss.getUnfinalizedState(args.tokenId) == bytes32(0)) {\\n            revert ServiceAgreementErrorsV1U1.NoPendingUpdate(args.assetContract, args.tokenId);\\n        }\\n\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        bytes32 agreementId = hashingProxy.callHashFunction(\\n            args.hashFunctionId,\\n            abi.encodePacked(args.assetContract, args.tokenId, args.keyword)\\n        );\\n\\n        if (!sasProxy.serviceAgreementExists(agreementId))\\n            revert ServiceAgreementErrorsV1U1.ServiceAgreementDoesntExist(agreementId);\\n\\n        if (!reqs[2] && !isUpdateCommitWindowOpen(agreementId, args.epoch, unfinalizedStateIndex)) {\\n            uint256 commitWindowEnd = sasProxy.getUpdateCommitsDeadline(\\n                keccak256(abi.encodePacked(agreementId, unfinalizedStateIndex))\\n            );\\n\\n            revert ServiceAgreementErrorsV1U1.CommitWindowClosed(\\n                agreementId,\\n                args.epoch,\\n                unfinalizedStateIndex,\\n                commitWindowEnd - parametersStorage.updateCommitWindowDuration(),\\n                commitWindowEnd,\\n                block.timestamp\\n            );\\n        }\\n\\n        uint72 identityId = identityStorage.getIdentityId(msg.sender);\\n\\n        if (!reqs[3] && !shardingTableStorage.nodeExists(identityId)) {\\n            ProfileStorage ps = profileStorage;\\n\\n            revert ServiceAgreementErrorsV1U1.NodeNotInShardingTable(\\n                identityId,\\n                ps.getNodeId(identityId),\\n                ps.getAsk(identityId),\\n                stakingStorage.totalStakes(identityId)\\n            );\\n        }\\n\\n        uint40 score = scoringProxy.callScoreFunction(\\n            sasProxy.getAgreementScoreFunctionId(agreementId),\\n            args.hashFunctionId,\\n            profileStorage.getNodeId(identityId),\\n            args.keyword,\\n            stakingStorage.totalStakes(identityId)\\n        );\\n\\n        _insertCommit(agreementId, args.epoch, unfinalizedStateIndex, identityId, 0, 0, score);\\n\\n        emit CommitSubmitted(\\n            args.assetContract,\\n            args.tokenId,\\n            args.keyword,\\n            args.hashFunctionId,\\n            args.epoch,\\n            unfinalizedStateIndex,\\n            identityId,\\n            score\\n        );\\n\\n        if (\\n            sasProxy.getCommitsCount(keccak256(abi.encodePacked(agreementId, args.epoch, unfinalizedStateIndex))) ==\\n            parametersStorage.finalizationCommitsNumber()\\n        ) {\\n            if (sasProxy.agreementV1Exists(agreementId)) {\\n                sasProxy.migrateV1ServiceAgreement(agreementId);\\n            }\\n\\n            sasProxy.setAgreementTokenAmount(\\n                agreementId,\\n                sasProxy.getAgreementTokenAmount(agreementId) + sasProxy.getAgreementUpdateTokenAmount(agreementId)\\n            );\\n            sasProxy.setAgreementUpdateTokenAmount(agreementId, 0);\\n\\n            ContentAssetStorage cas = contentAssetStorage;\\n            cas.setAssertionIssuer(args.tokenId, unfinalizedState, uss.getIssuer(args.tokenId));\\n            cas.pushAssertionId(args.tokenId, unfinalizedState);\\n\\n            uss.deleteIssuer(args.tokenId);\\n            uss.deleteUnfinalizedState(args.tokenId);\\n\\n            emit StateFinalized(\\n                args.assetContract,\\n                args.tokenId,\\n                args.keyword,\\n                args.hashFunctionId,\\n                args.epoch,\\n                unfinalizedStateIndex,\\n                unfinalizedState\\n            );\\n        }\\n    }\\n\\n    function setReq(uint256 index, bool req) external onlyHubOwner {\\n        reqs[index] = req;\\n    }\\n\\n    function _insertCommit(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) internal virtual {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        bytes32 commitId = keccak256(abi.encodePacked(agreementId, epoch, stateIndex, identityId));\\n\\n        if (!reqs[4] && sasProxy.commitSubmissionExists(commitId))\\n            revert ServiceAgreementErrorsV1U1.NodeAlreadySubmittedCommit(\\n                agreementId,\\n                epoch,\\n                stateIndex,\\n                identityId,\\n                profileStorage.getNodeId(identityId)\\n            );\\n\\n        bytes32 refCommitId = sasProxy.getV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\\n\\n        ParametersStorage params = parametersStorage;\\n\\n        uint72 refCommitNextIdentityId = sasProxy.getCommitSubmissionNextIdentityId(refCommitId);\\n        uint32 r0 = params.r0();\\n        uint8 i;\\n        while ((score < sasProxy.getCommitSubmissionScore(refCommitId)) && (refCommitNextIdentityId != 0) && (i < r0)) {\\n            refCommitId = keccak256(abi.encodePacked(agreementId, epoch, stateIndex, refCommitNextIdentityId));\\n\\n            refCommitNextIdentityId = sasProxy.getCommitSubmissionNextIdentityId(refCommitId);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (!reqs[5] && (i >= r0))\\n            revert ServiceAgreementErrorsV1U1.NodeNotAwarded(\\n                agreementId,\\n                epoch,\\n                stateIndex,\\n                identityId,\\n                profileStorage.getNodeId(identityId),\\n                i\\n            );\\n\\n        sasProxy.createV1U1CommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n\\n        ServiceAgreementStructsV1.CommitSubmission memory refCommit = sasProxy.getCommitSubmission(refCommitId);\\n\\n        if ((i == 0) && (refCommit.identityId == 0)) {\\n            //  No head -> Setting new head\\n            sasProxy.setV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex, commitId);\\n        } else if ((i == 0) && (score <= refCommit.score)) {\\n            // There is a head with higher or equal score, add new commit on the right\\n            _linkCommits(agreementId, epoch, stateIndex, refCommit.identityId, identityId);\\n        } else if ((i == 0) && (score > refCommit.score)) {\\n            // There is a head with lower score, replace the head\\n            sasProxy.setV1U1AgreementEpochSubmissionHead(agreementId, epoch, stateIndex, commitId);\\n            _linkCommits(agreementId, epoch, stateIndex, identityId, refCommit.identityId);\\n        } else if (score > refCommit.score) {\\n            // [H] - head\\n            // [RC] - reference commit\\n            // [RC-] - commit before reference commit\\n            // [RC+] - commit after reference commit\\n            // [NC] - new commit\\n            // [] <-> [H] <-> [X] ... [RC-] <-> [RC] <-> [RC+] ... [C] <-> []\\n            // [] <-> [H] <-> [X] ... [RC-] <-(NL)-> [NC] <-(NL)-> [RC] <-> [RC+] ... [C] <-> []\\n            _linkCommits(agreementId, epoch, stateIndex, refCommit.prevIdentityId, identityId);\\n            _linkCommits(agreementId, epoch, stateIndex, identityId, refCommit.identityId);\\n        } else {\\n            // [] <-> [H] <-> [RC] <-> []\\n            // [] <-> [H] <-> [RC] <-(NL)-> [NC] <-> []\\n            _linkCommits(agreementId, epoch, stateIndex, refCommit.identityId, identityId);\\n        }\\n\\n        sasProxy.incrementCommitsCount(keccak256(abi.encodePacked(agreementId, epoch, stateIndex)));\\n    }\\n\\n    function _linkCommits(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 leftIdentityId,\\n        uint72 rightIdentityId\\n    ) internal virtual {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n\\n        sasProxy.setCommitSubmissionNextIdentityId(\\n            keccak256(abi.encodePacked(agreementId, epoch, stateIndex, leftIdentityId)), // leftCommitId\\n            rightIdentityId\\n        );\\n\\n        sasProxy.setCommitSubmissionPrevIdentityId(\\n            keccak256(abi.encodePacked(agreementId, epoch, stateIndex, rightIdentityId)), // rightCommitId\\n            leftIdentityId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8ee543faf8f6002abef2b9016b9d8d52e39a563e342739b79a5ee424491bc8b6\",\"license\":\"MIT\"},\"contracts/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ICustodian} from \\\"./interface/ICustodian.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Guardian is HubDependent {\\n    event TokenTransferred(address indexed custodian, uint256 amount);\\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\\n\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function transferTokens(address payable custodian) external onlyHubOwner {\\n        require(custodian != address(0x0), \\\"Custodian cannot be a zero address\\\");\\n        uint contractSize;\\n        assembly {\\n            contractSize := extcodesize(custodian)\\n        }\\n        require(contractSize > 0, \\\"Cannot transfer tokens to custodian that is not a contract!\\\");\\n\\n        ICustodian custodianContract = ICustodian(custodian);\\n        bool hasOwnersFunction = false;\\n        try custodianContract.getOwners() returns (address[] memory owners) {\\n            hasOwnersFunction = true;\\n            require(owners.length > 0, \\\"Cannot transfer tokens to custodian without owners defined!\\\");\\n        } catch {}\\n        require(hasOwnersFunction, \\\"Cannot transfer tokens to custodian without getOwners function!\\\");\\n\\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\\n        require(transactionResult, \\\"Token transaction execution failed!\\\");\\n\\n        emit TokenTransferred(custodian, balanceTransferred);\\n    }\\n\\n    function withdrawMisplacedOTP() external onlyHubOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\\n    }\\n\\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\\n        require(tokenContractAddress != address(tokenContract), \\\"Cannot use this function with the TRAC contract\\\");\\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\\n\\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\\n        if (balance > 0) {\\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\\n            require(transactionResult, \\\"Token transaction execution failed\\\");\\n        }\\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcef9797032f7c9aae94d003e52a83ae8e978b1ca5b3fbca261e552252d3de8\",\"license\":\"MIT\"},\"contracts/HashingProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {IHashFunction} from \\\"./interface/IHashFunction.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedIndexableContractDynamicSetLib} from \\\"./utils/UnorderedIndexableContractDynamicSet.sol\\\";\\n\\ncontract HashingProxy is Named, Versioned, ContractStatus {\\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\\n\\n    event NewHashFunctionContract(uint8 indexed hashFunctionId, address newContractAddress);\\n    event HashFunctionContractChanged(uint8 indexed hashFunctionId, address newContractAddress);\\n\\n    string private constant _NAME = \\\"HashingProxy\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    UnorderedIndexableContractDynamicSetLib.Set internal hashFunctionSet;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(uint8 hashFunctionId, address hashingContractAddress) external onlyHubOwner {\\n        if (hashFunctionSet.exists(hashFunctionId)) {\\n            hashFunctionSet.update(hashFunctionId, hashingContractAddress);\\n            emit HashFunctionContractChanged(hashFunctionId, hashingContractAddress);\\n        } else {\\n            hashFunctionSet.append(hashFunctionId, hashingContractAddress);\\n            emit NewHashFunctionContract(hashFunctionId, hashingContractAddress);\\n        }\\n    }\\n\\n    function removeContract(uint8 hashFunctionId) external onlyHubOwner {\\n        hashFunctionSet.remove(hashFunctionId);\\n    }\\n\\n    function callHashFunction(uint8 hashFunctionId, bytes calldata data) external view returns (bytes32) {\\n        return IHashFunction(hashFunctionSet.get(hashFunctionId).addr).hash(data);\\n    }\\n\\n    function getHashFunctionName(uint8 hashFunctionId) external view returns (string memory) {\\n        return Named(hashFunctionSet.get(hashFunctionId).addr).name();\\n    }\\n\\n    function getHashFunctionContractAddress(uint8 hashFunctionId) external view returns (address) {\\n        return hashFunctionSet.get(hashFunctionId).addr;\\n    }\\n\\n    function getAllHashFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\\n        return hashFunctionSet.getAll();\\n    }\\n\\n    function isHashFunction(uint8 hashFunctionId) external view returns (bool) {\\n        return hashFunctionSet.exists(hashFunctionId);\\n    }\\n}\\n\",\"keccak256\":\"0x025adfeec4c165b83247442a9d36fee0bf311c01c3527bbd23401ce9879f5eee\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/ScoringProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {IScoreFunction} from \\\"./interface/IScoreFunction.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedIndexableContractDynamicSetLib} from \\\"./utils/UnorderedIndexableContractDynamicSet.sol\\\";\\n\\ncontract ScoringProxy is Named, Versioned, ContractStatus {\\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\\n\\n    event NewScoringFunctionContract(uint8 indexed scoreFunctionId, address newContractAddress);\\n    event ScoringFunctionContractUpdated(uint8 indexed scoreFunctionId, address newContractAddress);\\n\\n    string private constant _NAME = \\\"ScoringProxy\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    UnorderedIndexableContractDynamicSetLib.Set internal scoreFunctionSet;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(uint8 scoreFunctionId, address scoringContractAddress) external onlyHubOwner {\\n        if (scoreFunctionSet.exists(scoreFunctionId)) {\\n            emit ScoringFunctionContractUpdated(scoreFunctionId, scoringContractAddress);\\n            scoreFunctionSet.update(scoreFunctionId, scoringContractAddress);\\n        } else {\\n            emit NewScoringFunctionContract(scoreFunctionId, scoringContractAddress);\\n            scoreFunctionSet.append(scoreFunctionId, scoringContractAddress);\\n        }\\n    }\\n\\n    function removeContract(uint8 scoreFunctionId) external onlyHubOwner {\\n        scoreFunctionSet.remove(scoreFunctionId);\\n    }\\n\\n    function callScoreFunction(\\n        uint8 scoreFunctionId,\\n        uint8 hashFunctionId,\\n        bytes calldata nodeId,\\n        bytes calldata keyword,\\n        uint96 stake\\n    ) external view returns (uint40) {\\n        IScoreFunction scoringFunction = IScoreFunction(scoreFunctionSet.get(scoreFunctionId).addr);\\n        uint256 distance = scoringFunction.calculateDistance(hashFunctionId, nodeId, keyword);\\n        return scoringFunction.calculateScore(distance, stake);\\n    }\\n\\n    function getScoreFunctionName(uint8 scoreFunctionId) external view returns (string memory) {\\n        return Named(scoreFunctionSet.get(scoreFunctionId).addr).name();\\n    }\\n\\n    function getScoreFunctionContractAddress(uint8 scoreFunctionId) external view returns (address) {\\n        return scoreFunctionSet.get(scoreFunctionId).addr;\\n    }\\n\\n    function getAllScoreFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\\n        return scoreFunctionSet.getAll();\\n    }\\n\\n    function isScoreFunction(uint8 scoreFunctionId) external view returns (bool) {\\n        return scoreFunctionSet.exists(scoreFunctionId);\\n    }\\n}\\n\",\"keccak256\":\"0x859ffe3d07864b258f16bd86e33e75f005971dd24b4a6760855679bda1207dee\",\"license\":\"MIT\"},\"contracts/ShardingTable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"./structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"./constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTable is Named, Versioned, ContractStatus, Initializable {\\n    event NodeAdded(uint72 indexed identityId, bytes nodeId, uint96 ask, uint96 stake);\\n    event NodeRemoved(uint72 indexed identityId, bytes nodeId);\\n\\n    string private constant _NAME = \\\"ShardingTable\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    ProfileStorage public profileStorage;\\n    ShardingTableStorage public shardingTableStorage;\\n    StakingStorage public stakingStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        return _getShardingTable(startingIdentityId, nodesNumber);\\n    }\\n\\n    function getShardingTable() external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStorage sts = shardingTableStorage;\\n        return _getShardingTable(sts.head(), sts.nodesCount());\\n    }\\n\\n    function pushBack(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.tail() != NULL) sts.link(sts.tail(), identityId);\\n\\n        sts.setTail(identityId);\\n\\n        if (sts.head() == NULL) sts.setHead(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function pushFront(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.head() != NULL) sts.link(identityId, sts.head());\\n\\n        shardingTableStorage.setHead(identityId);\\n\\n        if (sts.tail() == NULL) sts.setTail(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function removeNode(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        ShardingTableStructs.Node memory nodeToRemove = sts.getNode(identityId);\\n\\n        uint72 head = sts.head();\\n        uint72 tail = sts.tail();\\n\\n        if ((head == identityId) && (tail == identityId)) {\\n            sts.setHead(NULL);\\n            sts.setTail(NULL);\\n        } else if (tail == identityId) {\\n            sts.setTail(nodeToRemove.prevIdentityId);\\n            sts.setNextIdentityId(tail, NULL);\\n        } else if (head == identityId) {\\n            sts.setHead(nodeToRemove.nextIdentityId);\\n            sts.setPrevIdentityId(head, NULL);\\n        } else {\\n            sts.link(nodeToRemove.prevIdentityId, nodeToRemove.nextIdentityId);\\n        }\\n\\n        sts.deleteNodeObject(identityId);\\n        sts.decrementNodesCount();\\n\\n        emit NodeRemoved(identityId, ps.getNodeId(identityId));\\n    }\\n\\n    function _getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) internal view virtual returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStructs.NodeInfo[] memory nodesPage;\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        if ((sts.nodesCount() == 0) || (nodesNumber == 0)) {\\n            return nodesPage;\\n        }\\n\\n        ShardingTableStructs.Node memory startingNode = sts.getNode(startingIdentityId);\\n\\n        require((startingIdentityId == NULL) || (startingNode.identityId != NULL), \\\"Wrong starting Identity ID\\\");\\n\\n        nodesPage = new ShardingTableStructs.NodeInfo[](nodesNumber);\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        nodesPage[0] = ShardingTableStructs.NodeInfo({\\n            nodeId: ps.getNodeId(startingIdentityId),\\n            identityId: startingIdentityId,\\n            ask: ps.getAsk(startingNode.identityId),\\n            stake: ss.totalStakes(startingNode.identityId)\\n        });\\n\\n        uint72 nextIdentityId = startingIdentityId;\\n        uint72 i = 1;\\n        while ((i < nodesNumber) && (nextIdentityId != NULL)) {\\n            nextIdentityId = sts.getNode(nextIdentityId).nextIdentityId;\\n\\n            nodesPage[i] = ShardingTableStructs.NodeInfo({\\n                nodeId: ps.getNodeId(nextIdentityId),\\n                identityId: nextIdentityId,\\n                ask: ps.getAsk(nextIdentityId),\\n                stake: ss.totalStakes(nextIdentityId)\\n            });\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n}\\n\",\"keccak256\":\"0xdc5fcd9c08b1794fc7c251733a15ae9af7f8744ec80b1a70924f6219ca3e62cd\",\"license\":\"MIT\"},\"contracts/Shares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract Shares is HubDependent, ERC20, ERC20Burnable {\\n    constructor(\\n        address hubAddress,\\n        string memory name,\\n        string memory symbol\\n    )\\n        HubDependent(hubAddress)\\n        ERC20(name, symbol) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function mint(address to, uint256 amount) external onlyContracts {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5ba555c0e9109f8e9a17a98a7a30643c9849059ea9b80693c9e2d460d679666d\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ShardingTable} from \\\"./ShardingTable.sol\\\";\\nimport {Shares} from \\\"./Shares.sol\\\";\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ParametersStorage} from \\\"./storage/ParametersStorage.sol\\\";\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ServiceAgreementStorageProxy} from \\\"./storage/ServiceAgreementStorageProxy.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ADMIN_KEY} from \\\"./constants/IdentityConstants.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Staking is Named, Versioned, ContractStatus, Initializable {\\n    event StakeIncreased(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        address indexed staker,\\n        uint96 oldStake,\\n        uint96 newStake\\n    );\\n    event StakeWithdrawalStarted(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        address indexed staker,\\n        uint96 oldStake,\\n        uint96 newStake,\\n        uint256 withdrawalPeriodEnd\\n    );\\n    event StakeWithdrawn(uint72 indexed identityId, bytes nodeId, address indexed staker, uint96 withdrawnStakeAmount);\\n    event AccumulatedOperatorFeeIncreased(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        uint96 oldAccumulatedOperatorFee,\\n        uint96 newAccumulatedOperatorFee\\n    );\\n    event OperatorFeeUpdated(uint72 indexed identityId, bytes nodeId, uint8 operatorFee);\\n\\n    string private constant _NAME = \\\"Staking\\\";\\n    string private constant _VERSION = \\\"1.0.2\\\";\\n\\n    ShardingTable public shardingTableContract;\\n    IdentityStorage public identityStorage;\\n    ParametersStorage public parametersStorage;\\n    ProfileStorage public profileStorage;\\n    StakingStorage public stakingStorage;\\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\\n    ShardingTableStorage public shardingTableStorage;\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    modifier onlyAdmin(uint72 identityId) {\\n        _checkAdmin(identityId);\\n        _;\\n    }\\n\\n    function initialize() public onlyHubOwner {\\n        shardingTableContract = ShardingTable(hub.getContractAddress(\\\"ShardingTable\\\"));\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n        parametersStorage = ParametersStorage(hub.getContractAddress(\\\"ParametersStorage\\\"));\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\\n            hub.getContractAddress(\\\"ServiceAgreementStorageProxy\\\")\\n        );\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function addStake(address sender, uint72 identityId, uint96 stakeAmount) external onlyContracts {\\n        _addStake(sender, identityId, stakeAmount);\\n    }\\n\\n    function addStake(uint72 identityId, uint96 stakeAmount) external onlyAdmin(identityId) {\\n        _addStake(msg.sender, identityId, stakeAmount);\\n    }\\n\\n    function startStakeWithdrawal(uint72 identityId, uint96 sharesToBurn) external {\\n        require(sharesToBurn != 0, \\\"Withdrawal amount cannot be 0\\\");\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\\n\\n        require(sharesToBurn <= sharesContract.balanceOf(msg.sender), \\\"sharesToBurn must be <= balance\\\");\\n\\n        uint96 oldStake = ss.totalStakes(identityId);\\n        uint96 stakeWithdrawalAmount = uint96((uint256(oldStake) * sharesToBurn) / sharesContract.totalSupply());\\n        uint96 newStake = oldStake - stakeWithdrawalAmount;\\n        uint96 newStakeWithdrawalAmount = ss.getWithdrawalRequestAmount(identityId, msg.sender) + stakeWithdrawalAmount;\\n\\n        ParametersStorage params = parametersStorage;\\n\\n        uint256 withdrawalPeriodEnd = block.timestamp + params.stakeWithdrawalDelay();\\n        ss.createWithdrawalRequest(identityId, msg.sender, newStakeWithdrawalAmount, withdrawalPeriodEnd);\\n        ss.setTotalStake(identityId, newStake);\\n        sharesContract.burnFrom(msg.sender, sharesToBurn);\\n\\n        if (shardingTableStorage.nodeExists(identityId) && (newStake < params.minimumStake())) {\\n            shardingTableContract.removeNode(identityId);\\n        }\\n\\n        emit StakeWithdrawalStarted(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            msg.sender,\\n            oldStake,\\n            newStake,\\n            withdrawalPeriodEnd\\n        );\\n    }\\n\\n    function withdrawStake(uint72 identityId) external {\\n        ProfileStorage ps = profileStorage;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        StakingStorage ss = stakingStorage;\\n\\n        uint96 stakeWithdrawalAmount;\\n        uint256 withdrawalTimestamp;\\n        (stakeWithdrawalAmount, withdrawalTimestamp) = ss.withdrawalRequests(identityId, msg.sender);\\n\\n        require(stakeWithdrawalAmount != 0, \\\"Withdrawal hasn't been initiated\\\");\\n        require(withdrawalTimestamp < block.timestamp, \\\"Withdrawal period hasn't ended\\\");\\n\\n        ss.deleteWithdrawalRequest(identityId, msg.sender);\\n        ss.transferStake(msg.sender, stakeWithdrawalAmount);\\n\\n        emit StakeWithdrawn(identityId, ps.getNodeId(identityId), msg.sender, stakeWithdrawalAmount);\\n    }\\n\\n    function addReward(bytes32 agreementId, uint72 identityId, uint96 rewardAmount) external onlyContracts {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n        StakingStorage ss = stakingStorage;\\n\\n        uint96 operatorFee = (rewardAmount * ss.operatorFees(identityId)) / 100;\\n        uint96 delegatorsReward = rewardAmount - operatorFee;\\n\\n        ProfileStorage ps = profileStorage;\\n\\n        uint96 oldAccumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\\n        uint96 oldStake = ss.totalStakes(identityId);\\n\\n        if (operatorFee != 0) {\\n            ps.setAccumulatedOperatorFee(identityId, oldAccumulatedOperatorFee + operatorFee);\\n            sasProxy.transferAgreementTokens(agreementId, address(ps), operatorFee);\\n        }\\n\\n        if (delegatorsReward != 0) {\\n            ss.setTotalStake(identityId, oldStake + delegatorsReward);\\n            sasProxy.transferAgreementTokens(agreementId, address(ss), delegatorsReward);\\n\\n            if (!shardingTableStorage.nodeExists(identityId) && oldStake >= parametersStorage.minimumStake()) {\\n                shardingTableContract.pushBack(identityId);\\n            }\\n        }\\n\\n        emit AccumulatedOperatorFeeIncreased(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            oldAccumulatedOperatorFee,\\n            oldAccumulatedOperatorFee + operatorFee\\n        );\\n\\n        address sasAddress;\\n        if (sasProxy.agreementV1Exists(agreementId)) {\\n            sasAddress = sasProxy.agreementV1StorageAddress();\\n        } else {\\n            sasAddress = sasProxy.agreementV1U1StorageAddress();\\n        }\\n\\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sasAddress, oldStake, oldStake + delegatorsReward);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function slash(uint72 identityId) external onlyContracts {\\n        // TBD\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint8 operatorFee) external onlyAdmin(identityId) {\\n        require(operatorFee <= 100, \\\"Operator fee out of [0, 100]\\\");\\n        stakingStorage.setOperatorFee(identityId, operatorFee);\\n\\n        emit OperatorFeeUpdated(identityId, profileStorage.getNodeId(identityId), operatorFee);\\n    }\\n\\n    function _addStake(address sender, uint72 identityId, uint96 stakeAmount) internal virtual {\\n        StakingStorage ss = stakingStorage;\\n        ProfileStorage ps = profileStorage;\\n        ParametersStorage params = parametersStorage;\\n        IERC20 tknc = tokenContract;\\n\\n        uint96 oldStake = ss.totalStakes(identityId);\\n        uint96 newStake = oldStake + stakeAmount;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n        require(tknc.allowance(sender, address(this)) >= stakeAmount, \\\"Allowance < stakeAmount\\\");\\n        require(newStake <= params.maximumStake(), \\\"Exceeded the maximum stake\\\");\\n\\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\\n\\n        uint256 sharesMinted;\\n        if (sharesContract.totalSupply() == 0) {\\n            sharesMinted = stakeAmount;\\n        } else {\\n            sharesMinted = ((stakeAmount * sharesContract.totalSupply()) / oldStake);\\n        }\\n        sharesContract.mint(sender, sharesMinted);\\n\\n        ss.setTotalStake(identityId, newStake);\\n        tknc.transferFrom(sender, address(ss), stakeAmount);\\n\\n        if (!shardingTableStorage.nodeExists(identityId) && newStake >= params.minimumStake()) {\\n            shardingTableContract.pushBack(identityId);\\n        }\\n\\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sender, oldStake, newStake);\\n    }\\n\\n    function _checkAdmin(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\\n            \\\"Admin function\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8100c10505e4d64c2f1f7f388616bc7d82c3a00fa66299cfb79ad4e3a6538d9a\",\"license\":\"MIT\"},\"contracts/abstract/AbstractAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\nabstract contract AbstractAsset is Named, Versioned, HubDependent {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function getAssertionIds(uint256 tokenId) public view virtual returns (bytes32[] memory);\\n\\n    function getLatestAssertionId(uint256 tokenId) external view returns (bytes32) {\\n        bytes32[] memory assertions = getAssertionIds(tokenId);\\n        return assertions[assertions.length - 1];\\n    }\\n\\n    function getAssertionIdByIndex(uint256 tokenId, uint256 index) external view returns (bytes32) {\\n        bytes32[] memory assertions = getAssertionIds(tokenId);\\n        return assertions[index];\\n    }\\n\\n    function getAssertionIdsLength(uint256 tokenId) external view returns (uint256) {\\n        return getAssertionIds(tokenId).length;\\n    }\\n}\\n\",\"keccak256\":\"0x3facdea0bc5feabf23b7ff13898e036a6b3a521dfc849a461b564032737f8bf3\",\"license\":\"MIT\"},\"contracts/abstract/ContractStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./HubDependent.sol\\\";\\n\\nabstract contract ContractStatus is HubDependent {\\n    bool public status;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function setStatus(bool _status) external onlyHubOwner {\\n        status = _status;\\n    }\\n}\\n\",\"keccak256\":\"0x1a770a3dea223c33b0d6d7e522186af2b41e6d1012209f329cd4b3cf4180ef61\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/constants/IdentityConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint256 constant ADMIN_KEY = 1;\\nuint256 constant OPERATIONAL_KEY = 2;\\nuint256 constant ECDSA = 1;\\nuint256 constant RSA = 2;\\n\",\"keccak256\":\"0x29659af4aa4e72f889ceee74029f11aac7d40b5a3f6d3f55323863be1a2a587c\",\"license\":\"MIT\"},\"contracts/constants/ShardingTableConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint72 constant NULL = 0;\\n\",\"keccak256\":\"0xe80366170c622c9277da5d2bfbe7883b4b2e9d77c8f9407a3ce964c99ab24aa7\",\"license\":\"MIT\"},\"contracts/errors/GeneralErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary GeneralErrors {\\n    error OnlyHubOwnerFunction(address caller);\\n    error OnlyHubContractsFunction(address caller);\\n}\\n\",\"keccak256\":\"0x8b4676f9bcab2615efa6de8c4dd9a6b56a51388dd3dc4f3cab46b2951f3d53eb\",\"license\":\"MIT\"},\"contracts/errors/ServiceAgreementErrorsV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementErrorsV1U1 {\\n    error ServiceAgreementDoesntExist(bytes32 agreementId);\\n    error EmptyAssetCreatorAddress();\\n    error AssetStorageNotInTheHub(address contractAddress);\\n    error EmptyKeyword();\\n    error ZeroEpochsNumber();\\n    error ZeroTokenAmount();\\n    error ScoreFunctionDoesntExist(uint8 scoreFunctionId);\\n    error HashFunctionDoesntExist(uint8 hashFunctionId);\\n    error TooLowAllowance(uint256 amount);\\n    error TooLowBalance(uint256 amount);\\n    error ServiceAgreementHasBeenExpired(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength\\n    );\\n    error CommitWindowClosed(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint256 commitWindowOpen,\\n        uint256 commitWindowClose,\\n        uint256 timeNow\\n    );\\n    error NodeNotInShardingTable(uint72 identityId, bytes nodeId, uint96 ask, uint96 stake);\\n    error ProofWindowClosed(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint256 proofWindowOpen,\\n        uint256 proofWindowClose,\\n        uint256 timeNow\\n    );\\n    error NodeAlreadyRewarded(bytes32 agreementId, uint16 epoch, uint256 stateIndex, uint72 identityId, bytes nodeId);\\n    error NodeNotAwarded(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        bytes nodeId,\\n        uint8 rank\\n    );\\n    error WrongMerkleProof(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        bytes nodeId,\\n        bytes32[] merkleProof,\\n        bytes32 merkleRoot,\\n        bytes32 chunkHash,\\n        uint256 challenge\\n    );\\n    error NodeAlreadySubmittedCommit(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        uint72 identityId,\\n        bytes nodeId\\n    );\\n    error NoPendingUpdate(address assetStorage, uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xa12c3a2af6ee9118b2172c7412e2d33890332772cb8588c0e4cbc8d08add0a53\",\"license\":\"MIT\"},\"contracts/errors/assets/ContentAssetErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ContentAssetErrors {\\n    error AssetDoesntExist(uint256 tokenId);\\n    error AssetExpired(uint256 tokenId);\\n    error CommitPhaseOngoing(bytes32 agreementId);\\n    error CommitPhaseSucceeded(bytes32 agreementId);\\n    error FirstEpochHasAlreadyEnded(bytes32 agreementId);\\n    error NoPendingUpdate(address assetStorage, uint256 tokenId);\\n    error UpdateIsNotFinalized(address assetStorage, uint256 tokenId, bytes32 latestState);\\n    error PendingUpdateFinalization(address assetStorage, uint256 tokenId, uint256 latestStateIndex);\\n}\\n\",\"keccak256\":\"0xc79bcd0071e145d7053ff478d32535eda0f53a795a3060dad36263a9293aeb33\",\"license\":\"MIT\"},\"contracts/interface/ICustodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ICustodian {\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf9c1575729c595ec1c4c6cec71e0890774efda80299b476b3c243b4fd168c69d\",\"license\":\"MIT\"},\"contracts/interface/IERC734Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IERC734Extended {\\n    event KeyAdded(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\\n    event KeyRemoved(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\\n\\n    struct Key {\\n        uint256 purpose; //e.g., ADMIN_KEY = 1, OPERATIONAL_KEY = 2, etc.\\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\\n        bytes32 key;\\n    }\\n\\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n\\n    function removeKey(uint72 identityId, bytes32 _key) external;\\n\\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n\\n    function getKey(\\n        uint72 identityId,\\n        bytes32 _key\\n    ) external view returns (uint256 purpose, uint256 keyType, bytes32 key);\\n\\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view returns (bytes32[] memory keys);\\n}\\n\",\"keccak256\":\"0xf96ebcda84c7f83dc1f91f97caf955724ef10c6f243a68f346e2715cc8700a88\",\"license\":\"MIT\"},\"contracts/interface/IHashFunction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IHashFunction {\\n    function hash(bytes calldata data) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2fca3d77fdcb26c5026f75259e19b326354d5c759775838fd070b49a766c75bd\",\"license\":\"MIT\"},\"contracts/interface/IScoreFunction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScoreFunction {\\n    function calculateScore(uint256 distance, uint96 stake) external view returns (uint40);\\n\\n    function calculateDistance(\\n        uint8 hashFunctionId,\\n        bytes calldata nodeId,\\n        bytes calldata keyword\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x28e494c1d81aeaba8d3c96035a07e56139a991a741a9165d4f55f400b4d71d31\",\"license\":\"MIT\"},\"contracts/interface/Indexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Indexable {\\n    function id() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa5142e26633487e63c7448e3419186e24b97353b5d5c0b5b2886c2d15884cd9d\",\"license\":\"MIT\"},\"contracts/interface/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Initializable {\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0xac823de4540de0fac2d1ec548a5083404ab8abd858c34a69f4f8947b24789507\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {IERC734Extended} from \\\"../interface/IERC734Extended.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ByteArr} from \\\"../utils/ByteArr.sol\\\";\\nimport {OPERATIONAL_KEY} from \\\"../constants/IdentityConstants.sol\\\";\\n\\ncontract IdentityStorage is IERC734Extended, Named, Versioned, HubDependent {\\n    using ByteArr for bytes32[];\\n\\n    string private constant _NAME = \\\"IdentityStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 private _identityId;\\n\\n    struct Identity {\\n        mapping(bytes32 => Key) keys;\\n        mapping(uint256 => bytes32[]) keysByPurpose;\\n    }\\n\\n    // operationalKey => identityId\\n    mapping(bytes32 => uint72) public identityIds;\\n    // identityId => Identity\\n    mapping(uint72 => Identity) internal identities;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        _identityId = 1;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function deleteIdentity(uint72 identityId) external onlyContracts {\\n        bytes32[] memory operationalKeys = identities[identityId].keysByPurpose[OPERATIONAL_KEY];\\n        uint256 operationalKeysNumber = operationalKeys.length;\\n\\n        for (uint256 i; i < operationalKeysNumber; ) {\\n            delete identityIds[operationalKeys[i]];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        delete identities[identityId];\\n    }\\n\\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _type) external override onlyContracts {\\n        Identity storage identity = identities[identityId];\\n        identity.keys[_key].purpose = _purpose;\\n        identity.keys[_key].keyType = _type;\\n        identity.keys[_key].key = _key;\\n        identity.keysByPurpose[_purpose].push(_key);\\n\\n        emit KeyAdded(identityId, _key, _purpose, _type);\\n    }\\n\\n    function removeKey(uint72 identityId, bytes32 _key) external override onlyContracts {\\n        Identity storage identity = identities[identityId];\\n\\n        uint256 index;\\n        (index, ) = identity.keysByPurpose[identity.keys[_key].purpose].indexOf(_key);\\n        identity.keysByPurpose[identity.keys[_key].purpose].removeByIndex(index);\\n\\n        delete identity.keys[_key];\\n\\n        emit KeyRemoved(identityId, identity.keys[_key].key, identity.keys[_key].purpose, identity.keys[_key].keyType);\\n    }\\n\\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view override returns (bool) {\\n        return identities[identityId].keys[_key].purpose == _purpose;\\n    }\\n\\n    function getKey(uint72 identityId, bytes32 _key) external view override returns (uint256, uint256, bytes32) {\\n        return (\\n            identities[identityId].keys[_key].purpose,\\n            identities[identityId].keys[_key].keyType,\\n            identities[identityId].keys[_key].key\\n        );\\n    }\\n\\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view override returns (bytes32[] memory) {\\n        return identities[identityId].keysByPurpose[_purpose];\\n    }\\n\\n    function getIdentityId(address operational) external view returns (uint72) {\\n        return identityIds[keccak256(abi.encodePacked(operational))];\\n    }\\n\\n    function setOperationalKeyIdentityId(bytes32 operationalKey, uint72 identityId) external onlyContracts {\\n        identityIds[operationalKey] = identityId;\\n    }\\n\\n    function removeOperationalKeyIdentityId(bytes32 operationalKey) external onlyContracts {\\n        delete identityIds[operationalKey];\\n    }\\n\\n    function generateIdentityId() external onlyContracts returns (uint72) {\\n        unchecked {\\n            return _identityId++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50d2f7a594213a4f2b6bf35019bafbab59b6a6b7cb151680031d3c8db572a0b1\",\"license\":\"MIT\"},\"contracts/storage/ParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ParametersStorage is Named, Versioned, HubDependent {\\n    event ParameterChanged(string parameterName, uint256 parameterValue);\\n\\n    string private constant _NAME = \\\"ParametersStorage\\\";\\n    string private constant _VERSION = \\\"1.1.0\\\";\\n\\n    // 0 - minProofWindowOffsetPerc\\n    // 1 - maxProofWindowOffsetPerc\\n    // 2 - commitWindowDurationPerc\\n    // 3 - proofWindowDurationPerc\\n    // 4 - replacementWindowDurationPerc\\n    // 5 - finalizationCommitsNumber\\n    uint8[6] internal args1;\\n\\n    // 0 - r0\\n    // 1 - r1\\n    // 2 - slashingFreezeDuration\\n    uint32[3] internal args2;\\n    uint48 public r2;\\n\\n    // 0 - minimumStake\\n    // 1 - maximumStake\\n    uint96[2] internal args3;\\n\\n    uint128 public epochLength;\\n\\n    // 0 - stakeWithdrawalDelay\\n    // 1 - rewardWithdrawalDelay\\n    uint24[2] internal args4;\\n\\n    uint16 public updateCommitWindowDuration;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        // minimumStake\\n        args3[0] = 50_000 ether;\\n        // maximumStake\\n        args3[1] = 5_000_000 ether;\\n\\n        r2 = 20;\\n        // r1\\n        args2[1] = 8;\\n        // r0\\n        args2[0] = 3;\\n\\n        // minProofWindowOffsetPerc\\n        args1[0] = 50;\\n        // maxProofWindowOffsetPerc\\n        args1[1] = 75;\\n        // commitWindowDurationPerc\\n        args1[2] = 25;\\n        // proofWindowDurationPerc\\n        args1[3] = 25;\\n        // replacementWindowDurationPerc\\n        args1[4] = 0;\\n\\n        epochLength = 90 days;\\n\\n        // stakeWithdrawalDelay\\n        args4[0] = 5 minutes;\\n        // rewardWithdrawalDelay\\n        args4[1] = 5 minutes;\\n        // slashingFreezeDuration\\n        args2[2] = 730 days;\\n\\n        updateCommitWindowDuration = 30 minutes;\\n\\n        // finalizationCommitsNumber\\n        args1[5] = 3;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function minimumStake() external view returns (uint96) {\\n        return args3[0];\\n    }\\n\\n    function setMinimumStake(uint96 newMinimumStake) external onlyHubOwner {\\n        args3[0] = newMinimumStake;\\n\\n        emit ParameterChanged(\\\"minimumStake\\\", newMinimumStake);\\n    }\\n\\n    function maximumStake() external view returns (uint96) {\\n        return args3[1];\\n    }\\n\\n    function setMaximumStake(uint96 newMaximumStake) external onlyHubOwner {\\n        args3[1] = newMaximumStake;\\n\\n        emit ParameterChanged(\\\"maximumStake\\\", newMaximumStake);\\n    }\\n\\n    function setR2(uint48 newR2) external onlyHubOwner {\\n        r2 = newR2;\\n\\n        emit ParameterChanged(\\\"r2\\\", newR2);\\n    }\\n\\n    function r1() external view returns (uint32) {\\n        return args2[1];\\n    }\\n\\n    function setR1(uint32 newR1) external onlyHubOwner {\\n        require(newR1 >= (2 * args2[0] - 1), \\\"R1 should be >= 2*R0-1\\\");\\n\\n        args2[1] = newR1;\\n\\n        emit ParameterChanged(\\\"r1\\\", newR1);\\n    }\\n\\n    function r0() external view returns (uint32) {\\n        return args2[0];\\n    }\\n\\n    function setR0(uint32 newR0) external onlyHubOwner {\\n        require(newR0 <= ((args2[1] + 1) / 2), \\\"R0 should be <= (R1+1)/2\\\");\\n\\n        args2[0] = newR0;\\n\\n        emit ParameterChanged(\\\"r0\\\", newR0);\\n    }\\n\\n    function minProofWindowOffsetPerc() external view returns (uint8) {\\n        return args1[0];\\n    }\\n\\n    function setMinProofWindowOffsetPerc(uint8 newMinProofWindowOffsetPerc) external onlyHubOwner {\\n        args1[0] = newMinProofWindowOffsetPerc;\\n\\n        emit ParameterChanged(\\\"minProofWindowOffsetPerc\\\", newMinProofWindowOffsetPerc);\\n    }\\n\\n    function maxProofWindowOffsetPerc() external view returns (uint8) {\\n        return args1[1];\\n    }\\n\\n    function setMaxProofWindowOffsetPerc(uint8 newMaxProofWindowOffsetPerc) external onlyHubOwner {\\n        args1[1] = newMaxProofWindowOffsetPerc;\\n\\n        emit ParameterChanged(\\\"maxProofWindowOffsetPerc\\\", newMaxProofWindowOffsetPerc);\\n    }\\n\\n    function commitWindowDurationPerc() external view returns (uint8) {\\n        return args1[2];\\n    }\\n\\n    function setCommitWindowDurationPerc(uint8 newCommitWindowDurationPerc) external onlyHubOwner {\\n        args1[2] = newCommitWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"commitWindowDurationPerc\\\", newCommitWindowDurationPerc);\\n    }\\n\\n    function proofWindowDurationPerc() external view returns (uint8) {\\n        return args1[3];\\n    }\\n\\n    function setProofWindowDurationPerc(uint8 newProofWindowDurationPerc) external onlyHubOwner {\\n        args1[3] = newProofWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"proofWindowDurationPerc\\\", newProofWindowDurationPerc);\\n    }\\n\\n    function replacementWindowDurationPerc() external view returns (uint8) {\\n        return args1[4];\\n    }\\n\\n    function setReplacementWindowDurationPerc(uint8 newReplacementWindowDurationPerc) external onlyHubOwner {\\n        args1[4] = newReplacementWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"replacementWindowDurationPerc\\\", newReplacementWindowDurationPerc);\\n    }\\n\\n    function setEpochLength(uint128 newEpochLength) external onlyHubOwner {\\n        epochLength = newEpochLength;\\n\\n        emit ParameterChanged(\\\"epochLength\\\", newEpochLength);\\n    }\\n\\n    function stakeWithdrawalDelay() external view returns (uint24) {\\n        return args4[0];\\n    }\\n\\n    function setStakeWithdrawalDelay(uint24 newStakeWithdrawalDelay) external onlyHubOwner {\\n        args4[0] = newStakeWithdrawalDelay;\\n\\n        emit ParameterChanged(\\\"stakeWithdrawalDelay\\\", newStakeWithdrawalDelay);\\n    }\\n\\n    function rewardWithdrawalDelay() external view returns (uint24) {\\n        return args4[1];\\n    }\\n\\n    function setRewardWithdrawalDelay(uint24 newRewardWithdrawalDelay) external onlyHubOwner {\\n        args4[1] = newRewardWithdrawalDelay;\\n\\n        emit ParameterChanged(\\\"rewardWithdrawalDelay\\\", newRewardWithdrawalDelay);\\n    }\\n\\n    function slashingFreezeDuration() external view returns (uint32) {\\n        return args2[2];\\n    }\\n\\n    function setSlashingFreezeDuration(uint32 newSlashingFreezeDuration) external onlyHubOwner {\\n        args2[2] = newSlashingFreezeDuration;\\n\\n        emit ParameterChanged(\\\"slashingFreezeDuration\\\", newSlashingFreezeDuration);\\n    }\\n\\n    function setUpdateCommitWindowDuration(uint16 newUpdateCommitWindowDuration) external onlyHubOwner {\\n        updateCommitWindowDuration = newUpdateCommitWindowDuration;\\n\\n        emit ParameterChanged(\\\"updateCommitWindowDuration\\\", newUpdateCommitWindowDuration);\\n    }\\n\\n    function finalizationCommitsNumber() external view returns (uint8) {\\n        return args1[5];\\n    }\\n\\n    function setFinalizationCommitsNumber(uint8 newFinalizationCommitsNumber) external onlyHubOwner {\\n        args1[5] = newFinalizationCommitsNumber;\\n\\n        emit ParameterChanged(\\\"finalizationCommitsNumber\\\", newFinalizationCommitsNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xcf85cdc898aa106de1841fc603229d8a8985c1bed128e8efd3c2e827b9c0cca1\",\"license\":\"MIT\"},\"contracts/storage/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Shares} from \\\"../Shares.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ProfileStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ProfileStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct ProfileDefinition {\\n        bytes nodeId;\\n        uint96 ask;\\n        uint96 accumulatedOperatorFee;\\n        uint96 accumulatedOperatorFeeWithdrawalAmount;\\n        uint256 operatorFeeWithdrawalTimestamp;\\n        address sharesContractAddress;\\n        mapping(uint8 => bytes32) nodeAddresses;\\n    }\\n\\n    // nodeId => isRegistered?\\n    mapping(bytes => bool) public nodeIdsList;\\n    // identityId => Profile\\n    mapping(uint72 => ProfileDefinition) internal profiles;\\n\\n    // shares token name => isTaken?\\n    mapping(string => bool) public sharesNames;\\n    // shares token ID => isTaken?\\n    mapping(string => bool) public sharesSymbols;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createProfile(\\n        uint72 identityId,\\n        bytes calldata nodeId,\\n        address sharesContractAddress\\n    ) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        profile.nodeId = nodeId;\\n        profile.sharesContractAddress = sharesContractAddress;\\n\\n        nodeIdsList[nodeId] = true;\\n\\n        Shares sharesContract = Shares(sharesContractAddress);\\n        sharesNames[sharesContract.name()] = true;\\n        sharesSymbols[sharesContract.symbol()] = true;\\n    }\\n\\n    function getProfile(\\n        uint72 identityId\\n    ) external view returns (bytes memory nodeId, uint96[2] memory profileSettings, address sharesContractAddress) {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        return (profile.nodeId, [profile.ask, profile.accumulatedOperatorFee], profile.sharesContractAddress);\\n    }\\n\\n    function deleteProfile(uint72 identityId) external onlyContracts {\\n        nodeIdsList[profiles[identityId].nodeId] = false;\\n        delete profiles[identityId];\\n    }\\n\\n    function getNodeId(uint72 identityId) external view returns (bytes memory) {\\n        return profiles[identityId].nodeId;\\n    }\\n\\n    function setNodeId(uint72 identityId, bytes calldata nodeId) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n\\n        nodeIdsList[profile.nodeId] = false;\\n        profile.nodeId = nodeId;\\n        nodeIdsList[nodeId] = true;\\n    }\\n\\n    function getAsk(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].ask;\\n    }\\n\\n    function setAsk(uint72 identityId, uint96 ask) external onlyContracts {\\n        profiles[identityId].ask = ask;\\n    }\\n\\n    function getAccumulatedOperatorFee(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFee;\\n    }\\n\\n    function setAccumulatedOperatorFee(uint72 identityId, uint96 newOperatorFeeAmount) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFee = newOperatorFeeAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalAmount(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalAmount(\\n        uint72 identityId,\\n        uint96 accumulatedOperatorFeeWithdrawalAmount\\n    ) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFeeWithdrawalAmount = accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalTimestamp(uint72 identityId) external view returns (uint256) {\\n        return profiles[identityId].operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalTimestamp(\\n        uint72 identityId,\\n        uint256 operatorFeeWithdrawalTimestamp\\n    ) external onlyContracts {\\n        profiles[identityId].operatorFeeWithdrawalTimestamp = operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function getSharesContractAddress(uint72 identityId) external view returns (address) {\\n        return profiles[identityId].sharesContractAddress;\\n    }\\n\\n    function setSharesContractAddress(uint72 identityId, address sharesContractAddress) external onlyContracts {\\n        profiles[identityId].sharesContractAddress = sharesContractAddress;\\n    }\\n\\n    function getNodeAddress(uint72 identityId, uint8 hashFunctionId) external view returns (bytes32) {\\n        return profiles[identityId].nodeAddresses[hashFunctionId];\\n    }\\n\\n    function setNodeAddress(uint72 identityId, uint8 hashFunctionId, bytes32 nodeAddress) external onlyContracts {\\n        profiles[identityId].nodeAddresses[hashFunctionId] = nodeAddress;\\n    }\\n\\n    function profileExists(uint72 identityId) external view returns (bool) {\\n        return keccak256(profiles[identityId].nodeId) != keccak256(bytes(\\\"\\\"));\\n    }\\n\\n    function transferAccumulatedOperatorFee(address receiver, uint96 amount) external onlyContracts {\\n        tokenContract.transfer(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x658280fecb28870447d89924e8114b8847a3107b674ca5c27d402499b1921332\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ServiceAgreementStorageV1} from \\\"./ServiceAgreementStorageV1.sol\\\";\\nimport {ServiceAgreementStorageV1U1} from \\\"./ServiceAgreementStorageV1U1.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Initializable} from \\\"../interface/Initializable.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {GeneralErrors} from \\\"../errors/GeneralErrors.sol\\\";\\n\\ncontract ServiceAgreementStorageProxy is Named, Versioned, HubDependent, Initializable {\\n    string private constant _NAME = \\\"ServiceAgreementStorageProxy\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    ServiceAgreementStorageV1 public storageV1;\\n    ServiceAgreementStorageV1U1 public storageV1U1;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        storageV1 = ServiceAgreementStorageV1(hub.getContractAddress(\\\"ServiceAgreementStorageV1\\\"));\\n        storageV1U1 = ServiceAgreementStorageV1U1(hub.getContractAddress(\\\"ServiceAgreementStorageV1U1\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function migrateV1ServiceAgreement(bytes32 agreementId) external onlyContracts {\\n        ServiceAgreementStorageV1 sasV1 = storageV1;\\n        ServiceAgreementStorageV1U1 sasV1U1 = storageV1U1;\\n\\n        uint96 tokenAmount = sasV1.getAgreementTokenAmount(agreementId);\\n\\n        sasV1.deleteServiceAgreementObject(agreementId);\\n\\n        sasV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        sasV1.transferAgreementTokens(address(sasV1U1), tokenAmount);\\n    }\\n\\n    function createV1U1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1U1.createServiceAgreementObject(\\n            agreementId,\\n            startTime,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function createV1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1.createServiceAgreementObject(\\n            agreementId,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.deleteServiceAgreementObject(agreementId);\\n        } else {\\n            storageV1U1.deleteServiceAgreementObject(agreementId);\\n        }\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        if (this.agreementV1Exists(agreementId)) {\\n            uint96 tokenAmount;\\n            (startTime, epochsNumber, epochLength, tokenAmount, scoreFunctionIdAndProofWindowOffsetPerc) = storageV1\\n                .getAgreementData(agreementId);\\n            return (\\n                startTime,\\n                epochsNumber,\\n                epochLength,\\n                [tokenAmount, storageV1U1.getAgreementUpdateTokenAmount(agreementId)],\\n                scoreFunctionIdAndProofWindowOffsetPerc\\n            );\\n        } else {\\n            return storageV1U1.getAgreementData(agreementId);\\n        }\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementStartTime(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementStartTime(agreementId);\\n        }\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementStartTime(agreementId, startTime);\\n        } else {\\n            storageV1U1.setAgreementStartTime(agreementId, startTime);\\n        }\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochsNumber(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochsNumber(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        } else {\\n            storageV1U1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        }\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochLength(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochLength(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochLength(agreementId, epochLength);\\n        } else {\\n            storageV1U1.setAgreementEpochLength(agreementId, epochLength);\\n        }\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementTokenAmount(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementTokenAmount(agreementId);\\n        }\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        } else {\\n            storageV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        }\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return storageV1U1.getAgreementUpdateTokenAmount(agreementId);\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        storageV1U1.setAgreementUpdateTokenAmount(agreementId, updateTokenAmount);\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementScoreFunctionId(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementScoreFunctionId(agreementId);\\n        }\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        } else {\\n            storageV1U1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        }\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementProofWindowOffsetPerc(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementProofWindowOffsetPerc(agreementId);\\n        }\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        } else {\\n            storageV1U1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        }\\n    }\\n\\n    function getV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return storageV1U1.getAgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\\n    }\\n\\n    function getV1AgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return storageV1.getAgreementEpochSubmissionHead(agreementId, epoch);\\n    }\\n\\n    function setV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1U1.setAgreementEpochSubmissionHead(agreementId, epoch, stateIndex, headCommitId);\\n    }\\n\\n    function setV1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1.setAgreementEpochSubmissionHead(agreementId, epoch, headCommitId);\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            return storageV1U1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        } else {\\n            storageV1U1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        }\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, 0);\\n        } else {\\n            storageV1U1.deleteAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function createV1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1.createCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function createV1U1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1U1.createEpochStateCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.deleteEpochStateCommitSubmissionsObject(commitId);\\n        } else {\\n            storageV1.deleteCommitSubmissionsObject(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmission(commitId);\\n        } else {\\n            return storageV1.getCommitSubmission(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionIdentityId(commitId, identityId);\\n        } else {\\n            storageV1.setCommitSubmissionIdentityId(commitId, identityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionPrevIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionPrevIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionNextIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionNextIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionScore(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionScore(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionScore(commitId, score);\\n        } else {\\n            storageV1.setCommitSubmissionScore(commitId, score);\\n        }\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n        } else {\\n            return storageV1.commitSubmissionExists(commitId);\\n        }\\n    }\\n\\n    function incrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.incrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function decrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.decrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return storageV1U1.getEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function setCommitsCount(bytes32 epochStateId, uint8 epochStateCommitsCount) external onlyContracts {\\n        storageV1U1.setEpochStateCommitsCount(epochStateId, epochStateCommitsCount);\\n    }\\n\\n    function deleteCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.deleteEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return storageV1U1.getUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        storageV1U1.setUpdateCommitsDeadline(stateId, deadline);\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        storageV1U1.deleteUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function transferAgreementTokens(bytes32 agreementId, address receiver, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.transferAgreementTokens(receiver, tokenAmount);\\n        } else {\\n            storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n        }\\n    }\\n\\n    function transferV1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function transferV1U1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function agreementV1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function agreementV1U1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId) || storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function commitV1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1.commitSubmissionExists(commitId);\\n    }\\n\\n    function commitV1U1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n    }\\n\\n    function agreementV1StorageAddress() external view returns (address) {\\n        return address(storageV1);\\n    }\\n\\n    function agreementV1U1StorageAddress() external view returns (address) {\\n        return address(storageV1U1);\\n    }\\n}\\n\",\"keccak256\":\"0x3615c48f64deb12c57692b15a052d523c3da362dd3c927ec3f2902a7c5307a06\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // CommitId [keccak256(agreementId + epoch + identityId)] => CommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal commitSubmissions;\\n\\n    // AgreementId [hash(asset type contract + tokenId + key)] => ServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ServiceAgreement) internal serviceAgreements;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = block.timestamp;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96 tokenAmount,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            serviceAgreements[agreementId].tokenAmount,\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[epoch];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[epoch] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        commitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].identityId;\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        commitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return commitSubmissions[commitId].score;\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        commitSubmissions[commitId].score = score;\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return commitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c2b2d43615369d9fe71beb9d4267ea40c46fb416d4c7b22ab81272a2c690117\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1U1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // AgreementId [hash(assetStorage + tokenId + key)] => ExtendedServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ExtendedServiceAgreement) internal serviceAgreements;\\n\\n    // CommitId [keccak256(agreementId + epoch + stateIndex + identityId)] => stateCommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal epochStateCommitSubmissions;\\n\\n    // EpochStateId [keccak256(agreementId + epoch + stateIndex)] => epochStateCommitsCount\\n    mapping(bytes32 => uint8) internal epochStateCommitsCount;\\n\\n    // StateId [keccak256(agreementId + stateIndex)] => updateCommitsDeadline\\n    mapping(bytes32 => uint256) internal updateCommitsDeadlines;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ExtendedServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = startTime;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            [serviceAgreements[agreementId].tokenAmount, serviceAgreements[agreementId].updateTokenAmount],\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].updateTokenAmount;\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].updateTokenAmount = updateTokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[keccak256(abi.encodePacked(epoch, stateIndex))];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[\\n            keccak256(abi.encodePacked(epoch, stateIndex))\\n        ] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        delete serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createEpochStateCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteEpochStateCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].identityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionPrevIdentityId(\\n        bytes32 commitId,\\n        uint72 prevIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionNextIdentityId(\\n        bytes32 commitId,\\n        uint72 nextIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return epochStateCommitSubmissions[commitId].score;\\n    }\\n\\n    function setEpochStateCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].score = score;\\n    }\\n\\n    function epochStateCommitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return epochStateCommitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function incrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]++;\\n    }\\n\\n    function decrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]--;\\n    }\\n\\n    function getEpochStateCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function setEpochStateCommitsCount(bytes32 epochStateId, uint8 newEpochStateCommitsCount) external onlyContracts {\\n        epochStateCommitsCount[epochStateId] = newEpochStateCommitsCount;\\n    }\\n\\n    function deleteEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        delete epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return updateCommitsDeadlines[stateId];\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        updateCommitsDeadlines[stateId] = deadline;\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        delete updateCommitsDeadlines[stateId];\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d25de399b6bccc3a892d0f71abd185892b50a717106fe88328a42fc1e52d98\",\"license\":\"MIT\"},\"contracts/storage/ShardingTableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"../structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"../constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTableStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"ShardingTableStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 public head;\\n    uint72 public tail;\\n    uint72 public nodesCount;\\n\\n    // identityId => Node\\n    mapping(uint72 => ShardingTableStructs.Node) internal nodes;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        head = NULL;\\n        tail = NULL;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function incrementNodesCount() external onlyContracts {\\n        nodesCount++;\\n    }\\n\\n    function decrementNodesCount() external onlyContracts {\\n        nodesCount--;\\n    }\\n\\n    function setHead(uint72 identityId) external onlyContracts {\\n        head = identityId;\\n    }\\n\\n    function setTail(uint72 identityId) external onlyContracts {\\n        tail = identityId;\\n    }\\n\\n    function createNodeObject(uint72 identityId, uint72 prevIdentityId, uint72 nextIdentityId) external onlyContracts {\\n        nodes[identityId] = ShardingTableStructs.Node({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId\\n        });\\n    }\\n\\n    function getNode(uint72 identityId) external view returns (ShardingTableStructs.Node memory) {\\n        return nodes[identityId];\\n    }\\n\\n    function deleteNodeObject(uint72 identityId) external onlyContracts {\\n        delete nodes[identityId];\\n    }\\n\\n    function nodeExists(uint72 identityId) external view returns (bool) {\\n        return nodes[identityId].identityId != 0;\\n    }\\n\\n    function setPrevIdentityId(uint72 identityId, uint72 newPrevIdentityId) external onlyContracts {\\n        nodes[identityId].prevIdentityId = newPrevIdentityId;\\n    }\\n\\n    function setNextIdentityId(uint72 identityId, uint72 newNextIdentityId) external onlyContracts {\\n        nodes[identityId].nextIdentityId = newNextIdentityId;\\n    }\\n\\n    function getMultipleNodes(\\n        uint72 firstIdentityId,\\n        uint16 nodesNumber\\n    ) external view returns (ShardingTableStructs.Node[] memory) {\\n        ShardingTableStructs.Node[] memory nodesPage = new ShardingTableStructs.Node[](nodesNumber);\\n\\n        ShardingTableStructs.Node memory currentNode = nodes[firstIdentityId];\\n        for (uint256 i; i < nodesNumber; ) {\\n            nodesPage[i] = currentNode;\\n            currentNode = nodes[currentNode.nextIdentityId];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n\\n    function link(uint72 leftNodeIdentityId, uint72 rightNodeIdentityId) external onlyContracts {\\n        nodes[leftNodeIdentityId].nextIdentityId = rightNodeIdentityId;\\n        nodes[rightNodeIdentityId].prevIdentityId = leftNodeIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xac72b874995c1c6d181539ef17b90b5165f242076235e4c05282f2bd0311f3cf\",\"license\":\"MIT\"},\"contracts/storage/StakingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract StakingStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"StakingStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct WithdrawalRequest {\\n        uint96 amount;\\n        uint256 timestamp;\\n    }\\n\\n    // identityId => totalStake\\n    mapping(uint72 => uint96) public totalStakes;\\n\\n    // identityId => operatorFee\\n    mapping(uint72 => uint96) public operatorFees;\\n\\n    // identityId => withdrawalRequest\\n    mapping(uint72 => mapping(address => WithdrawalRequest)) public withdrawalRequests;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setTotalStake(uint72 identityId, uint96 newTotalStake) external onlyContracts {\\n        totalStakes[identityId] = newTotalStake;\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint96 operatorFee) external onlyContracts {\\n        operatorFees[identityId] = operatorFee;\\n    }\\n\\n    function createWithdrawalRequest(\\n        uint72 identityId,\\n        address staker,\\n        uint96 amount,\\n        uint256 timestamp\\n    ) external onlyContracts {\\n        withdrawalRequests[identityId][staker] = WithdrawalRequest({amount: amount, timestamp: timestamp});\\n    }\\n\\n    function deleteWithdrawalRequest(uint72 identityId, address staker) external onlyContracts {\\n        delete withdrawalRequests[identityId][staker];\\n    }\\n\\n    function getWithdrawalRequestAmount(uint72 identityId, address staker) external view returns (uint96) {\\n        return withdrawalRequests[identityId][staker].amount;\\n    }\\n\\n    function getWithdrawalRequestTimestamp(uint72 identityId, address staker) external view returns (uint256) {\\n        return withdrawalRequests[identityId][staker].timestamp;\\n    }\\n\\n    function withdrawalRequestExists(uint72 identityId, address staker) external view returns (bool) {\\n        return withdrawalRequests[identityId][staker].amount != 0;\\n    }\\n\\n    function transferStake(address receiver, uint96 stakeAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, stakeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x1901534fb150957d6433fa06b6a59a2c2d1594fc9b9a4e9901f024fea947a4db\",\"license\":\"MIT\"},\"contracts/storage/UnfinalizedStateStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract UnfinalizedStateStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"UnfinalizedStateStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // tokenId => latestState\\n    mapping(uint256 => bytes32) internal unfinalizedStates;\\n    // tokenId => issuer\\n    mapping(uint256 => address) internal issuers;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function getUnfinalizedState(uint256 tokenId) external view returns (bytes32) {\\n        return unfinalizedStates[tokenId];\\n    }\\n\\n    function setUnfinalizedState(uint256 tokenId, bytes32 state) external onlyContracts {\\n        unfinalizedStates[tokenId] = state;\\n    }\\n\\n    function deleteUnfinalizedState(uint256 tokenId) external onlyContracts {\\n        delete unfinalizedStates[tokenId];\\n    }\\n\\n    function getIssuer(uint256 tokenId) external view returns (address) {\\n        return issuers[tokenId];\\n    }\\n\\n    function setIssuer(uint256 tokenId, address issuer) external onlyContracts {\\n        issuers[tokenId] = issuer;\\n    }\\n\\n    function deleteIssuer(uint256 tokenId) external onlyContracts {\\n        delete issuers[tokenId];\\n    }\\n\\n    function hasPendingUpdate(uint256 tokenId) external view returns (bool) {\\n        return unfinalizedStates[tokenId] != bytes32(0);\\n    }\\n}\\n\",\"keccak256\":\"0xcb877837ff9dbc4f873514c5acdff80ac9178b519827445ae8ae7dfa89b28a81\",\"license\":\"MIT\"},\"contracts/storage/assets/ContentAssetStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {AbstractAsset} from \\\"../../abstract/AbstractAsset.sol\\\";\\nimport {Named} from \\\"../../interface/Named.sol\\\";\\nimport {ContentAssetStructs} from \\\"../../structs/assets/ContentAssetStructs.sol\\\";\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract ContentAssetStorage is AbstractAsset, ERC721 {\\n    string private constant _NAME = \\\"ContentAssetStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint256 private _tokenId;\\n\\n    // tokenId => Asset\\n    mapping(uint256 => ContentAssetStructs.Asset) internal assets;\\n\\n    // keccak256(tokenId + assertionId + assertionIdIndex) => issuer\\n    mapping(bytes32 => address) public issuers;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) AbstractAsset(hubAddress) ERC721(\\\"ContentAssetStorage\\\", \\\"DKG\\\") {}\\n\\n    function name() public view override(Named, ERC721) returns (string memory) {\\n        return ERC721.name();\\n    }\\n\\n    function version() external pure override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function mint(address to, uint256 tokenId) external onlyContracts {\\n        _mint(to, tokenId);\\n    }\\n\\n    function burn(uint256 tokenId) external onlyContracts {\\n        _burn(tokenId);\\n    }\\n\\n    function generateTokenId() external onlyContracts returns (uint256) {\\n        unchecked {\\n            return _tokenId++;\\n        }\\n    }\\n\\n    function deleteAsset(uint256 tokenId) external onlyContracts {\\n        bytes32[] memory assertionIds = assets[tokenId].assertionIds;\\n        uint256 assertionIdsLength = assertionIds.length;\\n\\n        for (uint256 i; i < assertionIdsLength; ) {\\n            delete issuers[_generateAssetAssertionId(tokenId, assertionIds[i], i)];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        delete assets[tokenId];\\n    }\\n\\n    function getAsset(uint256 tokenId) external view returns (ContentAssetStructs.Asset memory) {\\n        return assets[tokenId];\\n    }\\n\\n    function setMutability(uint256 tokenId, bool immutable_) external onlyContracts {\\n        assets[tokenId].immutable_ = immutable_;\\n    }\\n\\n    function isMutable(uint256 tokenId) external view returns (bool) {\\n        return !assets[tokenId].immutable_;\\n    }\\n\\n    function pushAssertionId(uint256 tokenId, bytes32 assertionId) external onlyContracts {\\n        assets[tokenId].assertionIds.push(assertionId);\\n    }\\n\\n    function getAssertionIds(uint256 tokenId) public view override returns (bytes32[] memory) {\\n        return assets[tokenId].assertionIds;\\n    }\\n\\n    function setAssertionIssuer(uint256 tokenId, bytes32 assertionId, address issuer) external onlyContracts {\\n        issuers[_generateAssetAssertionId(tokenId, assertionId, this.getAssertionIdsLength(tokenId))] = issuer;\\n    }\\n\\n    function deleteAssertionIssuer(uint256 tokenId, bytes32 assertionId, uint256 index) external onlyContracts {\\n        delete issuers[_generateAssetAssertionId(tokenId, assertionId, index)];\\n    }\\n\\n    function getAssertionIssuer(\\n        uint256 tokenId,\\n        bytes32 assertionId,\\n        uint256 assertionIndex\\n    ) external view returns (address) {\\n        return issuers[keccak256(abi.encodePacked(tokenId, assertionId, assertionIndex))];\\n    }\\n\\n    function assertionExists(bytes32 assetAssertionId) external view returns (bool) {\\n        return issuers[assetAssertionId] != address(0);\\n    }\\n\\n    function _generateAssetAssertionId(\\n        uint256 tokenId,\\n        bytes32 assertionId,\\n        uint256 index\\n    ) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(tokenId, assertionId, index));\\n    }\\n}\\n\",\"keccak256\":\"0x00757f97793401b694879c996125cb2e826a37008ec1325ea18103577995f6c4\",\"license\":\"MIT\"},\"contracts/structs/ServiceAgreementStructsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementStructsV1 {\\n    struct CommitSubmission {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n        uint40 score;\\n    }\\n\\n    struct ServiceAgreementInputArgs {\\n        address assetCreator;\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epochsNumber;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n    }\\n\\n    struct ServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // epoch => headCommitId\\n        mapping(uint16 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct ExtendedServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint96 updateTokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // keccak256(epoch + stateIndex) => headCommitId\\n        mapping(bytes32 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct CommitInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n    }\\n\\n    struct ProofInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n        bytes32[] proof;\\n        bytes32 chunkHash;\\n    }\\n}\\n\",\"keccak256\":\"0x5b33bc12e685dacf652dfe81b7fff14806297132be7df872c45a598ff783d638\",\"license\":\"MIT\"},\"contracts/structs/ShardingTableStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ShardingTableStructs {\\n    struct NodeInfo {\\n        bytes nodeId;\\n        uint72 identityId;\\n        uint96 ask;\\n        uint96 stake;\\n    }\\n\\n    struct Node {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xf6f18e4e0643f4c6fa96480189e89d8c7e6fb8de7a4a3f36da24ab3b0ea31d76\",\"license\":\"MIT\"},\"contracts/structs/assets/ContentAssetStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ContentAssetStructs {\\n    struct AssetInputArgs {\\n        bytes32 assertionId;\\n        uint128 size;\\n        uint32 triplesNumber;\\n        uint96 chunksNumber;\\n        uint16 epochsNumber;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n        bool immutable_;\\n    }\\n\\n    struct Asset {\\n        bool immutable_;\\n        bytes32[] assertionIds;\\n    }\\n}\\n\",\"keccak256\":\"0xd5565a67a37705de77f4f156c5adf256e60dba55eacbbfd47c8002edbdfa2c45\",\"license\":\"MIT\"},\"contracts/utils/ByteArr.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ByteArr {\\n    function indexOf(bytes32[] storage self, bytes32 item) internal view returns (uint index, bool isThere) {\\n        for (uint i; i < self.length; i++) {\\n            if (self[i] == item) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function removeByIndex(bytes32[] storage self, uint256 index) internal returns (bytes32[] memory) {\\n        require(index < self.length, \\\"Index is out of array length\\\");\\n\\n        self[index] = self[self.length - 1];\\n        self.pop();\\n\\n        return self;\\n    }\\n\\n    function getFuncHash(bytes storage _data) internal view returns (bytes4) {\\n        bytes4 output;\\n        for (uint i; i < 4; i++) {\\n            output |= bytes4(_data[i] & 0xFF) >> (i * 8);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xa1a88491b2a586eeebb1f6a6fb7f026931633fb3fb6a5635c74e62621b9f03ba\",\"license\":\"MIT\"},\"contracts/utils/UnorderedIndexableContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Indexable} from \\\"../interface/Indexable.sol\\\";\\n\\nlibrary UnorderedIndexableContractDynamicSetLib {\\n    struct Contract {\\n        uint8 id;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(uint8 => uint256) indexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, uint8 id, address addr) internal {\\n        require(id != 0, \\\"IndexableContractSet: ID canot be 0\\\");\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, id), \\\"IndexableContractSet: Contract with given ID already exists\\\");\\n        self.indexPointers[id] = size(self);\\n        self.contractList.push(Contract(id, addr));\\n    }\\n\\n    function update(Set storage self, uint8 id, address addr) internal {\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        self.contractList[self.indexPointers[id]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, uint8 id) internal {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        uint256 contractToRemoveIndex = self.indexPointers[id];\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n        uint8 contractToMoveId = Indexable(contractToMove.addr).id();\\n\\n        self.indexPointers[contractToMoveId] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.indexPointers[id];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, uint8 id) internal view returns (Contract memory) {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        return self.contractList[self.indexPointers[id]];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, uint8 id) internal view returns (uint256) {\\n        return self.indexPointers[id];\\n    }\\n\\n    function getByIndex(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function exists(Set storage self, uint8 id) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return self.contractList[self.indexPointers[id]].id == id;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0xc255ea1ea548b3deb7384a5e8f2b706c53688631ca423c73c24ec5cf674055d6\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200014f57601f62003b8638819003918201601f19168301926001600160401b0392909190838511838610176200015457808392604096875283396020928391810103126200014f57516001600160a01b03811692908390036200014f5782156200010b57600080546001600160a01b031916909317835583519060c0820190811182821017620000f7578452828152828282015282848201528260608201528260808201528260a08201529082905b60068210620000cf5750505060015551613a1b90816200016b8239f35b9091928160019185511515908560031b60ff811b9283911b16911916179401920190620000b2565b634e487b7160e01b84526041600452602484fd5b835162461bcd60e51b815260048101839052601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816306fdde03146125555750806311c94ee81461252c578063169df8d814611d9a578063200d2ed214611d75578063365a86fc14611d4e5780635415d03b14610ede57806354fd4d5014610e945780635c40f6f414610e50578063639a86a314610e275780637662966a14610dfe5780637c3e678e14610de45780637ea63c6e14610d765780638129fc1c1461088d578063823e2bc71461086457806383de896b1461082357806390b8145a146107fa578063b518a00e146107d1578063bd1346ae146107a8578063be07fc231461020c578063becdd597146101cf578063c3573ec7146101a6578063ee99205c1461017d578063f11abfd8146101545763f42cb0381461012957600080fd5b346101515780600319360112610151576008546040516001600160a01b039091168152602090f35b80fd5b50346101515780600319360112610151576006546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576004546040516001600160a01b039091168152602090f35b5034610151578060031936011261015157600c546040516001600160a01b039091168152602090f35b50346101515760403660031901126101515760243561ffff81168103610207576101fd6020916004356127c5565b6040519015158152f35b600080fd5b50346101515761021b36612620565b6009546040516310dc199160e31b8152600481018590526001600160a01b03949185169290602081602481875afa90811561079d57879161076e575b50156107555760405163d1a640c760e01b8082526004820184905290602081602481885afa908115610547578891610736575b5061ffff80911690861610156105ef57506020600495600754166040519687809263659621b560e01b82525afa9485156105e45786956105b3575b506102d563ffffffff8616612cf4565b936102e360405195866126c3565b63ffffffff8616808652601f19906102fa90612cf4565b01875b8181106105845750506040516357e1255760e01b81526004810184905261ffff8216602482015260448101839052602081606481885afa908115610547578891610552575b506040519063223dea6d60e21b82526004820152608081602481885afa908115610547578891610528575b5061037786612d8a565b5261038185612d8a565b506001600160481b03604061039587612d8a565b510151166001905b63ffffffff881660ff83161080610516575b1561048c576040516103da816103cc602082019488888b88612dab565b03601f1981018352826126c3565b5190206040519063223dea6d60e21b82526004820152608081602481895afa908115610481578991610452575b5061041560ff831688612d97565b5261042360ff821687612d97565b5063ffffffff60ff60016001600160481b0360406104438487168c612d97565b5101511693011691905061039d565b610474915060803d60801161047a575b61046c81836126c3565b810190612d32565b38610407565b503d610462565b6040513d8b823e3d90fd5b8689604051918291602083016020845282518091526020604085019301915b8181106104b9575050500390f35b919350916020608060019286516001600160481b0381511682526001600160481b038482015116848301526001600160481b03604082015116604083015264ffffffffff60608092015116908201520194019101918493926104ab565b506001600160481b03811615156103af565b610541915060803d60801161047a5761046c81836126c3565b3861036d565b6040513d8a823e3d90fd5b90506020813d60201161057c575b8161056d602093836126c3565b81010312610207575138610342565b3d9150610560565b6020906040516105938161266f565b8a81528a838201528a60408201528a606082015282828a010152016102fd565b6105d691955060203d6020116105dd575b6105ce81836126c3565b810190612cd8565b93386102c5565b503d6105c4565b6040513d88823e3d90fd5b604051630271c2cf60e61b8152600481018490528791849086602084602481845afa9384156106c5578594610702575b50604051918252826004830152602082602481845afa9081156106c55760249286926106d0575b506020906040519384809263484a47e760e01b82528760048301525afa9182156106c55761069093949592610694575b50604051631b18d90960e31b81529485946004860161273d565b0390fd5b6106b791925060203d6020116106be575b6106af81836126c3565b810190612704565b9085610676565b503d6106a5565b6040513d87823e3d90fd5b60209192506106f490823d84116106fb575b6106ec81836126c3565b810190612723565b9190610646565b503d6106e2565b9093506020813d60201161072e575b8161071e602093836126c3565b810103126102075751928561061f565b3d9150610711565b61074f915060203d6020116106fb576106ec81836126c3565b3861028a565b604051635013c2b960e01b815260048101839052602490fd5b610790915060203d602011610796575b61078881836126c3565b810190612a66565b38610257565b503d61077e565b6040513d89823e3d90fd5b50346101515780600319360112610151576005546040516001600160a01b039091168152602090f35b5034610151578060031936011261015157600b546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576009546040516001600160a01b039091168152602090f35b5034610151576020366003190112610151576004356006811015610860578060ff60209260051c6001015460f86040519360031b161c1615158152f35b5080fd5b5034610151578060031936011261015157600a546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576108a6613917565b60018060a01b0380825416906040519183630110ceef60e21b808552602092836004870152602490600c828801526044926b48617368696e6750726f787960a01b8489015260649186898481845afa9889156105e4578699610d57575b50876001600160601b0360a01b9916896002541617600255604051828152876004820152600c858201526b53636f72696e6750726f787960a01b8682015287818581855afa801561079d5789918891610d3a575b5016896003541617600355604051828152876004820152600785820152665374616b696e6760c81b8682015287818581855afa801561079d5789918891610d1d575b5016896004541617600455604051633222517f60e11b815287600482015260138582015272436f6e74656e74417373657453746f7261676560681b8682015287818581855afa801561079d5789918891610d00575b5016896005541617600555604051828152876004820152600f858201526e4964656e7469747953746f7261676560881b8682015287818581855afa801561079d5789918891610ce3575b501689600654161760065560405182815287600482015260118582015270506172616d657465727353746f7261676560781b8682015287818581855afa801561079d5789918891610cc6575b5016896007541617600755604051828152876004820152600e858201526d50726f66696c6553746f7261676560901b8682015287818581855afa801561079d5789918891610ca9575b5016896008541617600855604051828152876004820152601c858201527f5365727669636541677265656d656e7453746f7261676550726f7879000000008682015287818581855afa801561079d5789918891610c8c575b5016896009541617600955604051828152876004820152601485820152735368617264696e675461626c6553746f7261676560601b8682015287818581855afa801561079d5789918891610c6f575b501689600a541617600a55604051828152876004820152600e858201526d5374616b696e6753746f7261676560901b8682015287818581855afa95861561079d578989977f556e66696e616c697a6564537461746553746f726167650000000000000000009360179a91610c52575b50168b600b541617600b55604051978896879586528860048701528501528301525afa9182156106c5578592610c25575b50501690600c541617600c55604051f35b610c449250803d10610c4b575b610c3c81836126c3565b8101906126e5565b3880610c14565b503d610c32565b610c699150893d8b11610c4b57610c3c81836126c3565b38610be3565b610c869150893d8b11610c4b57610c3c81836126c3565b38610b74565b610ca39150893d8b11610c4b57610c3c81836126c3565b38610b25565b610cc09150893d8b11610c4b57610c3c81836126c3565b38610acd565b610cdd9150893d8b11610c4b57610c3c81836126c3565b38610a84565b610cfa9150893d8b11610c4b57610c3c81836126c3565b38610a38565b610d179150893d8b11610c4b57610c3c81836126c3565b386109ee565b610d349150893d8b11610c4b57610c3c81836126c3565b38610999565b610d519150893d8b11610c4b57610c3c81836126c3565b38610957565b610d6f919950873d8911610c4b57610c3c81836126c3565b9738610903565b50346101515760403660031901126101515760043560243580151580910361020757610da0613917565b6006821015610dce578160051c6001019160f883549160031b1660ff811b9283911b16911916179055604051f35b634e487b7160e01b600052603260045260246000fd5b50346101515760206101fd610df836612620565b91612a7e565b50346101515780600319360112610151576003546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576007546040516001600160a01b039091168152602090f35b50346101515760203660031901126101515760043580151580910361020757610e77613917565b815460ff60a01b191660a09190911b60ff60a01b16178155604051f35b5034610151578060031936011261015157610eda604051610eb48161268b565b60058152640312e302e360dc1b60208201526040519182916020835260208301906125c9565b0390f35b503461015157610eed366125ee565b600c546001600160a01b0390811690610f0583612df4565b16906040519063273267a360e11b80835260208501356004840152602083602481855afa9283156105e4578693611d17575b5060206024946040519586809263fef57daf60e01b8252848a013560048301525afa9384156105e4578694611ce3575b5060405190815260208501356004820152602081602481855afa9081156105e4578691611cb1575b5015611c7c576009546002546001600160a01b039182169161101691602091829116610fbd60608a01612de6565b610ffa8a610fec610fcd82612df4565b610fda6040840184612e08565b916040519889950135908a8601612e3b565b03601f1981018552846126c3565b6040518095819482936345ed59e560e01b845260048401612e65565b03915afa90811561079d578791611c4a575b506040516310dc199160e31b815260048101829052602081602481865afa908115610547578891611c2b575b5015611c135760015460ff8160101c161580611bf6575b611aa55760065460405163010cf48d60e71b81523360048201529190602090839060249082906001600160a01b03165afa918215610481578992611a67575b5060181c60ff1615806119fd575b6118cf5760035460405163ce60dc6160e01b815260048101849052906001600160a01b0316602082602481885afa9182156118c4578a926118a3575b50602461110360608b01612de6565b6008546040516320e085cd60e11b81526001600160481b0387166004820152919391928d9184919082906001600160a01b03165afa918215611898578c92611873575b5061115460408c018c612e08565b600b54604051639d2b48ad60e01b81526001600160481b03891660048201529296929592918f91602090889060249082906001600160a01b03165afa90811561162f576020976111c29392611854575b50604051630168f40160e31b81529889978896879660048801612f79565b03915afa90811561048157889288918b936117f8575b506001600160481b0381611209856000805160206139c6833981519152948661120360808b01612e82565b8b613001565b61125b61121587612df4565b956112236040890189612e08565b61123260608b99939901612de6565b61123e60808c01612e82565b916020604051988998169c01359a60018060a01b03169987612fc3565b0390a461126a60808701612e82565b60405161129c816103cc89602083019587879160429391835261ffff60f01b9060f01b16602083015260228201520190565b51902060405190634849174160e01b82526004820152602081602481865afa9081156105475788916117d9575b506007546040516392c62af360e01b815290602090829060049082906001600160a01b03165afa9081156104815760ff9182918b916117aa575b5016911614611313575b86604051f35b6040516339075c2560e11b815260048101829052602081602481865afa90811561054757889161178b575b5061173f575b604051634089a17d60e01b815260048101829052602081602481865afa908115610547578891611720575b5060405163044c990b60e41b81526004810183905290602082602481875afa9182156104815789926116ef575b506001600160601b0380831681831601116116db57908392918995943b156116d7576001600160601b039081806040519463e54b26ff60e01b865286600487015216911601166024820152848160448183875af19081156106c55785916116c3575b5050813b1561162b57839160448392604051948593849263e25aa72560e01b845260048401528160248401525af190811561164e5783916116af575b50506005546040516349044e2360e11b815260208781013560048301526001600160a01b039092169181602481865afa908115611685578491611690575b50813b1561162b5760405163eaeb169560e01b815260208801356004820152602481018690526001600160a01b039091166044820152838160648183865af1908115611685578491611671575b5050803b1561166d5782809160446040518094819363367bcd9f60e01b835260208c013560048401528960248401525af190811561164e578391611659575b5050803b156108605760405163a021d76d60e01b815260208601356004820152828160248183865af190811561164e57839161163a575b5050803b1561086057818091602460405180948193635498a1d160e11b835260208b013560048401525af1801561162f57611617575b50507f56b6b4dd8196c56f848777686cb227d4532c0c7467653448208a1499a4eb5c549061159e84612df4565b9360206115ae6040830183612e08565b9290936115bd60608301612de6565b9661ffff6115cd60808501612e82565b60ff6115e6604051998a9960a08b5260a08b0191612f58565b9a1687870152166040860152606085015260808401520135946001600160a01b0316930390a338808080808061130d565b61162090612645565b61162b578338611571565b8380fd5b6040513d84823e3d90fd5b61164390612645565b61086057813861153b565b6040513d85823e3d90fd5b61166290612645565b610860578138611504565b8280fd5b61167a90612645565b61166d5782386114c5565b6040513d86823e3d90fd5b6116a9915060203d602011610c4b57610c3c81836126c3565b38611478565b6116b890612645565b61086057813861143a565b6116cc90612645565b61162b5783386113fe565b8580fd5b634e487b7160e01b89526011600452602489fd5b61171291925060203d602011611719575b61170a81836126c3565b810190612efa565b903861139c565b503d611700565b611739915060203d6020116117195761170a81836126c3565b3861136f565b813b156117875760405163fc75b3fb60e01b815260048101829052878160248183875af1801561054757611774575b50611344565b61178090979197612645565b953861176e565b8680fd5b6117a4915060203d6020116107965761078881836126c3565b3861133e565b6117cc915060203d6020116117d2575b6117c481836126c3565b810190612768565b38611303565b503d6117ba565b6117f2915060203d6020116117d2576117c481836126c3565b386112c9565b93509150506020823d60201161184c575b81611816602093836126c3565b8101031261184857866000805160206139c68339815191526001600160481b036118408b95612d20565b9391506111d8565b8880fd5b3d9150611809565b61186c919250883d8a116117195761170a81836126c3565b90386111a4565b6118919192508c3d8091833e61188981836126c3565b810190612e91565b9038611146565b6040513d8e823e3d90fd5b6118bd91925060203d6020116117d2576117c481836126c3565b90386110f4565b6040513d8c823e3d90fd5b6008546040516320e085cd60e11b81526001600160481b038316600482018190528a9391926001600160a01b03168484602481845afa9384156106c55785946119db575b506020602491604051928380926339fb67dd60e01b82528660048301525afa9081156106c55785916119bc575b50600b54604051639d2b48ad60e01b81526004810193909352602090839060249082906001600160a01b03165afa9182156106c5576106909394959261199b575b50604051636e2310c160e01b815294859460048601612f19565b6119b591925060203d6020116117195761170a81836126c3565b9085611981565b6119d5915060203d6020116117195761170a81836126c3565b85611940565b60249194506119f56020913d8089833e61188981836126c3565b949150611913565b50600a5460405163175a11e760e21b81526001600160481b038316600482015290602090829060249082906001600160a01b03165afa908115610481578991611a48575b50156110b8565b611a61915060203d6020116107965761078881836126c3565b38611a41565b9091506020813d602011611a9d575b81611a83602093836126c3565b8101031261184857611a9660ff91612d0c565b91906110aa565b3d9150611a76565b878684848a60206040518181019084825286604082015260408152611ac9816126a7565b5190206024604051809681936315ce5a4560e01b835260048301525afa9283156106c5578593611bbd575b506080611b019101612e82565b60075460405163daa303cf60e01b815291939190602090829060049082906001600160a01b03165afa80156105e45761ffff918791611b9e575b50168103818111611b8a57604051631544e26360e11b8152600481019390935261ffff9390931660248301526044820193909352606481019190915260848101919091524260a482015260c490fd5b634e487b7160e01b86526011600452602486fd5b611bb7915060203d6020116106fb576106ec81836126c3565b87611b3b565b9092506020813d602011611bee575b81611bd9602093836126c3565b81010312611bea5751916080611af4565b8480fd5b3d9150611bcc565b50611c0d86611c0760808a01612e82565b84612a7e565b1561106b565b60249060405190635013c2b960e01b82526004820152fd5b611c44915060203d6020116107965761078881836126c3565b38611054565b90506020813d602011611c74575b81611c65602093836126c3565b81010312611787575138611028565b3d9150611c58565b6044846020611c8a82612df4565b6040516340501bd760e01b81526001600160a01b0390911660048201529101356024820152fd5b90506020813d602011611cdb575b81611ccc602093836126c3565b810103126116d7575138610f8f565b3d9150611cbf565b9093506020813d602011611d0f575b81611cff602093836126c3565b810103126116d757519238610f67565b3d9150611cf2565b9392506020843d602011611d46575b81611d33602093836126c3565b810103126116d757925191926020610f37565b3d9150611d26565b5034610151578060031936011261015157546040516001600160a01b039091168152602090f35b503461015157806003193601126101515760ff6020915460a01c166040519015158152f35b503461015157611da9366125ee565b600954600254611e1e916001600160a01b0390811691602091610fec9116611dd360608701612de6565b611e02611ddf88612df4565b611dec60408a018a612e08565b604096919651968793898d0135908a8601612e3b565b6040518096819482936345ed59e560e01b845260048401612e65565b03915afa9182156116855784926124f8575b506040516310dc199160e31b815260048101839052602081602481855afa9081156106c55785916124d9575b50156107555760249060206001600160a01b03611e7886612df4565b166040519384809263fef57daf60e01b82528489013560048301525afa9182156106c55785926124a5575b50816000198101116124915760015460ff81161580612475575b6122c15760065460405163010cf48d60e71b8152336004820152929190602090849060249082906001600160a01b03165afa92831561079d578793612283575b5060081c60ff161580612219575b61214f57602490602060018060a01b0360035416916040519384809263ce60dc6160e01b82528960048301525afa91821561079d57879261212e575b506024611f5660608801612de6565b6008546040516320e085cd60e11b81526001600160481b0387166004820152919391928a9184919082906001600160a01b03165afa918215610481578992612112575b50611fa76040890189612e08565b600b54604051639d2b48ad60e01b81526001600160481b03891660048201529296929592918c91602090889060249082906001600160a01b03165afa90811561162f5760209761201493926118545750604051630168f40160e31b81529889978896879660048801612f79565b03915afa9081156105e45786916120ba575b50816120b2826120626001600160481b03946000805160206139c68339815191529660808b01996000198a019061205c8c612e82565b90613001565b61206b88612df4565b9661207960408a018a612e08565b909161209061208a60608d01612de6565b91612e82565b916020604051988998169c01359a60018060a01b031699600019019387612fc3565b0390a4604051f35b90506020813d60201161210a575b816120d5602093836126c3565b810103126116d7576000805160206139c6833981519152916120b26121016001600160481b0393612d20565b92505091612026565b3d91506120c8565b6121279192503d808b833e61188981836126c3565b9038611f99565b61214891925060203d6020116117d2576117c481836126c3565b9038611f47565b6008546040516320e085cd60e11b81526001600160481b0384166004820181905288928591906001600160a01b03168484602481845afa9384156106c55785946119db57506020602491604051928380926339fb67dd60e01b82528660048301525afa9081156106c55785916119bc5750600b54604051639d2b48ad60e01b81526004810193909352602090839060249082906001600160a01b03165afa9182156106c5576106909394959261199b5750604051636e2310c160e01b815294859460048601612f19565b50600a5460405163175a11e760e21b81526001600160481b038416600482015290602090829060249082906001600160a01b03165afa90811561079d578791612264575b5015611f0b565b61227d915060203d6020116107965761078881836126c3565b3861225d565b9092506020813d6020116122b9575b8161229f602093836126c3565b81010312611787576122b260ff91612d0c565b9290611efd565b3d9150612292565b5060405163484a47e760e01b815260048101849052929390602084602481845afa9384156105e4578694612450575b50602060249160405192838092630271c2cf60e61b82528960048301525afa9081156105e457869161241d575b50608061234e612355926001600160801b036123478861ffff612341878a01612e82565b16612781565b16906127b8565b9201612e82565b600754604051637ad65f2760e01b815291949190602090829060049082906001600160a01b03165afa90811561079d576001600160801b036123ae6123b79460ff83956064956106909b9c9d916123fe575b5016612781565b160416826127b8565b604051631544e26360e11b8152600481019690965261ffff90941660248601526000199091016044850152606484015260848301919091524260a4830152819060c4820190565b612417915060203d6020116117d2576117c481836126c3565b386123a7565b90506020813d602011612448575b81612438602093836126c3565b810103126116d75751608061231d565b3d915061242b565b602491945061246d602091823d84116106be576106af81836126c3565b9491506122f0565b5061248b61248560808701612e82565b856127c5565b15611ebd565b634e487b7160e01b85526011600452602485fd5b9091506020813d6020116124d1575b816124c1602093836126c3565b81010312611bea57519038611ea3565b3d91506124b4565b6124f2915060203d6020116107965761078881836126c3565b38611e5c565b9091506020813d602011612524575b81612514602093836126c3565b8101031261162b57519038611e30565b3d9150612507565b50346101515780600319360112610151576002546040516001600160a01b039091168152602090f35b90503461086057816003193601126108605780612574610eda9261268b565b6011815270436f6d6d69744d616e616765725631553160781b60208201526040519182916020835260208301906125c9565b60005b8381106125b95750506000910152565b81810151838201526020016125a9565b906020916125e2815180928185528580860191016125a6565b601f01601f1916010190565b60031990602081830112610207576004359167ffffffffffffffff8311610207578260a0920301126102075760040190565b6060906003190112610207576004359060243561ffff81168103610207579060443590565b67ffffffffffffffff811161265957604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761265957604052565b6040810190811067ffffffffffffffff82111761265957604052565b6060810190811067ffffffffffffffff82111761265957604052565b90601f8019910116810190811067ffffffffffffffff82111761265957604052565b9081602091031261020757516001600160a01b03811681036102075790565b9081602091031261020757516001600160801b03811681036102075790565b90816020910312610207575161ffff811681036102075790565b929361ffff6001600160801b0392969560609460808701988752602087015216604085015216910152565b90816020910312610207575160ff811681036102075790565b6001600160801b0391828092169182911692048211811515166127a2570290565b634e487b7160e01b600052601160045260246000fd5b919082018092116127a257565b60095460408051630271c2cf60e61b815260048082018590526001600160a01b0393841695949193909160209182866024818b5afa958615612a5b57600096612a2c575b50600754169084519763484a47e760e01b895281858a01528389602481845afa988915612a2157600099612a02575b5086156129eb57855163d1a640c760e01b8082528682018490529098858a602481865afa998a156129e05760009a6129c1575b5061ffff80911699168910156129515750508451637ad65f2760e01b815293839285925082905afa9283156129475750859260ff9260649260009261292a575b50506128c36001600160801b03948594859316612781565b160416928015612919576128e2826128db8388612781565b16846127b8565b42101594856128f4575b505050505090565b61290d955061290893929161234791612781565b6127b8565b421038808080806128ec565b505061292592506127b8565b421090565b6129409250803d106117d2576117c481836126c3565b38806128ab565b513d6000823e3d90fd5b898593928989868a95602483518096819382528a8a8301525afa9283156129b657610690959697600094612997575b505051631b18d90960e31b8152958695860161273d565b6129ae929450803d106106fb576106ec81836126c3565b918780612980565b50513d6000823e3d90fd5b6129d9919a50863d88116106fb576106ec81836126c3565b983861286b565b88513d6000823e3d90fd5b8551635013c2b960e01b8152808601839052602490fd5b612a1a919950843d86116106be576106af81836126c3565b9738612838565b86513d6000823e3d90fd5b90958382813d8311612a54575b612a4381836126c3565b810103126101515750519438612809565b503d612a39565b85513d6000823e3d90fd5b90816020910312610207575180151581036102075790565b60018060a01b03600954169260409283519263484a47e760e01b84526004928184860152602094602493868286818c5afa9182156129e057600092612cb9575b5087516310dc199160e31b8152868101859052878187818d5afa908115612cae57600091612c91575b5015612c7b57875163d1a640c760e01b8082528782018690529190888188818e5afa908115612c7057600091612c53575b5061ffff80911691161015612ba5575050908493929186519085820192835287820152868152612b47816126a7565b51902091855196879384926315ce5a4560e01b84528301525afa9182156129475750600091612b79575b509050421090565b82813d8311612b9e575b612b8d81836126c3565b810103126101515750518038612b71565b503d612b83565b8789949798929593505192630271c2cf60e61b8452878785015288848281885afa938415612c485790899291600095612c14575b5083518096819382528a8a8301525afa9283156129b65761069095969760009461299757505051631b18d90960e31b8152958695860161273d565b919282819692963d8311612c41575b612c2d81836126c3565b81010312610151575090889151938a612bd9565b503d612c23565b83513d6000823e3d90fd5b612c6a9150893d8b116106fb576106ec81836126c3565b38612b18565b8a513d6000823e3d90fd5b8751635013c2b960e01b81528087018590528590fd5b612ca89150883d8a116107965761078881836126c3565b38612ae7565b89513d6000823e3d90fd5b612cd1919250873d89116106be576106af81836126c3565b9038612abe565b90816020910312610207575163ffffffff811681036102075790565b67ffffffffffffffff81116126595760051b60200190565b51906001600160481b038216820361020757565b519064ffffffffff8216820361020757565b9081608091031261020757612d82606060405192612d4f8461266f565b612d5881612d0c565b8452612d6660208201612d0c565b6020850152612d7760408201612d0c565b604085015201612d20565b606082015290565b805115610dce5760200190565b8051821015610dce5760209160051b010190565b90815260f09190911b6001600160f01b0319166020820152602281019190915260b89190911b6001600160b81b0319166042820152604b0190565b3560ff811681036102075790565b356001600160a01b03811681036102075790565b903590601e1981360301821215610207570180359067ffffffffffffffff82116102075760200191813603831361020757565b91928493603495926001600160601b03199060601b16845260148401528483013701016000815290565b60409060ff612e7f949316815281602082015201906125c9565b90565b3561ffff811681036102075790565b60208183031261020757805167ffffffffffffffff9182821161020757019082601f830112156102075781519081116126595760405192612edc601f8301601f1916602001856126c3565b8184526020828401011161020757612e7f91602080850191016125a6565b9081602091031261020757516001600160601b03811681036102075790565b92906060926001600160481b03612f41929796971685526080602086015260808501906125c9565b946001600160601b03809216604085015216910152565b908060209392818452848401376000828201840152601f01601f1916010190565b94612fae6001600160601b039460ff612fbc9581608099969c9b9c168a5216602089015260a0604089015260a08801906125c9565b918683036060880152612f58565b9416910152565b949060809460ff612fe961ffff9364ffffffffff979b9a9660a08b5260a08b0191612f58565b99166020880152166040860152606085015216910152565b919094929460009460018060a01b036009541694604051602081019061302e816103cc8c89898c88612dab565b5190206001549860ff8a60201c16158061379f575b6136fc576040516357e1255760e01b81526004810188905261ffff8616602482015260448101879052936020856064818c5afa9485156118c4578a956136c8575b50600754604051635b3db70f60e11b8152600481018790526001600160a01b039091169591906020816024818e5afa908115611898578c91613685575b506020600491976040519283809263659621b560e01b82525afa908115611898578c91613666575b5091958b965b602460208d60405192838092635c6c1fef60e01b82528660048301525afa908115613659578e9161361b575b5064ffffffffff8091169084161080613609575b806135f7575b156131e657506103cc6131568b926040519283918d8d602085019788612dab565b519020604051635b3db70f60e11b8152600481018290529092906020816024818f5afa9081156131db578d91613198575b50600160ff919801169690926130ef565b90506020813d6020116131d3575b816131b3602093836126c3565b810103126131cf5760016131c860ff92612d0c565b9150613187565b8c80fd5b3d91506131a6565b6040513d8f823e3d90fd5b9496929193959c60ff915060281c161590816135e3575b5061352657883b1561352257604051631aa2f9f760e21b8152600481018690526001600160481b0385166024820152604481018b9052606481018b905264ffffffffff831660848201528a8160a481838e5af1801561351757613504575b506040519263223dea6d60e21b845260048401526080836024818c5afa9283156118c4578a936134e1575b5060ff161580806134cf575b1561337a5750505050843b156116d757604051638bea143b60e01b81526004810185905261ffff83166024820152604481018490526064810191909152858160848183895af180156105e457908691613366575b505061331e905b604080516020810195865260f09290921b6001600160f01b03191690820152604281019290925281606281016103cc565b519020813b1561166d578291602483926040519485938492638f04d1c160e01b845260048401525af1801561162f57613355575050565b61335f8291612645565b6101515750565b61336f90612645565b611bea5784386132e6565b9293919280806134b3575b156133ad5750505061331e92916001600160481b036133a89251168584886137f0565b6132ed565b80613498575b1561343a5750863b1561343657604051638bea143b60e01b81526004810187905261ffff851660248201526044810186905260648101919091528781608481838b5af1801561054757908891613422575b505061331e92916001600160481b036133a8925116908584886137f0565b61342b90612645565b611787578638613404565b8780fd5b61331e9493915064ffffffffff80606085015116911611600014613482576001600160481b0382613477838360206133a89701511689888c6137f0565b5116908584886137f0565b6001600160481b036133a89251168584886137f0565b5064ffffffffff60608401511664ffffffffff8216116133b3565b5064ffffffffff60608501511664ffffffffff83161115613385565b506001600160481b0383511615613292565b60ff9193506134fd9060803d811161047a5761046c81836126c3565b9290613286565b613510909a919a612645565b983861325b565b6040513d8d823e3d90fd5b8980fd5b8786918b868a6001600160481b038360018060a01b0360085416936024604051809481936320e085cd60e11b835216968760048301525afa9384156135d757916135af93918360ff966135ba575b505061ffff604051988998636806074560e01b8a5260048a01521660248801526044870152606486015260c0608486015260c48501906125c9565b911660a48301520390fd5b6135cf9294503d8091833e61188981836126c3565b918880613574565b604051903d90823e3d90fd5b63ffffffff91501660ff82161015386131fd565b5063ffffffff841660ff891610613135565b506001600160481b038216151561312f565b90506020813d602011613651575b81613636602093836126c3565b8101031261364d5761364790612d20565b3861311b565b8d80fd5b3d9150613629565b8e604051903d90823e3d90fd5b61367f915060203d6020116105dd576105ce81836126c3565b386130e9565b90506020813d6020116136c0575b816136a0602093836126c3565b810103126136bc5760206136b5600492612d0c565b91506130c1565b8b80fd5b3d9150613693565b9094506020813d6020116136f4575b816136e4602093836126c3565b8101031261352257519338613084565b3d91506136d7565b84876001600160481b038b93898560018060a01b0360085416926024604051809681936320e085cd60e11b835216958660048301525afa9283156105e4578661069095969794613782575b505061ffff6040519687966302041f5d60e51b885260048801521660248601526044850152606484015260a0608484015260a48301906125c9565b6137979294503d8091833e61188981836126c3565b918680613747565b5060405163c45d174960e01b8152600481018390526020816024818c5afa9081156118c4578a916137d1575b50613043565b6137ea915060203d6020116107965761078881836126c3565b386137cb565b600954604080516000979196956001600160a01b03909316949091602083018361381d8987868a86612dab565b0393613831601f19958681018352826126c3565b519020863b15613522578851638a0f01b560e01b815260048101919091526001600160481b03821660248201528981604481838b5af1801561390d576138f0575b509061388c61389893928951958693602085019889612dab565b039081018352826126c3565b519020813b15611bea578351631c30973d60e31b815260048101919091526001600160481b0392909216602483015290919083908390604490829084905af19081156138e75750613355575050565b513d84823e3d90fd5b6138989392919961390361388c92612645565b9991929350613872565b89513d8c823e3d90fd5b600054604051638da5cb5b60e01b81526001600160a01b03916020908290600490829086165afa9081156139b95760009161399b575b5016330361395757565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b6139b3915060203d8111610c4b57610c3c81836126c3565b3861394d565b6040513d6000823e3d90fdfe188fe0d5f9d9c076fe45a5974b2728c033c7e0a91cef00c6db5665172a3af745a2646970667358221220678fc29ed9d39ad6a1fa4a35bd15d92372e5500873414fe8df7c4ed381661aa864736f6c63430008100033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816306fdde03146125555750806311c94ee81461252c578063169df8d814611d9a578063200d2ed214611d75578063365a86fc14611d4e5780635415d03b14610ede57806354fd4d5014610e945780635c40f6f414610e50578063639a86a314610e275780637662966a14610dfe5780637c3e678e14610de45780637ea63c6e14610d765780638129fc1c1461088d578063823e2bc71461086457806383de896b1461082357806390b8145a146107fa578063b518a00e146107d1578063bd1346ae146107a8578063be07fc231461020c578063becdd597146101cf578063c3573ec7146101a6578063ee99205c1461017d578063f11abfd8146101545763f42cb0381461012957600080fd5b346101515780600319360112610151576008546040516001600160a01b039091168152602090f35b80fd5b50346101515780600319360112610151576006546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576004546040516001600160a01b039091168152602090f35b5034610151578060031936011261015157600c546040516001600160a01b039091168152602090f35b50346101515760403660031901126101515760243561ffff81168103610207576101fd6020916004356127c5565b6040519015158152f35b600080fd5b50346101515761021b36612620565b6009546040516310dc199160e31b8152600481018590526001600160a01b03949185169290602081602481875afa90811561079d57879161076e575b50156107555760405163d1a640c760e01b8082526004820184905290602081602481885afa908115610547578891610736575b5061ffff80911690861610156105ef57506020600495600754166040519687809263659621b560e01b82525afa9485156105e45786956105b3575b506102d563ffffffff8616612cf4565b936102e360405195866126c3565b63ffffffff8616808652601f19906102fa90612cf4565b01875b8181106105845750506040516357e1255760e01b81526004810184905261ffff8216602482015260448101839052602081606481885afa908115610547578891610552575b506040519063223dea6d60e21b82526004820152608081602481885afa908115610547578891610528575b5061037786612d8a565b5261038185612d8a565b506001600160481b03604061039587612d8a565b510151166001905b63ffffffff881660ff83161080610516575b1561048c576040516103da816103cc602082019488888b88612dab565b03601f1981018352826126c3565b5190206040519063223dea6d60e21b82526004820152608081602481895afa908115610481578991610452575b5061041560ff831688612d97565b5261042360ff821687612d97565b5063ffffffff60ff60016001600160481b0360406104438487168c612d97565b5101511693011691905061039d565b610474915060803d60801161047a575b61046c81836126c3565b810190612d32565b38610407565b503d610462565b6040513d8b823e3d90fd5b8689604051918291602083016020845282518091526020604085019301915b8181106104b9575050500390f35b919350916020608060019286516001600160481b0381511682526001600160481b038482015116848301526001600160481b03604082015116604083015264ffffffffff60608092015116908201520194019101918493926104ab565b506001600160481b03811615156103af565b610541915060803d60801161047a5761046c81836126c3565b3861036d565b6040513d8a823e3d90fd5b90506020813d60201161057c575b8161056d602093836126c3565b81010312610207575138610342565b3d9150610560565b6020906040516105938161266f565b8a81528a838201528a60408201528a606082015282828a010152016102fd565b6105d691955060203d6020116105dd575b6105ce81836126c3565b810190612cd8565b93386102c5565b503d6105c4565b6040513d88823e3d90fd5b604051630271c2cf60e61b8152600481018490528791849086602084602481845afa9384156106c5578594610702575b50604051918252826004830152602082602481845afa9081156106c55760249286926106d0575b506020906040519384809263484a47e760e01b82528760048301525afa9182156106c55761069093949592610694575b50604051631b18d90960e31b81529485946004860161273d565b0390fd5b6106b791925060203d6020116106be575b6106af81836126c3565b810190612704565b9085610676565b503d6106a5565b6040513d87823e3d90fd5b60209192506106f490823d84116106fb575b6106ec81836126c3565b810190612723565b9190610646565b503d6106e2565b9093506020813d60201161072e575b8161071e602093836126c3565b810103126102075751928561061f565b3d9150610711565b61074f915060203d6020116106fb576106ec81836126c3565b3861028a565b604051635013c2b960e01b815260048101839052602490fd5b610790915060203d602011610796575b61078881836126c3565b810190612a66565b38610257565b503d61077e565b6040513d89823e3d90fd5b50346101515780600319360112610151576005546040516001600160a01b039091168152602090f35b5034610151578060031936011261015157600b546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576009546040516001600160a01b039091168152602090f35b5034610151576020366003190112610151576004356006811015610860578060ff60209260051c6001015460f86040519360031b161c1615158152f35b5080fd5b5034610151578060031936011261015157600a546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576108a6613917565b60018060a01b0380825416906040519183630110ceef60e21b808552602092836004870152602490600c828801526044926b48617368696e6750726f787960a01b8489015260649186898481845afa9889156105e4578699610d57575b50876001600160601b0360a01b9916896002541617600255604051828152876004820152600c858201526b53636f72696e6750726f787960a01b8682015287818581855afa801561079d5789918891610d3a575b5016896003541617600355604051828152876004820152600785820152665374616b696e6760c81b8682015287818581855afa801561079d5789918891610d1d575b5016896004541617600455604051633222517f60e11b815287600482015260138582015272436f6e74656e74417373657453746f7261676560681b8682015287818581855afa801561079d5789918891610d00575b5016896005541617600555604051828152876004820152600f858201526e4964656e7469747953746f7261676560881b8682015287818581855afa801561079d5789918891610ce3575b501689600654161760065560405182815287600482015260118582015270506172616d657465727353746f7261676560781b8682015287818581855afa801561079d5789918891610cc6575b5016896007541617600755604051828152876004820152600e858201526d50726f66696c6553746f7261676560901b8682015287818581855afa801561079d5789918891610ca9575b5016896008541617600855604051828152876004820152601c858201527f5365727669636541677265656d656e7453746f7261676550726f7879000000008682015287818581855afa801561079d5789918891610c8c575b5016896009541617600955604051828152876004820152601485820152735368617264696e675461626c6553746f7261676560601b8682015287818581855afa801561079d5789918891610c6f575b501689600a541617600a55604051828152876004820152600e858201526d5374616b696e6753746f7261676560901b8682015287818581855afa95861561079d578989977f556e66696e616c697a6564537461746553746f726167650000000000000000009360179a91610c52575b50168b600b541617600b55604051978896879586528860048701528501528301525afa9182156106c5578592610c25575b50501690600c541617600c55604051f35b610c449250803d10610c4b575b610c3c81836126c3565b8101906126e5565b3880610c14565b503d610c32565b610c699150893d8b11610c4b57610c3c81836126c3565b38610be3565b610c869150893d8b11610c4b57610c3c81836126c3565b38610b74565b610ca39150893d8b11610c4b57610c3c81836126c3565b38610b25565b610cc09150893d8b11610c4b57610c3c81836126c3565b38610acd565b610cdd9150893d8b11610c4b57610c3c81836126c3565b38610a84565b610cfa9150893d8b11610c4b57610c3c81836126c3565b38610a38565b610d179150893d8b11610c4b57610c3c81836126c3565b386109ee565b610d349150893d8b11610c4b57610c3c81836126c3565b38610999565b610d519150893d8b11610c4b57610c3c81836126c3565b38610957565b610d6f919950873d8911610c4b57610c3c81836126c3565b9738610903565b50346101515760403660031901126101515760043560243580151580910361020757610da0613917565b6006821015610dce578160051c6001019160f883549160031b1660ff811b9283911b16911916179055604051f35b634e487b7160e01b600052603260045260246000fd5b50346101515760206101fd610df836612620565b91612a7e565b50346101515780600319360112610151576003546040516001600160a01b039091168152602090f35b50346101515780600319360112610151576007546040516001600160a01b039091168152602090f35b50346101515760203660031901126101515760043580151580910361020757610e77613917565b815460ff60a01b191660a09190911b60ff60a01b16178155604051f35b5034610151578060031936011261015157610eda604051610eb48161268b565b60058152640312e302e360dc1b60208201526040519182916020835260208301906125c9565b0390f35b503461015157610eed366125ee565b600c546001600160a01b0390811690610f0583612df4565b16906040519063273267a360e11b80835260208501356004840152602083602481855afa9283156105e4578693611d17575b5060206024946040519586809263fef57daf60e01b8252848a013560048301525afa9384156105e4578694611ce3575b5060405190815260208501356004820152602081602481855afa9081156105e4578691611cb1575b5015611c7c576009546002546001600160a01b039182169161101691602091829116610fbd60608a01612de6565b610ffa8a610fec610fcd82612df4565b610fda6040840184612e08565b916040519889950135908a8601612e3b565b03601f1981018552846126c3565b6040518095819482936345ed59e560e01b845260048401612e65565b03915afa90811561079d578791611c4a575b506040516310dc199160e31b815260048101829052602081602481865afa908115610547578891611c2b575b5015611c135760015460ff8160101c161580611bf6575b611aa55760065460405163010cf48d60e71b81523360048201529190602090839060249082906001600160a01b03165afa918215610481578992611a67575b5060181c60ff1615806119fd575b6118cf5760035460405163ce60dc6160e01b815260048101849052906001600160a01b0316602082602481885afa9182156118c4578a926118a3575b50602461110360608b01612de6565b6008546040516320e085cd60e11b81526001600160481b0387166004820152919391928d9184919082906001600160a01b03165afa918215611898578c92611873575b5061115460408c018c612e08565b600b54604051639d2b48ad60e01b81526001600160481b03891660048201529296929592918f91602090889060249082906001600160a01b03165afa90811561162f576020976111c29392611854575b50604051630168f40160e31b81529889978896879660048801612f79565b03915afa90811561048157889288918b936117f8575b506001600160481b0381611209856000805160206139c6833981519152948661120360808b01612e82565b8b613001565b61125b61121587612df4565b956112236040890189612e08565b61123260608b99939901612de6565b61123e60808c01612e82565b916020604051988998169c01359a60018060a01b03169987612fc3565b0390a461126a60808701612e82565b60405161129c816103cc89602083019587879160429391835261ffff60f01b9060f01b16602083015260228201520190565b51902060405190634849174160e01b82526004820152602081602481865afa9081156105475788916117d9575b506007546040516392c62af360e01b815290602090829060049082906001600160a01b03165afa9081156104815760ff9182918b916117aa575b5016911614611313575b86604051f35b6040516339075c2560e11b815260048101829052602081602481865afa90811561054757889161178b575b5061173f575b604051634089a17d60e01b815260048101829052602081602481865afa908115610547578891611720575b5060405163044c990b60e41b81526004810183905290602082602481875afa9182156104815789926116ef575b506001600160601b0380831681831601116116db57908392918995943b156116d7576001600160601b039081806040519463e54b26ff60e01b865286600487015216911601166024820152848160448183875af19081156106c55785916116c3575b5050813b1561162b57839160448392604051948593849263e25aa72560e01b845260048401528160248401525af190811561164e5783916116af575b50506005546040516349044e2360e11b815260208781013560048301526001600160a01b039092169181602481865afa908115611685578491611690575b50813b1561162b5760405163eaeb169560e01b815260208801356004820152602481018690526001600160a01b039091166044820152838160648183865af1908115611685578491611671575b5050803b1561166d5782809160446040518094819363367bcd9f60e01b835260208c013560048401528960248401525af190811561164e578391611659575b5050803b156108605760405163a021d76d60e01b815260208601356004820152828160248183865af190811561164e57839161163a575b5050803b1561086057818091602460405180948193635498a1d160e11b835260208b013560048401525af1801561162f57611617575b50507f56b6b4dd8196c56f848777686cb227d4532c0c7467653448208a1499a4eb5c549061159e84612df4565b9360206115ae6040830183612e08565b9290936115bd60608301612de6565b9661ffff6115cd60808501612e82565b60ff6115e6604051998a9960a08b5260a08b0191612f58565b9a1687870152166040860152606085015260808401520135946001600160a01b0316930390a338808080808061130d565b61162090612645565b61162b578338611571565b8380fd5b6040513d84823e3d90fd5b61164390612645565b61086057813861153b565b6040513d85823e3d90fd5b61166290612645565b610860578138611504565b8280fd5b61167a90612645565b61166d5782386114c5565b6040513d86823e3d90fd5b6116a9915060203d602011610c4b57610c3c81836126c3565b38611478565b6116b890612645565b61086057813861143a565b6116cc90612645565b61162b5783386113fe565b8580fd5b634e487b7160e01b89526011600452602489fd5b61171291925060203d602011611719575b61170a81836126c3565b810190612efa565b903861139c565b503d611700565b611739915060203d6020116117195761170a81836126c3565b3861136f565b813b156117875760405163fc75b3fb60e01b815260048101829052878160248183875af1801561054757611774575b50611344565b61178090979197612645565b953861176e565b8680fd5b6117a4915060203d6020116107965761078881836126c3565b3861133e565b6117cc915060203d6020116117d2575b6117c481836126c3565b810190612768565b38611303565b503d6117ba565b6117f2915060203d6020116117d2576117c481836126c3565b386112c9565b93509150506020823d60201161184c575b81611816602093836126c3565b8101031261184857866000805160206139c68339815191526001600160481b036118408b95612d20565b9391506111d8565b8880fd5b3d9150611809565b61186c919250883d8a116117195761170a81836126c3565b90386111a4565b6118919192508c3d8091833e61188981836126c3565b810190612e91565b9038611146565b6040513d8e823e3d90fd5b6118bd91925060203d6020116117d2576117c481836126c3565b90386110f4565b6040513d8c823e3d90fd5b6008546040516320e085cd60e11b81526001600160481b038316600482018190528a9391926001600160a01b03168484602481845afa9384156106c55785946119db575b506020602491604051928380926339fb67dd60e01b82528660048301525afa9081156106c55785916119bc575b50600b54604051639d2b48ad60e01b81526004810193909352602090839060249082906001600160a01b03165afa9182156106c5576106909394959261199b575b50604051636e2310c160e01b815294859460048601612f19565b6119b591925060203d6020116117195761170a81836126c3565b9085611981565b6119d5915060203d6020116117195761170a81836126c3565b85611940565b60249194506119f56020913d8089833e61188981836126c3565b949150611913565b50600a5460405163175a11e760e21b81526001600160481b038316600482015290602090829060249082906001600160a01b03165afa908115610481578991611a48575b50156110b8565b611a61915060203d6020116107965761078881836126c3565b38611a41565b9091506020813d602011611a9d575b81611a83602093836126c3565b8101031261184857611a9660ff91612d0c565b91906110aa565b3d9150611a76565b878684848a60206040518181019084825286604082015260408152611ac9816126a7565b5190206024604051809681936315ce5a4560e01b835260048301525afa9283156106c5578593611bbd575b506080611b019101612e82565b60075460405163daa303cf60e01b815291939190602090829060049082906001600160a01b03165afa80156105e45761ffff918791611b9e575b50168103818111611b8a57604051631544e26360e11b8152600481019390935261ffff9390931660248301526044820193909352606481019190915260848101919091524260a482015260c490fd5b634e487b7160e01b86526011600452602486fd5b611bb7915060203d6020116106fb576106ec81836126c3565b87611b3b565b9092506020813d602011611bee575b81611bd9602093836126c3565b81010312611bea5751916080611af4565b8480fd5b3d9150611bcc565b50611c0d86611c0760808a01612e82565b84612a7e565b1561106b565b60249060405190635013c2b960e01b82526004820152fd5b611c44915060203d6020116107965761078881836126c3565b38611054565b90506020813d602011611c74575b81611c65602093836126c3565b81010312611787575138611028565b3d9150611c58565b6044846020611c8a82612df4565b6040516340501bd760e01b81526001600160a01b0390911660048201529101356024820152fd5b90506020813d602011611cdb575b81611ccc602093836126c3565b810103126116d7575138610f8f565b3d9150611cbf565b9093506020813d602011611d0f575b81611cff602093836126c3565b810103126116d757519238610f67565b3d9150611cf2565b9392506020843d602011611d46575b81611d33602093836126c3565b810103126116d757925191926020610f37565b3d9150611d26565b5034610151578060031936011261015157546040516001600160a01b039091168152602090f35b503461015157806003193601126101515760ff6020915460a01c166040519015158152f35b503461015157611da9366125ee565b600954600254611e1e916001600160a01b0390811691602091610fec9116611dd360608701612de6565b611e02611ddf88612df4565b611dec60408a018a612e08565b604096919651968793898d0135908a8601612e3b565b6040518096819482936345ed59e560e01b845260048401612e65565b03915afa9182156116855784926124f8575b506040516310dc199160e31b815260048101839052602081602481855afa9081156106c55785916124d9575b50156107555760249060206001600160a01b03611e7886612df4565b166040519384809263fef57daf60e01b82528489013560048301525afa9182156106c55785926124a5575b50816000198101116124915760015460ff81161580612475575b6122c15760065460405163010cf48d60e71b8152336004820152929190602090849060249082906001600160a01b03165afa92831561079d578793612283575b5060081c60ff161580612219575b61214f57602490602060018060a01b0360035416916040519384809263ce60dc6160e01b82528960048301525afa91821561079d57879261212e575b506024611f5660608801612de6565b6008546040516320e085cd60e11b81526001600160481b0387166004820152919391928a9184919082906001600160a01b03165afa918215610481578992612112575b50611fa76040890189612e08565b600b54604051639d2b48ad60e01b81526001600160481b03891660048201529296929592918c91602090889060249082906001600160a01b03165afa90811561162f5760209761201493926118545750604051630168f40160e31b81529889978896879660048801612f79565b03915afa9081156105e45786916120ba575b50816120b2826120626001600160481b03946000805160206139c68339815191529660808b01996000198a019061205c8c612e82565b90613001565b61206b88612df4565b9661207960408a018a612e08565b909161209061208a60608d01612de6565b91612e82565b916020604051988998169c01359a60018060a01b031699600019019387612fc3565b0390a4604051f35b90506020813d60201161210a575b816120d5602093836126c3565b810103126116d7576000805160206139c6833981519152916120b26121016001600160481b0393612d20565b92505091612026565b3d91506120c8565b6121279192503d808b833e61188981836126c3565b9038611f99565b61214891925060203d6020116117d2576117c481836126c3565b9038611f47565b6008546040516320e085cd60e11b81526001600160481b0384166004820181905288928591906001600160a01b03168484602481845afa9384156106c55785946119db57506020602491604051928380926339fb67dd60e01b82528660048301525afa9081156106c55785916119bc5750600b54604051639d2b48ad60e01b81526004810193909352602090839060249082906001600160a01b03165afa9182156106c5576106909394959261199b5750604051636e2310c160e01b815294859460048601612f19565b50600a5460405163175a11e760e21b81526001600160481b038416600482015290602090829060249082906001600160a01b03165afa90811561079d578791612264575b5015611f0b565b61227d915060203d6020116107965761078881836126c3565b3861225d565b9092506020813d6020116122b9575b8161229f602093836126c3565b81010312611787576122b260ff91612d0c565b9290611efd565b3d9150612292565b5060405163484a47e760e01b815260048101849052929390602084602481845afa9384156105e4578694612450575b50602060249160405192838092630271c2cf60e61b82528960048301525afa9081156105e457869161241d575b50608061234e612355926001600160801b036123478861ffff612341878a01612e82565b16612781565b16906127b8565b9201612e82565b600754604051637ad65f2760e01b815291949190602090829060049082906001600160a01b03165afa90811561079d576001600160801b036123ae6123b79460ff83956064956106909b9c9d916123fe575b5016612781565b160416826127b8565b604051631544e26360e11b8152600481019690965261ffff90941660248601526000199091016044850152606484015260848301919091524260a4830152819060c4820190565b612417915060203d6020116117d2576117c481836126c3565b386123a7565b90506020813d602011612448575b81612438602093836126c3565b810103126116d75751608061231d565b3d915061242b565b602491945061246d602091823d84116106be576106af81836126c3565b9491506122f0565b5061248b61248560808701612e82565b856127c5565b15611ebd565b634e487b7160e01b85526011600452602485fd5b9091506020813d6020116124d1575b816124c1602093836126c3565b81010312611bea57519038611ea3565b3d91506124b4565b6124f2915060203d6020116107965761078881836126c3565b38611e5c565b9091506020813d602011612524575b81612514602093836126c3565b8101031261162b57519038611e30565b3d9150612507565b50346101515780600319360112610151576002546040516001600160a01b039091168152602090f35b90503461086057816003193601126108605780612574610eda9261268b565b6011815270436f6d6d69744d616e616765725631553160781b60208201526040519182916020835260208301906125c9565b60005b8381106125b95750506000910152565b81810151838201526020016125a9565b906020916125e2815180928185528580860191016125a6565b601f01601f1916010190565b60031990602081830112610207576004359167ffffffffffffffff8311610207578260a0920301126102075760040190565b6060906003190112610207576004359060243561ffff81168103610207579060443590565b67ffffffffffffffff811161265957604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761265957604052565b6040810190811067ffffffffffffffff82111761265957604052565b6060810190811067ffffffffffffffff82111761265957604052565b90601f8019910116810190811067ffffffffffffffff82111761265957604052565b9081602091031261020757516001600160a01b03811681036102075790565b9081602091031261020757516001600160801b03811681036102075790565b90816020910312610207575161ffff811681036102075790565b929361ffff6001600160801b0392969560609460808701988752602087015216604085015216910152565b90816020910312610207575160ff811681036102075790565b6001600160801b0391828092169182911692048211811515166127a2570290565b634e487b7160e01b600052601160045260246000fd5b919082018092116127a257565b60095460408051630271c2cf60e61b815260048082018590526001600160a01b0393841695949193909160209182866024818b5afa958615612a5b57600096612a2c575b50600754169084519763484a47e760e01b895281858a01528389602481845afa988915612a2157600099612a02575b5086156129eb57855163d1a640c760e01b8082528682018490529098858a602481865afa998a156129e05760009a6129c1575b5061ffff80911699168910156129515750508451637ad65f2760e01b815293839285925082905afa9283156129475750859260ff9260649260009261292a575b50506128c36001600160801b03948594859316612781565b160416928015612919576128e2826128db8388612781565b16846127b8565b42101594856128f4575b505050505090565b61290d955061290893929161234791612781565b6127b8565b421038808080806128ec565b505061292592506127b8565b421090565b6129409250803d106117d2576117c481836126c3565b38806128ab565b513d6000823e3d90fd5b898593928989868a95602483518096819382528a8a8301525afa9283156129b657610690959697600094612997575b505051631b18d90960e31b8152958695860161273d565b6129ae929450803d106106fb576106ec81836126c3565b918780612980565b50513d6000823e3d90fd5b6129d9919a50863d88116106fb576106ec81836126c3565b983861286b565b88513d6000823e3d90fd5b8551635013c2b960e01b8152808601839052602490fd5b612a1a919950843d86116106be576106af81836126c3565b9738612838565b86513d6000823e3d90fd5b90958382813d8311612a54575b612a4381836126c3565b810103126101515750519438612809565b503d612a39565b85513d6000823e3d90fd5b90816020910312610207575180151581036102075790565b60018060a01b03600954169260409283519263484a47e760e01b84526004928184860152602094602493868286818c5afa9182156129e057600092612cb9575b5087516310dc199160e31b8152868101859052878187818d5afa908115612cae57600091612c91575b5015612c7b57875163d1a640c760e01b8082528782018690529190888188818e5afa908115612c7057600091612c53575b5061ffff80911691161015612ba5575050908493929186519085820192835287820152868152612b47816126a7565b51902091855196879384926315ce5a4560e01b84528301525afa9182156129475750600091612b79575b509050421090565b82813d8311612b9e575b612b8d81836126c3565b810103126101515750518038612b71565b503d612b83565b8789949798929593505192630271c2cf60e61b8452878785015288848281885afa938415612c485790899291600095612c14575b5083518096819382528a8a8301525afa9283156129b65761069095969760009461299757505051631b18d90960e31b8152958695860161273d565b919282819692963d8311612c41575b612c2d81836126c3565b81010312610151575090889151938a612bd9565b503d612c23565b83513d6000823e3d90fd5b612c6a9150893d8b116106fb576106ec81836126c3565b38612b18565b8a513d6000823e3d90fd5b8751635013c2b960e01b81528087018590528590fd5b612ca89150883d8a116107965761078881836126c3565b38612ae7565b89513d6000823e3d90fd5b612cd1919250873d89116106be576106af81836126c3565b9038612abe565b90816020910312610207575163ffffffff811681036102075790565b67ffffffffffffffff81116126595760051b60200190565b51906001600160481b038216820361020757565b519064ffffffffff8216820361020757565b9081608091031261020757612d82606060405192612d4f8461266f565b612d5881612d0c565b8452612d6660208201612d0c565b6020850152612d7760408201612d0c565b604085015201612d20565b606082015290565b805115610dce5760200190565b8051821015610dce5760209160051b010190565b90815260f09190911b6001600160f01b0319166020820152602281019190915260b89190911b6001600160b81b0319166042820152604b0190565b3560ff811681036102075790565b356001600160a01b03811681036102075790565b903590601e1981360301821215610207570180359067ffffffffffffffff82116102075760200191813603831361020757565b91928493603495926001600160601b03199060601b16845260148401528483013701016000815290565b60409060ff612e7f949316815281602082015201906125c9565b90565b3561ffff811681036102075790565b60208183031261020757805167ffffffffffffffff9182821161020757019082601f830112156102075781519081116126595760405192612edc601f8301601f1916602001856126c3565b8184526020828401011161020757612e7f91602080850191016125a6565b9081602091031261020757516001600160601b03811681036102075790565b92906060926001600160481b03612f41929796971685526080602086015260808501906125c9565b946001600160601b03809216604085015216910152565b908060209392818452848401376000828201840152601f01601f1916010190565b94612fae6001600160601b039460ff612fbc9581608099969c9b9c168a5216602089015260a0604089015260a08801906125c9565b918683036060880152612f58565b9416910152565b949060809460ff612fe961ffff9364ffffffffff979b9a9660a08b5260a08b0191612f58565b99166020880152166040860152606085015216910152565b919094929460009460018060a01b036009541694604051602081019061302e816103cc8c89898c88612dab565b5190206001549860ff8a60201c16158061379f575b6136fc576040516357e1255760e01b81526004810188905261ffff8616602482015260448101879052936020856064818c5afa9485156118c4578a956136c8575b50600754604051635b3db70f60e11b8152600481018790526001600160a01b039091169591906020816024818e5afa908115611898578c91613685575b506020600491976040519283809263659621b560e01b82525afa908115611898578c91613666575b5091958b965b602460208d60405192838092635c6c1fef60e01b82528660048301525afa908115613659578e9161361b575b5064ffffffffff8091169084161080613609575b806135f7575b156131e657506103cc6131568b926040519283918d8d602085019788612dab565b519020604051635b3db70f60e11b8152600481018290529092906020816024818f5afa9081156131db578d91613198575b50600160ff919801169690926130ef565b90506020813d6020116131d3575b816131b3602093836126c3565b810103126131cf5760016131c860ff92612d0c565b9150613187565b8c80fd5b3d91506131a6565b6040513d8f823e3d90fd5b9496929193959c60ff915060281c161590816135e3575b5061352657883b1561352257604051631aa2f9f760e21b8152600481018690526001600160481b0385166024820152604481018b9052606481018b905264ffffffffff831660848201528a8160a481838e5af1801561351757613504575b506040519263223dea6d60e21b845260048401526080836024818c5afa9283156118c4578a936134e1575b5060ff161580806134cf575b1561337a5750505050843b156116d757604051638bea143b60e01b81526004810185905261ffff83166024820152604481018490526064810191909152858160848183895af180156105e457908691613366575b505061331e905b604080516020810195865260f09290921b6001600160f01b03191690820152604281019290925281606281016103cc565b519020813b1561166d578291602483926040519485938492638f04d1c160e01b845260048401525af1801561162f57613355575050565b61335f8291612645565b6101515750565b61336f90612645565b611bea5784386132e6565b9293919280806134b3575b156133ad5750505061331e92916001600160481b036133a89251168584886137f0565b6132ed565b80613498575b1561343a5750863b1561343657604051638bea143b60e01b81526004810187905261ffff851660248201526044810186905260648101919091528781608481838b5af1801561054757908891613422575b505061331e92916001600160481b036133a8925116908584886137f0565b61342b90612645565b611787578638613404565b8780fd5b61331e9493915064ffffffffff80606085015116911611600014613482576001600160481b0382613477838360206133a89701511689888c6137f0565b5116908584886137f0565b6001600160481b036133a89251168584886137f0565b5064ffffffffff60608401511664ffffffffff8216116133b3565b5064ffffffffff60608501511664ffffffffff83161115613385565b506001600160481b0383511615613292565b60ff9193506134fd9060803d811161047a5761046c81836126c3565b9290613286565b613510909a919a612645565b983861325b565b6040513d8d823e3d90fd5b8980fd5b8786918b868a6001600160481b038360018060a01b0360085416936024604051809481936320e085cd60e11b835216968760048301525afa9384156135d757916135af93918360ff966135ba575b505061ffff604051988998636806074560e01b8a5260048a01521660248801526044870152606486015260c0608486015260c48501906125c9565b911660a48301520390fd5b6135cf9294503d8091833e61188981836126c3565b918880613574565b604051903d90823e3d90fd5b63ffffffff91501660ff82161015386131fd565b5063ffffffff841660ff891610613135565b506001600160481b038216151561312f565b90506020813d602011613651575b81613636602093836126c3565b8101031261364d5761364790612d20565b3861311b565b8d80fd5b3d9150613629565b8e604051903d90823e3d90fd5b61367f915060203d6020116105dd576105ce81836126c3565b386130e9565b90506020813d6020116136c0575b816136a0602093836126c3565b810103126136bc5760206136b5600492612d0c565b91506130c1565b8b80fd5b3d9150613693565b9094506020813d6020116136f4575b816136e4602093836126c3565b8101031261352257519338613084565b3d91506136d7565b84876001600160481b038b93898560018060a01b0360085416926024604051809681936320e085cd60e11b835216958660048301525afa9283156105e4578661069095969794613782575b505061ffff6040519687966302041f5d60e51b885260048801521660248601526044850152606484015260a0608484015260a48301906125c9565b6137979294503d8091833e61188981836126c3565b918680613747565b5060405163c45d174960e01b8152600481018390526020816024818c5afa9081156118c4578a916137d1575b50613043565b6137ea915060203d6020116107965761078881836126c3565b386137cb565b600954604080516000979196956001600160a01b03909316949091602083018361381d8987868a86612dab565b0393613831601f19958681018352826126c3565b519020863b15613522578851638a0f01b560e01b815260048101919091526001600160481b03821660248201528981604481838b5af1801561390d576138f0575b509061388c61389893928951958693602085019889612dab565b039081018352826126c3565b519020813b15611bea578351631c30973d60e31b815260048101919091526001600160481b0392909216602483015290919083908390604490829084905af19081156138e75750613355575050565b513d84823e3d90fd5b6138989392919961390361388c92612645565b9991929350613872565b89513d8c823e3d90fd5b600054604051638da5cb5b60e01b81526001600160a01b03916020908290600490829086165afa9081156139b95760009161399b575b5016330361395757565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b6139b3915060203d8111610c4b57610c3c81836126c3565b3861394d565b6040513d6000823e3d90fdfe188fe0d5f9d9c076fe45a5974b2728c033c7e0a91cef00c6db5665172a3af745a2646970667358221220678fc29ed9d39ad6a1fa4a35bd15d92372e5500873414fe8df7c4ed381661aa864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 15379,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "status",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7091,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "reqs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bool)6_storage"
      },
      {
        "astId": 7094,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "hashingProxy",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(HashingProxy)8950"
      },
      {
        "astId": 7097,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "scoringProxy",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ScoringProxy)12659"
      },
      {
        "astId": 7100,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "stakingContract",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Staking)15211"
      },
      {
        "astId": 7103,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "contentAssetStorage",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ContentAssetStorage)23786"
      },
      {
        "astId": 7106,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "identityStorage",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IdentityStorage)18485"
      },
      {
        "astId": 7109,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "parametersStorage",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ParametersStorage)19108"
      },
      {
        "astId": 7112,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "profileStorage",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ProfileStorage)19582"
      },
      {
        "astId": 7115,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "serviceAgreementStorageProxy",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ServiceAgreementStorageProxy)21098"
      },
      {
        "astId": 7118,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "shardingTableStorage",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ShardingTableStorage)22972"
      },
      {
        "astId": 7121,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "stakingStorage",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(StakingStorage)23184"
      },
      {
        "astId": 7124,
        "contract": "contracts/CommitManagerV1U1.sol:CommitManagerV1U1",
        "label": "unfinalizedStateStorage",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(UnfinalizedStateStorage)23339"
      }
    ],
    "types": {
      "t_array(t_bool)6_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[6]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ContentAssetStorage)23786": {
        "encoding": "inplace",
        "label": "contract ContentAssetStorage",
        "numberOfBytes": "20"
      },
      "t_contract(HashingProxy)8950": {
        "encoding": "inplace",
        "label": "contract HashingProxy",
        "numberOfBytes": "20"
      },
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_contract(IdentityStorage)18485": {
        "encoding": "inplace",
        "label": "contract IdentityStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ParametersStorage)19108": {
        "encoding": "inplace",
        "label": "contract ParametersStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ProfileStorage)19582": {
        "encoding": "inplace",
        "label": "contract ProfileStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ScoringProxy)12659": {
        "encoding": "inplace",
        "label": "contract ScoringProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ServiceAgreementStorageProxy)21098": {
        "encoding": "inplace",
        "label": "contract ServiceAgreementStorageProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ShardingTableStorage)22972": {
        "encoding": "inplace",
        "label": "contract ShardingTableStorage",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)15211": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      },
      "t_contract(StakingStorage)23184": {
        "encoding": "inplace",
        "label": "contract StakingStorage",
        "numberOfBytes": "20"
      },
      "t_contract(UnfinalizedStateStorage)23339": {
        "encoding": "inplace",
        "label": "contract UnfinalizedStateStorage",
        "numberOfBytes": "20"
      }
    }
  }
}
