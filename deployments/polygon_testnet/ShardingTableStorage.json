{
  "address": "0x4b08A849E94216e8e45267059B31C6b5C550Bab3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "prevIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "nextIdentityId",
          "type": "uint72"
        }
      ],
      "name": "createNodeObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrementNodesCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "deleteNodeObject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "firstIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint16",
          "name": "nodesNumber",
          "type": "uint16"
        }
      ],
      "name": "getMultipleNodes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "prevIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "nextIdentityId",
              "type": "uint72"
            }
          ],
          "internalType": "struct ShardingTableStructs.Node[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "getNode",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "prevIdentityId",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "nextIdentityId",
              "type": "uint72"
            }
          ],
          "internalType": "struct ShardingTableStructs.Node",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "head",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementNodesCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "leftNodeIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "rightNodeIdentityId",
          "type": "uint72"
        }
      ],
      "name": "link",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "nodeExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nodesCount",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "setHead",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "newNextIdentityId",
          "type": "uint72"
        }
      ],
      "name": "setNextIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "newPrevIdentityId",
          "type": "uint72"
        }
      ],
      "name": "setPrevIdentityId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "setTail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tail",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c8a7e7884634ea683a9322b720cdf48c70c39082bda6cb25a5b32870fdc56ba",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0x4b08A849E94216e8e45267059B31C6b5C550Bab3",
    "transactionIndex": 27,
    "gasUsed": "656009",
    "logsBloom": "0x
    "blockHash": "0xbe878ef140403dd47ad5e02e7074f901de9227a208e772892dde72a18d58845e",
    "transactionHash": "0x8c8a7e7884634ea683a9322b720cdf48c70c39082bda6cb25a5b32870fdc56ba",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 37384427,
        "transactionHash": "0x8c8a7e7884634ea683a9322b720cdf48c70c39082bda6cb25a5b32870fdc56ba",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000098e35e35fa87000000000000000000000000000000000000000000000000088b9dce8132de7a0000000000000000000000000000000000000000000000c05966bb892718d090000000000000000000000000000000000000000000000000088b04eb22fce3f30000000000000000000000000000000000000000000000c05967546c854ecb170",
        "logIndex": 118,
        "blockHash": "0xbe878ef140403dd47ad5e02e7074f901de9227a208e772892dde72a18d58845e"
      }
    ],
    "blockNumber": 37384427,
    "cumulativeGasUsed": "4146475",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"}],\"name\":\"createNodeObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decrementNodesCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"deleteNodeObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"firstIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"nodesNumber\",\"type\":\"uint16\"}],\"name\":\"getMultipleNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"}],\"internalType\":\"struct ShardingTableStructs.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"prevIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextIdentityId\",\"type\":\"uint72\"}],\"internalType\":\"struct ShardingTableStructs.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementNodesCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"leftNodeIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"rightNodeIdentityId\",\"type\":\"uint72\"}],\"name\":\"link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"nodeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodesCount\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"setHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"newNextIdentityId\",\"type\":\"uint72\"}],\"name\":\"setNextIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"newPrevIdentityId\",\"type\":\"uint72\"}],\"name\":\"setPrevIdentityId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"setTail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/storage/ShardingTableStorage.sol\":\"ShardingTableStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/constants/ShardingTableConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint72 constant NULL = 0;\\n\",\"keccak256\":\"0xe80366170c622c9277da5d2bfbe7883b4b2e9d77c8f9407a3ce964c99ab24aa7\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/ShardingTableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"../structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"../constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTableStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"ShardingTableStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 public head;\\n    uint72 public tail;\\n    uint72 public nodesCount;\\n\\n    // identityId => Node\\n    mapping(uint72 => ShardingTableStructs.Node) internal nodes;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        head = NULL;\\n        tail = NULL;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function incrementNodesCount() external onlyContracts {\\n        nodesCount++;\\n    }\\n\\n    function decrementNodesCount() external onlyContracts {\\n        nodesCount--;\\n    }\\n\\n    function setHead(uint72 identityId) external onlyContracts {\\n        head = identityId;\\n    }\\n\\n    function setTail(uint72 identityId) external onlyContracts {\\n        tail = identityId;\\n    }\\n\\n    function createNodeObject(uint72 identityId, uint72 prevIdentityId, uint72 nextIdentityId) external onlyContracts {\\n        nodes[identityId] = ShardingTableStructs.Node({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId\\n        });\\n    }\\n\\n    function getNode(uint72 identityId) external view returns (ShardingTableStructs.Node memory) {\\n        return nodes[identityId];\\n    }\\n\\n    function deleteNodeObject(uint72 identityId) external onlyContracts {\\n        delete nodes[identityId];\\n    }\\n\\n    function nodeExists(uint72 identityId) external view returns (bool) {\\n        return nodes[identityId].identityId != 0;\\n    }\\n\\n    function setPrevIdentityId(uint72 identityId, uint72 newPrevIdentityId) external onlyContracts {\\n        nodes[identityId].prevIdentityId = newPrevIdentityId;\\n    }\\n\\n    function setNextIdentityId(uint72 identityId, uint72 newNextIdentityId) external onlyContracts {\\n        nodes[identityId].nextIdentityId = newNextIdentityId;\\n    }\\n\\n    function getMultipleNodes(\\n        uint72 firstIdentityId,\\n        uint16 nodesNumber\\n    ) external view returns (ShardingTableStructs.Node[] memory) {\\n        ShardingTableStructs.Node[] memory nodesPage = new ShardingTableStructs.Node[](nodesNumber);\\n\\n        ShardingTableStructs.Node memory currentNode = nodes[firstIdentityId];\\n        for (uint256 i; i < nodesNumber; ) {\\n            nodesPage[i] = currentNode;\\n            currentNode = nodes[currentNode.nextIdentityId];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n\\n    function link(uint72 leftNodeIdentityId, uint72 rightNodeIdentityId) external onlyContracts {\\n        nodes[leftNodeIdentityId].nextIdentityId = rightNodeIdentityId;\\n        nodes[rightNodeIdentityId].prevIdentityId = leftNodeIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xac72b874995c1c6d181539ef17b90b5165f242076235e4c05282f2bd0311f3cf\",\"license\":\"MIT\"},\"contracts/structs/ShardingTableStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ShardingTableStructs {\\n    struct NodeInfo {\\n        bytes nodeId;\\n        uint72 identityId;\\n        uint96 ask;\\n        uint96 stake;\\n    }\\n\\n    struct Node {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xf6f18e4e0643f4c6fa96480189e89d8c7e6fb8de7a4a3f36da24ab3b0ea31d76\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100cf57601f610b4d38819003918201601f19168301916001600160401b038311848410176100d4578084926020946040528339810103126100cf57516001600160a01b038116908190036100cf57801561008a57600080546001600160e81b031916919091179055600180546001600160481b0319169055604051610a6290816100eb8239f35b60405162461bcd60e51b815260206004820152601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816306fdde03146107a15750806313d8c8401461077a578063162929e9146106e9578063283350a514610676578063365a86fc1461064f578063406def5b146106105780634f3ae9ee146105b757806354fd4d50146105775780635d68479c1461053c5780636b57280e146104f757806376d03c2f1461035c5780638f7dcfa3146103345780639d1a5bde14610278578063ba624e841461023e578063d0f4c7cf146101ce578063d9b6546314610162578063de647ca8146101155763f1a3c5b3146100e857600080fd5b346101115781600319360112610111576020906001600160481b0360015460481c169051908152f35b5080fd5b50346101115760203660031901126101115761012f610832565b6101376108f9565b825468ffffffffffffffffff60a01b191660a09190911b68ffffffffffffffffff60a01b1617825551f35b503461011157816003193601126101115761017b6108f9565b6001546001600160481b038160481c1680156101ba57600160481b600160901b03906000190160481b1690600160481b600160901b0319161760015551f35b634e487b7160e01b84526011600452602484fd5b503461011157806003193601126101115761023b6101ea610832565b6001600160481b036101fa61084d565b916102036108f9565b1684526002602052828420805468ffffffffffffffffff60901b191660909290921b68ffffffffffffffffff60901b16919091179055565b51f35b5034610111576020366003190112610111576001600160481b03610260610832565b6102686108f9565b1682526002602052818181205551f35b503461011157606036600319011261011157610292610832565b61029a61084d565b906044356001600160481b0390818116809103610330576103068261023b956102c16108f9565b818851966102ce88610863565b168087528260208801921682528887019485528952600260205281888a209651166001600160481b03198754161786555116846108d3565b51825468ffffffffffffffffff60901b1916911660901b68ffffffffffffffffff60901b16179055565b8580fd5b50346101115781600319360112610111576001600160481b036020925460a01c169051908152f35b5090346104f457816003193601126104f457610376610832565b916024359261ffff84168094036104f057919290610393826109ea565b916103a0825193846108b1565b808352601f196103af826109ea565b01855b8181106104cf5750506001600160481b038094168552600293602094808652838720908451916103e183610863565b549083821683526048928483851c168982015284609093841c168782015289905b8682106104745787518a81528951818c018190528a8c019190818b01908d8f5b82811061042f5784840385f35b909192826060826104656001948a51604090816001600160481b0391828151168552826020820151166020860152015116910152565b01960191019492919094610422565b8781610491848c9e9d9b9c8a9561048b8383610a02565b52610a02565b5001511689528187526001888a20868a51916104ac83610863565b5481811683528181891c168b840152861c168a8201529101909997969899610402565b6020906104df97969495976109cb565b82828a0101520195939294956103b2565b8280fd5b80fd5b503461011157806003193601126101115761023b610513610832565b6001600160481b0361052361084d565b9161052c6108f9565b16845260026020528284206108d3565b503461011157602036600319011261011157602091816001600160481b039182610564610832565b1681526002855220541615159051908152f35b503461011157816003193601126101115780516105b39161059782610895565b60058252640312e302e360dc1b602083015251918291826107e9565b0390f35b50346101115781600319360112610111576105d06108f9565b6001546001600160481b03808260481c169081146101ba576001600160481b600160901b03910160481b1690600160481b600160901b0319161760015551f35b5034610111576020366003190112610111576001600160481b03610632610832565b61063a6108f9565b166001600160481b0319600154161760015551f35b5034610111578160031936011261011157905490516001600160a01b039091168152602090f35b503461011157806003193601126101115761023b610692610832565b61069a61084d565b6106a26108f9565b6001600160481b0382811686526002602052848620805468ffffffffffffffffff60901b1916609084901b68ffffffffffffffffff60901b161790551684528284206108d3565b503461011157602036600319011261011157906107788260609361070b610832565b936107146109cb565b506001600160481b0380951681526002602052209281519361073585610863565b548181168552818160481c16602086015260901c1681840152518092604090816001600160481b0391828151168552826020820151166020860152015116910152565bf35b50346101115781600319360112610111576020906001600160481b03600154169051908152f35b919050346104f057826003193601126104f0576105b392506107c282610895565b60148252735368617264696e675461626c6553746f7261676560601b602083015251918291825b6020808252825181830181905290939260005b82811061081e57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016107fc565b600435906001600160481b038216820361084857565b600080fd5b602435906001600160481b038216820361084857565b6060810190811067ffffffffffffffff82111761087f57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761087f57604052565b90601f8019910116810190811067ffffffffffffffff82111761087f57604052565b90600160481b600160901b0382549160481b1690600160481b600160901b031916179055565b60008054604051631627905560e01b815233600482015260209290918390839060249082906001600160a01b03165afa9182156109be578192610984575b5050156109415750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b9091508281813d83116109b7575b61099c81836108b1565b8101031261011157519081151582036104f457503880610937565b503d610992565b50604051903d90823e3d90fd5b604051906109d882610863565b60006040838281528260208201520152565b67ffffffffffffffff811161087f5760051b60200190565b8051821015610a165760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fa6c9b76bd4a165f3e38afc03aa94789e4778b843409d20dea35f26ded3bdffc64736f6c63430008100033",
  "deployedBytecode": "0x60806040818152600436101561001457600080fd5b600091823560e01c90816306fdde03146107a15750806313d8c8401461077a578063162929e9146106e9578063283350a514610676578063365a86fc1461064f578063406def5b146106105780634f3ae9ee146105b757806354fd4d50146105775780635d68479c1461053c5780636b57280e146104f757806376d03c2f1461035c5780638f7dcfa3146103345780639d1a5bde14610278578063ba624e841461023e578063d0f4c7cf146101ce578063d9b6546314610162578063de647ca8146101155763f1a3c5b3146100e857600080fd5b346101115781600319360112610111576020906001600160481b0360015460481c169051908152f35b5080fd5b50346101115760203660031901126101115761012f610832565b6101376108f9565b825468ffffffffffffffffff60a01b191660a09190911b68ffffffffffffffffff60a01b1617825551f35b503461011157816003193601126101115761017b6108f9565b6001546001600160481b038160481c1680156101ba57600160481b600160901b03906000190160481b1690600160481b600160901b0319161760015551f35b634e487b7160e01b84526011600452602484fd5b503461011157806003193601126101115761023b6101ea610832565b6001600160481b036101fa61084d565b916102036108f9565b1684526002602052828420805468ffffffffffffffffff60901b191660909290921b68ffffffffffffffffff60901b16919091179055565b51f35b5034610111576020366003190112610111576001600160481b03610260610832565b6102686108f9565b1682526002602052818181205551f35b503461011157606036600319011261011157610292610832565b61029a61084d565b906044356001600160481b0390818116809103610330576103068261023b956102c16108f9565b818851966102ce88610863565b168087528260208801921682528887019485528952600260205281888a209651166001600160481b03198754161786555116846108d3565b51825468ffffffffffffffffff60901b1916911660901b68ffffffffffffffffff60901b16179055565b8580fd5b50346101115781600319360112610111576001600160481b036020925460a01c169051908152f35b5090346104f457816003193601126104f457610376610832565b916024359261ffff84168094036104f057919290610393826109ea565b916103a0825193846108b1565b808352601f196103af826109ea565b01855b8181106104cf5750506001600160481b038094168552600293602094808652838720908451916103e183610863565b549083821683526048928483851c168982015284609093841c168782015289905b8682106104745787518a81528951818c018190528a8c019190818b01908d8f5b82811061042f5784840385f35b909192826060826104656001948a51604090816001600160481b0391828151168552826020820151166020860152015116910152565b01960191019492919094610422565b8781610491848c9e9d9b9c8a9561048b8383610a02565b52610a02565b5001511689528187526001888a20868a51916104ac83610863565b5481811683528181891c168b840152861c168a8201529101909997969899610402565b6020906104df97969495976109cb565b82828a0101520195939294956103b2565b8280fd5b80fd5b503461011157806003193601126101115761023b610513610832565b6001600160481b0361052361084d565b9161052c6108f9565b16845260026020528284206108d3565b503461011157602036600319011261011157602091816001600160481b039182610564610832565b1681526002855220541615159051908152f35b503461011157816003193601126101115780516105b39161059782610895565b60058252640312e302e360dc1b602083015251918291826107e9565b0390f35b50346101115781600319360112610111576105d06108f9565b6001546001600160481b03808260481c169081146101ba576001600160481b600160901b03910160481b1690600160481b600160901b0319161760015551f35b5034610111576020366003190112610111576001600160481b03610632610832565b61063a6108f9565b166001600160481b0319600154161760015551f35b5034610111578160031936011261011157905490516001600160a01b039091168152602090f35b503461011157806003193601126101115761023b610692610832565b61069a61084d565b6106a26108f9565b6001600160481b0382811686526002602052848620805468ffffffffffffffffff60901b1916609084901b68ffffffffffffffffff60901b161790551684528284206108d3565b503461011157602036600319011261011157906107788260609361070b610832565b936107146109cb565b506001600160481b0380951681526002602052209281519361073585610863565b548181168552818160481c16602086015260901c1681840152518092604090816001600160481b0391828151168552826020820151166020860152015116910152565bf35b50346101115781600319360112610111576020906001600160481b03600154169051908152f35b919050346104f057826003193601126104f0576105b392506107c282610895565b60148252735368617264696e675461626c6553746f7261676560601b602083015251918291825b6020808252825181830181905290939260005b82811061081e57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016107fc565b600435906001600160481b038216820361084857565b600080fd5b602435906001600160481b038216820361084857565b6060810190811067ffffffffffffffff82111761087f57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761087f57604052565b90601f8019910116810190811067ffffffffffffffff82111761087f57604052565b90600160481b600160901b0382549160481b1690600160481b600160901b031916179055565b60008054604051631627905560e01b815233600482015260209290918390839060249082906001600160a01b03165afa9182156109be578192610984575b5050156109415750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b9091508281813d83116109b7575b61099c81836108b1565b8101031261011157519081151582036104f457503880610937565b503d610992565b50604051903d90823e3d90fd5b604051906109d882610863565b60006040838281528260208201520152565b67ffffffffffffffff811161087f5760051b60200190565b8051821015610a165760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220fa6c9b76bd4a165f3e38afc03aa94789e4778b843409d20dea35f26ded3bdffc64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 22702,
        "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
        "label": "head",
        "offset": 20,
        "slot": "0",
        "type": "t_uint72"
      },
      {
        "astId": 22704,
        "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
        "label": "tail",
        "offset": 0,
        "slot": "1",
        "type": "t_uint72"
      },
      {
        "astId": 22706,
        "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
        "label": "nodesCount",
        "offset": 9,
        "slot": "1",
        "type": "t_uint72"
      },
      {
        "astId": 22711,
        "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
        "label": "nodes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint72,t_struct(Node)23924_storage)"
      }
    ],
    "types": {
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint72,t_struct(Node)23924_storage)": {
        "encoding": "mapping",
        "key": "t_uint72",
        "label": "mapping(uint72 => struct ShardingTableStructs.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)23924_storage"
      },
      "t_struct(Node)23924_storage": {
        "encoding": "inplace",
        "label": "struct ShardingTableStructs.Node",
        "members": [
          {
            "astId": 23919,
            "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
            "label": "identityId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 23921,
            "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
            "label": "prevIdentityId",
            "offset": 9,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 23923,
            "contract": "contracts/storage/ShardingTableStorage.sol:ShardingTableStorage",
            "label": "nextIdentityId",
            "offset": 18,
            "slot": "0",
            "type": "t_uint72"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      }
    }
  }
}
