{
  "address": "0x2539310a4d02f8C1D440E9B3D3967a6CbBec2aE3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "ask",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "name": "NodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        }
      ],
      "name": "NodeRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getShardingTable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "nodeId",
              "type": "bytes"
            },
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint96",
              "name": "ask",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96"
            }
          ],
          "internalType": "struct ShardingTableStructs.NodeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "startingIdentityId",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "nodesNumber",
          "type": "uint72"
        }
      ],
      "name": "getShardingTable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "nodeId",
              "type": "bytes"
            },
            {
              "internalType": "uint72",
              "name": "identityId",
              "type": "uint72"
            },
            {
              "internalType": "uint96",
              "name": "ask",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96"
            }
          ],
          "internalType": "struct ShardingTableStructs.NodeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profileStorage",
      "outputs": [
        {
          "internalType": "contract ProfileStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "pushBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "pushFront",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "removeNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shardingTableStorage",
      "outputs": [
        {
          "internalType": "contract ShardingTableStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingStorage",
      "outputs": [
        {
          "internalType": "contract StakingStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d66d03dfdb515aa787b302751b2b0660722d362335390b162c2810c12f01019",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0x2539310a4d02f8C1D440E9B3D3967a6CbBec2aE3",
    "transactionIndex": 9,
    "gasUsed": "1706309",
    "logsBloom": "0x00000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000008000002000000000000000000000000000000000000000000000000000800000000000000000040100000000000200000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000008000000000000000000100000",
    "blockHash": "0xc05604f78ed9c3b6ee1f293936a2a6debfdc9fe023cea9746bb382b520d95877",
    "transactionHash": "0x5d66d03dfdb515aa787b302751b2b0660722d362335390b162c2810c12f01019",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 37384500,
        "transactionHash": "0x5d66d03dfdb515aa787b302751b2b0660722d362335390b162c2810c12f01019",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001e4f651b7ba5b000000000000000000000000000000000000000000000000087eee0fce4e4a9c40000000000000000000000000000000000000000000011d3cda8f90f0548855500000000000000000000000000000000000000000000000087d09197c96904140000000000000000000000000000000000000000000011d3cdc7487420c42b05",
        "logIndex": 35,
        "blockHash": "0xc05604f78ed9c3b6ee1f293936a2a6debfdc9fe023cea9746bb382b520d95877"
      }
    ],
    "blockNumber": 37384500,
    "cumulativeGasUsed": "2614289",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"ask\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"name\":\"NodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"}],\"name\":\"NodeRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getShardingTable\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint96\",\"name\":\"ask\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct ShardingTableStructs.NodeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"startingIdentityId\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nodesNumber\",\"type\":\"uint72\"}],\"name\":\"getShardingTable\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint96\",\"name\":\"ask\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct ShardingTableStructs.NodeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileStorage\",\"outputs\":[{\"internalType\":\"contract ProfileStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"pushBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"pushFront\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"removeNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shardingTableStorage\",\"outputs\":[{\"internalType\":\"contract ShardingTableStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStorage\",\"outputs\":[{\"internalType\":\"contract StakingStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShardingTable.sol\":\"ShardingTable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ICustodian} from \\\"./interface/ICustodian.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Guardian is HubDependent {\\n    event TokenTransferred(address indexed custodian, uint256 amount);\\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\\n\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function transferTokens(address payable custodian) external onlyHubOwner {\\n        require(custodian != address(0x0), \\\"Custodian cannot be a zero address\\\");\\n        uint contractSize;\\n        assembly {\\n            contractSize := extcodesize(custodian)\\n        }\\n        require(contractSize > 0, \\\"Cannot transfer tokens to custodian that is not a contract!\\\");\\n\\n        ICustodian custodianContract = ICustodian(custodian);\\n        bool hasOwnersFunction = false;\\n        try custodianContract.getOwners() returns (address[] memory owners) {\\n            hasOwnersFunction = true;\\n            require(owners.length > 0, \\\"Cannot transfer tokens to custodian without owners defined!\\\");\\n        } catch {}\\n        require(hasOwnersFunction, \\\"Cannot transfer tokens to custodian without getOwners function!\\\");\\n\\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\\n        require(transactionResult, \\\"Token transaction execution failed!\\\");\\n\\n        emit TokenTransferred(custodian, balanceTransferred);\\n    }\\n\\n    function withdrawMisplacedOTP() external onlyHubOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\\n    }\\n\\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\\n        require(tokenContractAddress != address(tokenContract), \\\"Cannot use this function with the TRAC contract\\\");\\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\\n\\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\\n        if (balance > 0) {\\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\\n            require(transactionResult, \\\"Token transaction execution failed\\\");\\n        }\\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcef9797032f7c9aae94d003e52a83ae8e978b1ca5b3fbca261e552252d3de8\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/ShardingTable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"./structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"./constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTable is Named, Versioned, ContractStatus, Initializable {\\n    event NodeAdded(uint72 indexed identityId, bytes nodeId, uint96 ask, uint96 stake);\\n    event NodeRemoved(uint72 indexed identityId, bytes nodeId);\\n\\n    string private constant _NAME = \\\"ShardingTable\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    ProfileStorage public profileStorage;\\n    ShardingTableStorage public shardingTableStorage;\\n    StakingStorage public stakingStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        return _getShardingTable(startingIdentityId, nodesNumber);\\n    }\\n\\n    function getShardingTable() external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStorage sts = shardingTableStorage;\\n        return _getShardingTable(sts.head(), sts.nodesCount());\\n    }\\n\\n    function pushBack(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.tail() != NULL) sts.link(sts.tail(), identityId);\\n\\n        sts.setTail(identityId);\\n\\n        if (sts.head() == NULL) sts.setHead(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function pushFront(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.head() != NULL) sts.link(identityId, sts.head());\\n\\n        shardingTableStorage.setHead(identityId);\\n\\n        if (sts.tail() == NULL) sts.setTail(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function removeNode(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        ShardingTableStructs.Node memory nodeToRemove = sts.getNode(identityId);\\n\\n        uint72 head = sts.head();\\n        uint72 tail = sts.tail();\\n\\n        if ((head == identityId) && (tail == identityId)) {\\n            sts.setHead(NULL);\\n            sts.setTail(NULL);\\n        } else if (tail == identityId) {\\n            sts.setTail(nodeToRemove.prevIdentityId);\\n            sts.setNextIdentityId(tail, NULL);\\n        } else if (head == identityId) {\\n            sts.setHead(nodeToRemove.nextIdentityId);\\n            sts.setPrevIdentityId(head, NULL);\\n        } else {\\n            sts.link(nodeToRemove.prevIdentityId, nodeToRemove.nextIdentityId);\\n        }\\n\\n        sts.deleteNodeObject(identityId);\\n        sts.decrementNodesCount();\\n\\n        emit NodeRemoved(identityId, ps.getNodeId(identityId));\\n    }\\n\\n    function _getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) internal view virtual returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStructs.NodeInfo[] memory nodesPage;\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        if ((sts.nodesCount() == 0) || (nodesNumber == 0)) {\\n            return nodesPage;\\n        }\\n\\n        ShardingTableStructs.Node memory startingNode = sts.getNode(startingIdentityId);\\n\\n        require((startingIdentityId == NULL) || (startingNode.identityId != NULL), \\\"Wrong starting Identity ID\\\");\\n\\n        nodesPage = new ShardingTableStructs.NodeInfo[](nodesNumber);\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        nodesPage[0] = ShardingTableStructs.NodeInfo({\\n            nodeId: ps.getNodeId(startingIdentityId),\\n            identityId: startingIdentityId,\\n            ask: ps.getAsk(startingNode.identityId),\\n            stake: ss.totalStakes(startingNode.identityId)\\n        });\\n\\n        uint72 nextIdentityId = startingIdentityId;\\n        uint72 i = 1;\\n        while ((i < nodesNumber) && (nextIdentityId != NULL)) {\\n            nextIdentityId = sts.getNode(nextIdentityId).nextIdentityId;\\n\\n            nodesPage[i] = ShardingTableStructs.NodeInfo({\\n                nodeId: ps.getNodeId(nextIdentityId),\\n                identityId: nextIdentityId,\\n                ask: ps.getAsk(nextIdentityId),\\n                stake: ss.totalStakes(nextIdentityId)\\n            });\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n}\\n\",\"keccak256\":\"0xdc5fcd9c08b1794fc7c251733a15ae9af7f8744ec80b1a70924f6219ca3e62cd\",\"license\":\"MIT\"},\"contracts/Shares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract Shares is HubDependent, ERC20, ERC20Burnable {\\n    constructor(\\n        address hubAddress,\\n        string memory name,\\n        string memory symbol\\n    )\\n        HubDependent(hubAddress)\\n        ERC20(name, symbol) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function mint(address to, uint256 amount) external onlyContracts {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5ba555c0e9109f8e9a17a98a7a30643c9849059ea9b80693c9e2d460d679666d\",\"license\":\"MIT\"},\"contracts/abstract/ContractStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./HubDependent.sol\\\";\\n\\nabstract contract ContractStatus is HubDependent {\\n    bool public status;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function setStatus(bool _status) external onlyHubOwner {\\n        status = _status;\\n    }\\n}\\n\",\"keccak256\":\"0x1a770a3dea223c33b0d6d7e522186af2b41e6d1012209f329cd4b3cf4180ef61\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/constants/ShardingTableConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint72 constant NULL = 0;\\n\",\"keccak256\":\"0xe80366170c622c9277da5d2bfbe7883b4b2e9d77c8f9407a3ce964c99ab24aa7\",\"license\":\"MIT\"},\"contracts/interface/ICustodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ICustodian {\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf9c1575729c595ec1c4c6cec71e0890774efda80299b476b3c243b4fd168c69d\",\"license\":\"MIT\"},\"contracts/interface/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Initializable {\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0xac823de4540de0fac2d1ec548a5083404ab8abd858c34a69f4f8947b24789507\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Shares} from \\\"../Shares.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ProfileStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ProfileStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct ProfileDefinition {\\n        bytes nodeId;\\n        uint96 ask;\\n        uint96 accumulatedOperatorFee;\\n        uint96 accumulatedOperatorFeeWithdrawalAmount;\\n        uint256 operatorFeeWithdrawalTimestamp;\\n        address sharesContractAddress;\\n        mapping(uint8 => bytes32) nodeAddresses;\\n    }\\n\\n    // nodeId => isRegistered?\\n    mapping(bytes => bool) public nodeIdsList;\\n    // identityId => Profile\\n    mapping(uint72 => ProfileDefinition) internal profiles;\\n\\n    // shares token name => isTaken?\\n    mapping(string => bool) public sharesNames;\\n    // shares token ID => isTaken?\\n    mapping(string => bool) public sharesSymbols;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createProfile(\\n        uint72 identityId,\\n        bytes calldata nodeId,\\n        address sharesContractAddress\\n    ) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        profile.nodeId = nodeId;\\n        profile.sharesContractAddress = sharesContractAddress;\\n\\n        nodeIdsList[nodeId] = true;\\n\\n        Shares sharesContract = Shares(sharesContractAddress);\\n        sharesNames[sharesContract.name()] = true;\\n        sharesSymbols[sharesContract.symbol()] = true;\\n    }\\n\\n    function getProfile(\\n        uint72 identityId\\n    ) external view returns (bytes memory nodeId, uint96[2] memory profileSettings, address sharesContractAddress) {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        return (profile.nodeId, [profile.ask, profile.accumulatedOperatorFee], profile.sharesContractAddress);\\n    }\\n\\n    function deleteProfile(uint72 identityId) external onlyContracts {\\n        nodeIdsList[profiles[identityId].nodeId] = false;\\n        delete profiles[identityId];\\n    }\\n\\n    function getNodeId(uint72 identityId) external view returns (bytes memory) {\\n        return profiles[identityId].nodeId;\\n    }\\n\\n    function setNodeId(uint72 identityId, bytes calldata nodeId) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n\\n        nodeIdsList[profile.nodeId] = false;\\n        profile.nodeId = nodeId;\\n        nodeIdsList[nodeId] = true;\\n    }\\n\\n    function getAsk(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].ask;\\n    }\\n\\n    function setAsk(uint72 identityId, uint96 ask) external onlyContracts {\\n        profiles[identityId].ask = ask;\\n    }\\n\\n    function getAccumulatedOperatorFee(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFee;\\n    }\\n\\n    function setAccumulatedOperatorFee(uint72 identityId, uint96 newOperatorFeeAmount) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFee = newOperatorFeeAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalAmount(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalAmount(\\n        uint72 identityId,\\n        uint96 accumulatedOperatorFeeWithdrawalAmount\\n    ) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFeeWithdrawalAmount = accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalTimestamp(uint72 identityId) external view returns (uint256) {\\n        return profiles[identityId].operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalTimestamp(\\n        uint72 identityId,\\n        uint256 operatorFeeWithdrawalTimestamp\\n    ) external onlyContracts {\\n        profiles[identityId].operatorFeeWithdrawalTimestamp = operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function getSharesContractAddress(uint72 identityId) external view returns (address) {\\n        return profiles[identityId].sharesContractAddress;\\n    }\\n\\n    function setSharesContractAddress(uint72 identityId, address sharesContractAddress) external onlyContracts {\\n        profiles[identityId].sharesContractAddress = sharesContractAddress;\\n    }\\n\\n    function getNodeAddress(uint72 identityId, uint8 hashFunctionId) external view returns (bytes32) {\\n        return profiles[identityId].nodeAddresses[hashFunctionId];\\n    }\\n\\n    function setNodeAddress(uint72 identityId, uint8 hashFunctionId, bytes32 nodeAddress) external onlyContracts {\\n        profiles[identityId].nodeAddresses[hashFunctionId] = nodeAddress;\\n    }\\n\\n    function profileExists(uint72 identityId) external view returns (bool) {\\n        return keccak256(profiles[identityId].nodeId) != keccak256(bytes(\\\"\\\"));\\n    }\\n\\n    function transferAccumulatedOperatorFee(address receiver, uint96 amount) external onlyContracts {\\n        tokenContract.transfer(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x658280fecb28870447d89924e8114b8847a3107b674ca5c27d402499b1921332\",\"license\":\"MIT\"},\"contracts/storage/ShardingTableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"../structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"../constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTableStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"ShardingTableStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 public head;\\n    uint72 public tail;\\n    uint72 public nodesCount;\\n\\n    // identityId => Node\\n    mapping(uint72 => ShardingTableStructs.Node) internal nodes;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        head = NULL;\\n        tail = NULL;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function incrementNodesCount() external onlyContracts {\\n        nodesCount++;\\n    }\\n\\n    function decrementNodesCount() external onlyContracts {\\n        nodesCount--;\\n    }\\n\\n    function setHead(uint72 identityId) external onlyContracts {\\n        head = identityId;\\n    }\\n\\n    function setTail(uint72 identityId) external onlyContracts {\\n        tail = identityId;\\n    }\\n\\n    function createNodeObject(uint72 identityId, uint72 prevIdentityId, uint72 nextIdentityId) external onlyContracts {\\n        nodes[identityId] = ShardingTableStructs.Node({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId\\n        });\\n    }\\n\\n    function getNode(uint72 identityId) external view returns (ShardingTableStructs.Node memory) {\\n        return nodes[identityId];\\n    }\\n\\n    function deleteNodeObject(uint72 identityId) external onlyContracts {\\n        delete nodes[identityId];\\n    }\\n\\n    function nodeExists(uint72 identityId) external view returns (bool) {\\n        return nodes[identityId].identityId != 0;\\n    }\\n\\n    function setPrevIdentityId(uint72 identityId, uint72 newPrevIdentityId) external onlyContracts {\\n        nodes[identityId].prevIdentityId = newPrevIdentityId;\\n    }\\n\\n    function setNextIdentityId(uint72 identityId, uint72 newNextIdentityId) external onlyContracts {\\n        nodes[identityId].nextIdentityId = newNextIdentityId;\\n    }\\n\\n    function getMultipleNodes(\\n        uint72 firstIdentityId,\\n        uint16 nodesNumber\\n    ) external view returns (ShardingTableStructs.Node[] memory) {\\n        ShardingTableStructs.Node[] memory nodesPage = new ShardingTableStructs.Node[](nodesNumber);\\n\\n        ShardingTableStructs.Node memory currentNode = nodes[firstIdentityId];\\n        for (uint256 i; i < nodesNumber; ) {\\n            nodesPage[i] = currentNode;\\n            currentNode = nodes[currentNode.nextIdentityId];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n\\n    function link(uint72 leftNodeIdentityId, uint72 rightNodeIdentityId) external onlyContracts {\\n        nodes[leftNodeIdentityId].nextIdentityId = rightNodeIdentityId;\\n        nodes[rightNodeIdentityId].prevIdentityId = leftNodeIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xac72b874995c1c6d181539ef17b90b5165f242076235e4c05282f2bd0311f3cf\",\"license\":\"MIT\"},\"contracts/storage/StakingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract StakingStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"StakingStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct WithdrawalRequest {\\n        uint96 amount;\\n        uint256 timestamp;\\n    }\\n\\n    // identityId => totalStake\\n    mapping(uint72 => uint96) public totalStakes;\\n\\n    // identityId => operatorFee\\n    mapping(uint72 => uint96) public operatorFees;\\n\\n    // identityId => withdrawalRequest\\n    mapping(uint72 => mapping(address => WithdrawalRequest)) public withdrawalRequests;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setTotalStake(uint72 identityId, uint96 newTotalStake) external onlyContracts {\\n        totalStakes[identityId] = newTotalStake;\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint96 operatorFee) external onlyContracts {\\n        operatorFees[identityId] = operatorFee;\\n    }\\n\\n    function createWithdrawalRequest(\\n        uint72 identityId,\\n        address staker,\\n        uint96 amount,\\n        uint256 timestamp\\n    ) external onlyContracts {\\n        withdrawalRequests[identityId][staker] = WithdrawalRequest({amount: amount, timestamp: timestamp});\\n    }\\n\\n    function deleteWithdrawalRequest(uint72 identityId, address staker) external onlyContracts {\\n        delete withdrawalRequests[identityId][staker];\\n    }\\n\\n    function getWithdrawalRequestAmount(uint72 identityId, address staker) external view returns (uint96) {\\n        return withdrawalRequests[identityId][staker].amount;\\n    }\\n\\n    function getWithdrawalRequestTimestamp(uint72 identityId, address staker) external view returns (uint256) {\\n        return withdrawalRequests[identityId][staker].timestamp;\\n    }\\n\\n    function withdrawalRequestExists(uint72 identityId, address staker) external view returns (bool) {\\n        return withdrawalRequests[identityId][staker].amount != 0;\\n    }\\n\\n    function transferStake(address receiver, uint96 stakeAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, stakeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x1901534fb150957d6433fa06b6a59a2c2d1594fc9b9a4e9901f024fea947a4db\",\"license\":\"MIT\"},\"contracts/structs/ShardingTableStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ShardingTableStructs {\\n    struct NodeInfo {\\n        bytes nodeId;\\n        uint72 identityId;\\n        uint96 ask;\\n        uint96 stake;\\n    }\\n\\n    struct Node {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xf6f18e4e0643f4c6fa96480189e89d8c7e6fb8de7a4a3f36da24ab3b0ea31d76\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100bf57601f611e4538819003918201601f19168301916001600160401b038311848410176100c4578084926020946040528339810103126100bf57516001600160a01b038116908190036100bf57801561007a57600080546001600160a01b031916919091179055604051611d6a90816100db8239f35b60405162461bcd60e51b815260206004820152601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146112f257508163200d2ed2146112cd578163289220c6146111ca578163365a86fc146111a2578163415942b114610dce57816354fd4d5014610d895781635c40f6f414610d485781638129fc1c14610b9e578163823e2bc714610b7557816392b7c87d146106d1578163af9c1ec61461016657508063b518a00e1461013e578063e5de01f1146100ea5763f42cb038146100bf57600080fd5b346100e657816003193601126100e65760015490516001600160a01b039091168152602090f35b5080fd5b50903461013b578160031936011261013b5750610105611425565b90602435916001600160481b03831683036101365761013292610127916116b0565b905191829182611387565b0390f35b600080fd5b80fd5b50346100e657816003193601126100e65760035490516001600160a01b039091168152602090f35b9050346103d757602090816003193601126103e557610183611425565b9161018c611c8f565b600154845163c04d7dcf60e01b81526001600160481b03948516818501819052946001600160a01b03928316948893919260249290868185818b5afa80156104ea576101df9187916106a4575b5061150a565b600254895163162929e960e01b81528381018a90529116936060828581885afa9182156104ea578692610674575b508951638f7dcfa360e01b81529187838581895afa92831561066a57879361062f575b508a51624f632160e61b815290888286818a5afa93841561062557899289956105e9575b508c8185168d1480806105de575b1561042f5750505050505050823b156103e5578751631bcc8f9560e31b81528181018590528481848183885af19081156103fd57859161041b575b5050823b156103e557875163406def5b60e01b81528181018590528481848183885af19081156103fd578591610407575b50505b823b156103e5578751632e9893a160e21b81528181018890528481848183885af19081156103fd5785916103e9575b5050823b156103e557838093828a518096819363d9b6546360e01b83525af180156103db57879385916103be575b5050875195869384926320e085cd60e11b84528301525afa9081156103b4577fef12f3576561c48ba6945e9b712ac4715d1ac62879143672fcd6e3c63a19619c928692610390575b5061038a8551928284938452830190611362565b0390a251f35b6103ad9192503d8088833e6103a5818361149d565b81019061154e565b9038610376565b84513d87823e3d90fd5b6103ca9192945061143b565b6103d7578591833861032e565b8280fd5b88513d86823e3d90fd5b8380fd5b6103f29061143b565b6103e5578338610300565b89513d87823e3d90fd5b6104109061143b565b6103e55783386102ce565b6104249061143b565b6103e557833861029d565b8686168e036104f857505050015116843b156104f45789519063406def5b60e01b8252838201528581858183895af19081156104ea5786916104d6575b5050833b156104d257885163d0f4c7cf60e01b81526001600160481b03909116828201908152600060208201528590829081906040015b038183885af19081156103fd5785916104be575b50506102d1565b6104c79061143b565b6103e55783386104b7565b8480fd5b6104df9061143b565b6104d257843861046c565b8a513d88823e3d90fd5b8580fd5b91955092501561058257015116843b156104f457895190631bcc8f9560e31b8252838201528581858183895af19081156104ea57869161056e575b5050833b156104d25788516335ab940760e11b81526001600160481b03909116828201908152600060208201528590829081906040016104a3565b6105779061143b565b6104d2578438610533565b888101519101518216925016843b156104f457895163283350a560e01b81526001600160481b03918216848201908152919092166020820152859082908190604001038183885af19081156103fd5785916104be5750506102d1565b508d86881614610262565b8381949296503d831161061e575b610601818361149d565b8101031261061a5761061389926114de565b9338610254565b8780fd5b503d6105f7565b8c513d8a823e3d90fd5b9092508781813d8311610663575b610647818361149d565b8101031261065f57610658906114de565b9138610230565b8680fd5b503d61063d565b8b513d89823e3d90fd5b61069691925060603d811161069d575b61068e818361149d565b810190611608565b903861020d565b503d610684565b6106c49150883d8a116106ca575b6106bc818361149d565b8101906114f2565b386101d9565b503d6106b2565b9050346103d757602090816003193601126103e5576106ee611425565b916106f7611c8f565b600154845163c04d7dcf60e01b81526001600160481b03858116858301819052956001600160a01b039460249486169390928a929184818881895afa8015610a3057610749918591610b5e575061150a565b866002541691823b156103e5578a51634e8d2def60e11b81526001600160481b038216818b019081526000602082018190526040820152859082908190606001038183885af1908115610afe578591610b4a575b50508a51638f7dcfa360e01b808252919086818c81885afa8015610b405784918791610b08575b5016610a4e575b50508660025416803b156103e557838a888b838f519586948593631bcc8f9560e31b85528401525af1908115610a30578491610a3a575b50508951624f632160e61b815284818a81865afa908115610a305784916109fb575b5016156109a7575b803b156100e657818091888b518094819363279d74f760e11b83525af1801561099d57610989575b505086516320e085cd60e11b815285810187905288818581865afa9283156109615784918a9461096b575b5082908951928380926339fb67dd60e01b82528b8b8301525afa9384156109615787918a95610940575b5082939495600354169689519788938492639d2b48ad60e01b84528301525afa8015610936577f05eef2d4c7b6f7d090582906c8987ff8d9afdead95f51156c0cda2e82707afc79461038a928992610909575b50508651938493846115d9565b6109289250803d1061092f575b610920818361149d565b8101906115ba565b38806108fc565b503d610916565b86513d89823e3d90fd5b8394955061095a90843d861161092f57610920818361149d565b94936108a9565b88513d8b823e3d90fd5b83919450610982903d808d833e6103a5818361149d565b939061087f565b6109929061143b565b61061a578738610854565b89513d84823e3d90fd5b803b156100e657885163406def5b60e01b81528781018990528281878183865af19081156109f15783916109dd575b505061082c565b6109e69061143b565b6100e65781386109d6565b8a513d85823e3d90fd5b90508481813d8311610a29575b610a12818361149d565b810103126103e557610a23906114de565b38610824565b503d610a08565b8b513d86823e3d90fd5b610a439061143b565b6103d7578238610802565b8b5191825285828b81875afa918215610afe578592610ac7575b50833b156104d2578b5163283350a560e01b81526001600160481b03918216818c01908152919092166020820152849082908190604001038183875af1908115610a30578491156107cb57610abc9061143b565b6103d75782386107cb565b9091508581813d8311610af7575b610adf818361149d565b810103126104d257610af0906114de565b9038610a68565b503d610ad5565b8c513d87823e3d90fd5b809250888092503d8311610b39575b610b21818361149d565b810103126104f457610b3384916114de565b386107c4565b503d610b17565b8d513d88823e3d90fd5b610b539061143b565b6103e557833861079d565b6106c49150863d88116106ca576106bc818361149d565b5050346100e657816003193601126100e65760025490516001600160a01b039091168152602090f35b9050346103d757826003193601126103d757610bb8611bed565b82548251630110ceef60e21b8082526020828501819052600e60248401526d50726f66696c6553746f7261676560901b604484015291936001600160a01b0393841691908386606481865afa958615610d3e578896610d1f575b50846001600160601b0360a01b9616866001541617600155865191808352848284015260146024840152735368617264696e675461626c6553746f7261676560601b60448401528483606481875afa9081156109615785948760649387968d91610d02575b5016896002541617600255895195869485938452830152600e60248301526d5374616b696e6753746f7261676560901b60448301525afa918215610cf8578692610ccb575b50501690600354161760035551f35b610cea9250803d10610cf1575b610ce2818361149d565b8101906114bf565b3880610cbc565b503d610cd8565b85513d88823e3d90fd5b610d199150873d8911610cf157610ce2818361149d565b38610c77565b610d37919650843d8611610cf157610ce2818361149d565b9438610c12565b87513d8a823e3d90fd5b9050346103d75760203660031901126103d757358015158091036103d757610d6e611bed565b825460ff60a01b191660a09190911b60ff60a01b1617825551f35b5050346100e657816003193601126100e657805161013291610daa82611481565b6005825264312e302e3160d81b602083015251918291602083526020830190611362565b9050346103d757602090816003193601126103e557610deb611425565b91610df4611c8f565b600154845163c04d7dcf60e01b81526001600160481b03858116858301819052956001600160a01b039460249486169390929083818781885afa801561119857610e44918c91611181575061150a565b856002541691823b1561117d578951634e8d2def60e11b81526001600160481b03821689820190815260006020820181905260408201528c9082908190606001038183885af180156111735761115c575b508951624f632160e61b8082528c9493929186818c81885afa8015610b405784918791611124575b5016611076575b5050813b156103d757895163406def5b60e01b81528881018a90528381888183875af1908115610a30578491611062575b50508951638f7dcfa360e01b815284818a81865afa908115610a3057849161102d575b501615610ff857803b156100e657818091888b518094819363279d74f760e11b83525af1801561099d5761098957505086516320e085cd60e11b815285810187905288818581865afa9283156109615784918a9461096b575082908951928380926339fb67dd60e01b82528b8b8301525afa9384156109615787918a95610940575082939495600354169689519788938492639d2b48ad60e01b84528301525afa8015610936577f05eef2d4c7b6f7d090582906c8987ff8d9afdead95f51156c0cda2e82707afc79461038a9289926109095750508651938493846115d9565b803b156100e6578851631bcc8f9560e31b81528781018990528281878183865af19081156109f15783916109dd57505061082c565b90508481813d831161105b575b611044818361149d565b810103126103e557611055906114de565b38610f18565b503d61103a565b61106b9061143b565b6103d7578238610ef5565b8b5190815285818b81875afa908115610afe5785916110ef575b50833b156104d2578b5163283350a560e01b81526001600160481b03918216818c01908152919092166020820152849082908190604001038183875af1908115610a3057849115610ec4576110e49061143b565b6103d7578238610ec4565b90508581813d831161111d575b611106818361149d565b810103126104d257611117906114de565b38611090565b503d6110fc565b809250888092503d8311611155575b61113d818361149d565b810103126104f45761114f84916114de565b38610ebd565b503d611133565b61116a909b9193929b61143b565b99909138610e95565b8b513d8e823e3d90fd5b8a80fd5b6106c49150853d87116106ca576106bc818361149d565b8a513d8d823e3d90fd5b5050346100e657816003193601126100e657905490516001600160a01b039091168152602090f35b9050346103d757826003193601126103d7576002548251638f7dcfa360e01b815293602092916001600160a01b031683868481845afa9586156112c357829661128b575b50839085519384809263f1a3c5b360e01b82525afa92831561127f57819361123f575b6101328561012786896116b0565b9091809350813d8311611278575b611257818361149d565b8101031261013b575061013292611270610127926114de565b918194611231565b503d61124d565b508351903d90823e3d90fd5b9095508381813d83116112bc575b6112a3818361149d565b810103126100e6576112b584916114de565b959061120e565b503d611299565b85513d84823e3d90fd5b5050346100e657816003193601126100e65760ff6020925460a01c1690519015158152f35b849084346103d757826003193601126103d757610132925061131382611481565b600d82526c5368617264696e675461626c6560981b602083015251918291602083526020830190611362565b60005b8381106113525750506000910152565b8181015183820152602001611342565b9060209161137b8151809281855285808601910161133f565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106113bc575050505050505090565b909192939495968580600192603f198582030187528a51906113e682516080808452830190611362565b916001600160481b038482015116848301526001600160601b0380898301511689840152606080920151169101529901940194019295949391906113ab565b600435906001600160481b038216820361013657565b67ffffffffffffffff811161144f57604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761144f57604052565b6040810190811067ffffffffffffffff82111761144f57604052565b90601f8019910116810190811067ffffffffffffffff82111761144f57604052565b9081602091031261013657516001600160a01b03811681036101365790565b51906001600160481b038216820361013657565b90816020910312610136575180151581036101365790565b1561151157565b60405162461bcd60e51b8152602060048201526015602482015274141c9bd99a5b1948191bd95cdb89dd08195e1a5cdd605a1b6044820152606490fd5b60208183031261013657805167ffffffffffffffff9182821161013657019082601f8301121561013657815190811161144f5760405192611599601f8301601f19166020018561149d565b81845260208284010111610136576115b7916020808501910161133f565b90565b9081602091031261013657516001600160601b03811681036101365790565b916115f1604092959495606085526060850190611362565b946001600160601b03809216602085015216910152565b9081606091031261013657604051906060820182811067ffffffffffffffff82111761144f57611659916040918252611640816114de565b845261164e602082016114de565b6020850152016114de565b604082015290565b67ffffffffffffffff811161144f5760051b60200190565b8051156116865760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156116865760209160051b010190565b9060018060a01b036002541660405163f1a3c5b360e01b8152602081600481855afa8015611a0257600090611bad575b6001600160481b03915016158015611b9c575b611b945760405163162929e960e01b81526001600160481b038416600482015290606082602481845afa918215611a0257600092611b73575b506001600160481b038416158015611b60575b15611b1b576117566001600160481b038416611661565b94611764604051968761149d565b6001600160481b038416808752601f199061177e90611661565b0160005b818110611ae85750506001546003546040516320e085cd60e11b81526001600160481b03881660048201526001600160a01b039283169792909116946000826024818b5afa918215611a0257600092611acd575b506001600160481b0381511690604051916339fb67dd60e01b835260048301526020826024818c5afa918215611a0257600092611aa3575b5051604051639d2b48ad60e01b81526001600160481b039091166004820152906020826024818a5afa908115611a02576001600160601b0392600092611a80575b5082906040519461185f86611465565b85526001600160481b038616602086015216604084015216606082015261188588611679565b5261188f87611679565b50906001915b6001600160481b0386166001600160481b0384161080611a6e575b15611a65576001600160481b036040519163162929e960e01b8352166004820152606081602481875afa908115611a02576001600160481b0391604091600091611a46575b50015116916040516320e085cd60e11b81528360048201526000816024818b5afa908115611a0257600091611a2d575b506040516339fb67dd60e01b8152600481018590526020816024818c5afa908115611a0257600091611a0e575b50604051639d2b48ad60e01b815260048101869052926020846024818b5afa928315611a02576001600160601b036001600160481b03959460019487966000926119df575b508290604051946119a786611465565b85528a60208601521660408401521660608201526119c78483168d61169c565b526119d48382168c61169c565b500116929050611895565b839192506119fb9060203d60201161092f57610920818361149d565b9190611997565b6040513d6000823e3d90fd5b611a27915060203d60201161092f57610920818361149d565b38611952565b611a40913d8091833e6103a5818361149d565b38611925565b611a5f915060603d60601161069d5761068e818361149d565b386118f5565b50945050505050565b506001600160481b03811615156118b0565b83919250611a9c9060203d60201161092f57610920818361149d565b919061184f565b6001600160481b03919250611ac69060203d60201161092f57610920818361149d565b919061180e565b611ae191923d8091833e6103a5818361149d565b90386117d6565b602090604051611af781611465565b60608152600083820152600060408201526000606082015282828b01015201611782565b60405162461bcd60e51b815260206004820152601a60248201527f57726f6e67207374617274696e67204964656e746974792049440000000000006044820152606490fd5b506001600160481b03825116151561173f565b611b8d91925060603d60601161069d5761068e818361149d565b903861172c565b505050606090565b506001600160481b038216156116f3565b6020823d602011611be5575b81611bc66020938361149d565b8101031261013b5750611be06001600160481b03916114de565b6116e0565b3d9150611bb9565b600054604051638da5cb5b60e01b81526001600160a01b03916020908290600490829086165afa908115611a0257600091611c71575b50163303611c2d57565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b611c89915060203d8111610cf157610ce2818361149d565b38611c23565b600054604051631627905560e01b815233600482015290602090829060249082906001600160a01b03165afa908115611a0257600091611d16575b5015611cd257565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b611d2e915060203d81116106ca576106bc818361149d565b38611cca56fea2646970667358221220626a10c003d5964d92e82968e3686794df3414c27d8e59ddb76014144fee698a64736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146112f257508163200d2ed2146112cd578163289220c6146111ca578163365a86fc146111a2578163415942b114610dce57816354fd4d5014610d895781635c40f6f414610d485781638129fc1c14610b9e578163823e2bc714610b7557816392b7c87d146106d1578163af9c1ec61461016657508063b518a00e1461013e578063e5de01f1146100ea5763f42cb038146100bf57600080fd5b346100e657816003193601126100e65760015490516001600160a01b039091168152602090f35b5080fd5b50903461013b578160031936011261013b5750610105611425565b90602435916001600160481b03831683036101365761013292610127916116b0565b905191829182611387565b0390f35b600080fd5b80fd5b50346100e657816003193601126100e65760035490516001600160a01b039091168152602090f35b9050346103d757602090816003193601126103e557610183611425565b9161018c611c8f565b600154845163c04d7dcf60e01b81526001600160481b03948516818501819052946001600160a01b03928316948893919260249290868185818b5afa80156104ea576101df9187916106a4575b5061150a565b600254895163162929e960e01b81528381018a90529116936060828581885afa9182156104ea578692610674575b508951638f7dcfa360e01b81529187838581895afa92831561066a57879361062f575b508a51624f632160e61b815290888286818a5afa93841561062557899289956105e9575b508c8185168d1480806105de575b1561042f5750505050505050823b156103e5578751631bcc8f9560e31b81528181018590528481848183885af19081156103fd57859161041b575b5050823b156103e557875163406def5b60e01b81528181018590528481848183885af19081156103fd578591610407575b50505b823b156103e5578751632e9893a160e21b81528181018890528481848183885af19081156103fd5785916103e9575b5050823b156103e557838093828a518096819363d9b6546360e01b83525af180156103db57879385916103be575b5050875195869384926320e085cd60e11b84528301525afa9081156103b4577fef12f3576561c48ba6945e9b712ac4715d1ac62879143672fcd6e3c63a19619c928692610390575b5061038a8551928284938452830190611362565b0390a251f35b6103ad9192503d8088833e6103a5818361149d565b81019061154e565b9038610376565b84513d87823e3d90fd5b6103ca9192945061143b565b6103d7578591833861032e565b8280fd5b88513d86823e3d90fd5b8380fd5b6103f29061143b565b6103e5578338610300565b89513d87823e3d90fd5b6104109061143b565b6103e55783386102ce565b6104249061143b565b6103e557833861029d565b8686168e036104f857505050015116843b156104f45789519063406def5b60e01b8252838201528581858183895af19081156104ea5786916104d6575b5050833b156104d257885163d0f4c7cf60e01b81526001600160481b03909116828201908152600060208201528590829081906040015b038183885af19081156103fd5785916104be575b50506102d1565b6104c79061143b565b6103e55783386104b7565b8480fd5b6104df9061143b565b6104d257843861046c565b8a513d88823e3d90fd5b8580fd5b91955092501561058257015116843b156104f457895190631bcc8f9560e31b8252838201528581858183895af19081156104ea57869161056e575b5050833b156104d25788516335ab940760e11b81526001600160481b03909116828201908152600060208201528590829081906040016104a3565b6105779061143b565b6104d2578438610533565b888101519101518216925016843b156104f457895163283350a560e01b81526001600160481b03918216848201908152919092166020820152859082908190604001038183885af19081156103fd5785916104be5750506102d1565b508d86881614610262565b8381949296503d831161061e575b610601818361149d565b8101031261061a5761061389926114de565b9338610254565b8780fd5b503d6105f7565b8c513d8a823e3d90fd5b9092508781813d8311610663575b610647818361149d565b8101031261065f57610658906114de565b9138610230565b8680fd5b503d61063d565b8b513d89823e3d90fd5b61069691925060603d811161069d575b61068e818361149d565b810190611608565b903861020d565b503d610684565b6106c49150883d8a116106ca575b6106bc818361149d565b8101906114f2565b386101d9565b503d6106b2565b9050346103d757602090816003193601126103e5576106ee611425565b916106f7611c8f565b600154845163c04d7dcf60e01b81526001600160481b03858116858301819052956001600160a01b039460249486169390928a929184818881895afa8015610a3057610749918591610b5e575061150a565b866002541691823b156103e5578a51634e8d2def60e11b81526001600160481b038216818b019081526000602082018190526040820152859082908190606001038183885af1908115610afe578591610b4a575b50508a51638f7dcfa360e01b808252919086818c81885afa8015610b405784918791610b08575b5016610a4e575b50508660025416803b156103e557838a888b838f519586948593631bcc8f9560e31b85528401525af1908115610a30578491610a3a575b50508951624f632160e61b815284818a81865afa908115610a305784916109fb575b5016156109a7575b803b156100e657818091888b518094819363279d74f760e11b83525af1801561099d57610989575b505086516320e085cd60e11b815285810187905288818581865afa9283156109615784918a9461096b575b5082908951928380926339fb67dd60e01b82528b8b8301525afa9384156109615787918a95610940575b5082939495600354169689519788938492639d2b48ad60e01b84528301525afa8015610936577f05eef2d4c7b6f7d090582906c8987ff8d9afdead95f51156c0cda2e82707afc79461038a928992610909575b50508651938493846115d9565b6109289250803d1061092f575b610920818361149d565b8101906115ba565b38806108fc565b503d610916565b86513d89823e3d90fd5b8394955061095a90843d861161092f57610920818361149d565b94936108a9565b88513d8b823e3d90fd5b83919450610982903d808d833e6103a5818361149d565b939061087f565b6109929061143b565b61061a578738610854565b89513d84823e3d90fd5b803b156100e657885163406def5b60e01b81528781018990528281878183865af19081156109f15783916109dd575b505061082c565b6109e69061143b565b6100e65781386109d6565b8a513d85823e3d90fd5b90508481813d8311610a29575b610a12818361149d565b810103126103e557610a23906114de565b38610824565b503d610a08565b8b513d86823e3d90fd5b610a439061143b565b6103d7578238610802565b8b5191825285828b81875afa918215610afe578592610ac7575b50833b156104d2578b5163283350a560e01b81526001600160481b03918216818c01908152919092166020820152849082908190604001038183875af1908115610a30578491156107cb57610abc9061143b565b6103d75782386107cb565b9091508581813d8311610af7575b610adf818361149d565b810103126104d257610af0906114de565b9038610a68565b503d610ad5565b8c513d87823e3d90fd5b809250888092503d8311610b39575b610b21818361149d565b810103126104f457610b3384916114de565b386107c4565b503d610b17565b8d513d88823e3d90fd5b610b539061143b565b6103e557833861079d565b6106c49150863d88116106ca576106bc818361149d565b5050346100e657816003193601126100e65760025490516001600160a01b039091168152602090f35b9050346103d757826003193601126103d757610bb8611bed565b82548251630110ceef60e21b8082526020828501819052600e60248401526d50726f66696c6553746f7261676560901b604484015291936001600160a01b0393841691908386606481865afa958615610d3e578896610d1f575b50846001600160601b0360a01b9616866001541617600155865191808352848284015260146024840152735368617264696e675461626c6553746f7261676560601b60448401528483606481875afa9081156109615785948760649387968d91610d02575b5016896002541617600255895195869485938452830152600e60248301526d5374616b696e6753746f7261676560901b60448301525afa918215610cf8578692610ccb575b50501690600354161760035551f35b610cea9250803d10610cf1575b610ce2818361149d565b8101906114bf565b3880610cbc565b503d610cd8565b85513d88823e3d90fd5b610d199150873d8911610cf157610ce2818361149d565b38610c77565b610d37919650843d8611610cf157610ce2818361149d565b9438610c12565b87513d8a823e3d90fd5b9050346103d75760203660031901126103d757358015158091036103d757610d6e611bed565b825460ff60a01b191660a09190911b60ff60a01b1617825551f35b5050346100e657816003193601126100e657805161013291610daa82611481565b6005825264312e302e3160d81b602083015251918291602083526020830190611362565b9050346103d757602090816003193601126103e557610deb611425565b91610df4611c8f565b600154845163c04d7dcf60e01b81526001600160481b03858116858301819052956001600160a01b039460249486169390929083818781885afa801561119857610e44918c91611181575061150a565b856002541691823b1561117d578951634e8d2def60e11b81526001600160481b03821689820190815260006020820181905260408201528c9082908190606001038183885af180156111735761115c575b508951624f632160e61b8082528c9493929186818c81885afa8015610b405784918791611124575b5016611076575b5050813b156103d757895163406def5b60e01b81528881018a90528381888183875af1908115610a30578491611062575b50508951638f7dcfa360e01b815284818a81865afa908115610a3057849161102d575b501615610ff857803b156100e657818091888b518094819363279d74f760e11b83525af1801561099d5761098957505086516320e085cd60e11b815285810187905288818581865afa9283156109615784918a9461096b575082908951928380926339fb67dd60e01b82528b8b8301525afa9384156109615787918a95610940575082939495600354169689519788938492639d2b48ad60e01b84528301525afa8015610936577f05eef2d4c7b6f7d090582906c8987ff8d9afdead95f51156c0cda2e82707afc79461038a9289926109095750508651938493846115d9565b803b156100e6578851631bcc8f9560e31b81528781018990528281878183865af19081156109f15783916109dd57505061082c565b90508481813d831161105b575b611044818361149d565b810103126103e557611055906114de565b38610f18565b503d61103a565b61106b9061143b565b6103d7578238610ef5565b8b5190815285818b81875afa908115610afe5785916110ef575b50833b156104d2578b5163283350a560e01b81526001600160481b03918216818c01908152919092166020820152849082908190604001038183875af1908115610a3057849115610ec4576110e49061143b565b6103d7578238610ec4565b90508581813d831161111d575b611106818361149d565b810103126104d257611117906114de565b38611090565b503d6110fc565b809250888092503d8311611155575b61113d818361149d565b810103126104f45761114f84916114de565b38610ebd565b503d611133565b61116a909b9193929b61143b565b99909138610e95565b8b513d8e823e3d90fd5b8a80fd5b6106c49150853d87116106ca576106bc818361149d565b8a513d8d823e3d90fd5b5050346100e657816003193601126100e657905490516001600160a01b039091168152602090f35b9050346103d757826003193601126103d7576002548251638f7dcfa360e01b815293602092916001600160a01b031683868481845afa9586156112c357829661128b575b50839085519384809263f1a3c5b360e01b82525afa92831561127f57819361123f575b6101328561012786896116b0565b9091809350813d8311611278575b611257818361149d565b8101031261013b575061013292611270610127926114de565b918194611231565b503d61124d565b508351903d90823e3d90fd5b9095508381813d83116112bc575b6112a3818361149d565b810103126100e6576112b584916114de565b959061120e565b503d611299565b85513d84823e3d90fd5b5050346100e657816003193601126100e65760ff6020925460a01c1690519015158152f35b849084346103d757826003193601126103d757610132925061131382611481565b600d82526c5368617264696e675461626c6560981b602083015251918291602083526020830190611362565b60005b8381106113525750506000910152565b8181015183820152602001611342565b9060209161137b8151809281855285808601910161133f565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106113bc575050505050505090565b909192939495968580600192603f198582030187528a51906113e682516080808452830190611362565b916001600160481b038482015116848301526001600160601b0380898301511689840152606080920151169101529901940194019295949391906113ab565b600435906001600160481b038216820361013657565b67ffffffffffffffff811161144f57604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761144f57604052565b6040810190811067ffffffffffffffff82111761144f57604052565b90601f8019910116810190811067ffffffffffffffff82111761144f57604052565b9081602091031261013657516001600160a01b03811681036101365790565b51906001600160481b038216820361013657565b90816020910312610136575180151581036101365790565b1561151157565b60405162461bcd60e51b8152602060048201526015602482015274141c9bd99a5b1948191bd95cdb89dd08195e1a5cdd605a1b6044820152606490fd5b60208183031261013657805167ffffffffffffffff9182821161013657019082601f8301121561013657815190811161144f5760405192611599601f8301601f19166020018561149d565b81845260208284010111610136576115b7916020808501910161133f565b90565b9081602091031261013657516001600160601b03811681036101365790565b916115f1604092959495606085526060850190611362565b946001600160601b03809216602085015216910152565b9081606091031261013657604051906060820182811067ffffffffffffffff82111761144f57611659916040918252611640816114de565b845261164e602082016114de565b6020850152016114de565b604082015290565b67ffffffffffffffff811161144f5760051b60200190565b8051156116865760200190565b634e487b7160e01b600052603260045260246000fd5b80518210156116865760209160051b010190565b9060018060a01b036002541660405163f1a3c5b360e01b8152602081600481855afa8015611a0257600090611bad575b6001600160481b03915016158015611b9c575b611b945760405163162929e960e01b81526001600160481b038416600482015290606082602481845afa918215611a0257600092611b73575b506001600160481b038416158015611b60575b15611b1b576117566001600160481b038416611661565b94611764604051968761149d565b6001600160481b038416808752601f199061177e90611661565b0160005b818110611ae85750506001546003546040516320e085cd60e11b81526001600160481b03881660048201526001600160a01b039283169792909116946000826024818b5afa918215611a0257600092611acd575b506001600160481b0381511690604051916339fb67dd60e01b835260048301526020826024818c5afa918215611a0257600092611aa3575b5051604051639d2b48ad60e01b81526001600160481b039091166004820152906020826024818a5afa908115611a02576001600160601b0392600092611a80575b5082906040519461185f86611465565b85526001600160481b038616602086015216604084015216606082015261188588611679565b5261188f87611679565b50906001915b6001600160481b0386166001600160481b0384161080611a6e575b15611a65576001600160481b036040519163162929e960e01b8352166004820152606081602481875afa908115611a02576001600160481b0391604091600091611a46575b50015116916040516320e085cd60e11b81528360048201526000816024818b5afa908115611a0257600091611a2d575b506040516339fb67dd60e01b8152600481018590526020816024818c5afa908115611a0257600091611a0e575b50604051639d2b48ad60e01b815260048101869052926020846024818b5afa928315611a02576001600160601b036001600160481b03959460019487966000926119df575b508290604051946119a786611465565b85528a60208601521660408401521660608201526119c78483168d61169c565b526119d48382168c61169c565b500116929050611895565b839192506119fb9060203d60201161092f57610920818361149d565b9190611997565b6040513d6000823e3d90fd5b611a27915060203d60201161092f57610920818361149d565b38611952565b611a40913d8091833e6103a5818361149d565b38611925565b611a5f915060603d60601161069d5761068e818361149d565b386118f5565b50945050505050565b506001600160481b03811615156118b0565b83919250611a9c9060203d60201161092f57610920818361149d565b919061184f565b6001600160481b03919250611ac69060203d60201161092f57610920818361149d565b919061180e565b611ae191923d8091833e6103a5818361149d565b90386117d6565b602090604051611af781611465565b60608152600083820152600060408201526000606082015282828b01015201611782565b60405162461bcd60e51b815260206004820152601a60248201527f57726f6e67207374617274696e67204964656e746974792049440000000000006044820152606490fd5b506001600160481b03825116151561173f565b611b8d91925060603d60601161069d5761068e818361149d565b903861172c565b505050606090565b506001600160481b038216156116f3565b6020823d602011611be5575b81611bc66020938361149d565b8101031261013b5750611be06001600160481b03916114de565b6116e0565b3d9150611bb9565b600054604051638da5cb5b60e01b81526001600160a01b03916020908290600490829086165afa908115611a0257600091611c71575b50163303611c2d57565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b611c89915060203d8111610cf157610ce2818361149d565b38611c23565b600054604051631627905560e01b815233600482015290602090829060249082906001600160a01b03165afa908115611a0257600091611d16575b5015611cd257565b606460405162461bcd60e51b815260206004820152602060248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b611d2e915060203d81116106ca576106bc818361149d565b38611cca56fea2646970667358221220626a10c003d5964d92e82968e3686794df3414c27d8e59ddb76014144fee698a64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/ShardingTable.sol:ShardingTable",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 15379,
        "contract": "contracts/ShardingTable.sol:ShardingTable",
        "label": "status",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13656,
        "contract": "contracts/ShardingTable.sol:ShardingTable",
        "label": "profileStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ProfileStorage)19582"
      },
      {
        "astId": 13659,
        "contract": "contracts/ShardingTable.sol:ShardingTable",
        "label": "shardingTableStorage",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ShardingTableStorage)22972"
      },
      {
        "astId": 13662,
        "contract": "contracts/ShardingTable.sol:ShardingTable",
        "label": "stakingStorage",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(StakingStorage)23184"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_contract(ProfileStorage)19582": {
        "encoding": "inplace",
        "label": "contract ProfileStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ShardingTableStorage)22972": {
        "encoding": "inplace",
        "label": "contract ShardingTableStorage",
        "numberOfBytes": "20"
      },
      "t_contract(StakingStorage)23184": {
        "encoding": "inplace",
        "label": "contract StakingStorage",
        "numberOfBytes": "20"
      }
    }
  }
}
