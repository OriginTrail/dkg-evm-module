{
  "address": "0x420c3d9CD8304f82284B16C5cF6558028B41eADc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hubAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "ask",
          "type": "uint96"
        }
      ],
      "name": "AskUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        }
      ],
      "name": "ProfileCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "ProfileDeleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adminWallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "nodeId",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "sharesTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sharesTokenSymbol",
          "type": "string"
        }
      ],
      "name": "createProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashingProxy",
      "outputs": [
        {
          "internalType": "contract HashingProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract Hub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityContract",
      "outputs": [
        {
          "internalType": "contract Identity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityStorage",
      "outputs": [
        {
          "internalType": "contract IdentityStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parametersStorage",
      "outputs": [
        {
          "internalType": "contract ParametersStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profileStorage",
      "outputs": [
        {
          "internalType": "contract ProfileStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        },
        {
          "internalType": "uint96",
          "name": "ask",
          "type": "uint96"
        }
      ],
      "name": "setAsk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "stakeAccumulatedOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "startAccumulatedOperatorFeeWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistStorage",
      "outputs": [
        {
          "internalType": "contract WhitelistStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "identityId",
          "type": "uint72"
        }
      ],
      "name": "withdrawAccumulatedOperatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x18e04f7dceeef8563949bdb34062066d18722708bc3190e73a46da2cff01f979",
  "receipt": {
    "to": null,
    "from": "0xEfB65B890462206e3453dbd0bC8B2e6D6E0e7bD1",
    "contractAddress": "0x420c3d9CD8304f82284B16C5cF6558028B41eADc",
    "transactionIndex": 17,
    "gasUsed": "2795098",
    "logsBloom": "0x
    "blockHash": "0xf42b69d0746f77b1be8fad4955f27818947d92a065c8afb24ba27e067e92fc1a",
    "transactionHash": "0x18e04f7dceeef8563949bdb34062066d18722708bc3190e73a46da2cff01f979",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 37384517,
        "transactionHash": "0x18e04f7dceeef8563949bdb34062066d18722708bc3190e73a46da2cff01f979",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efb65b890462206e3453dbd0bc8b2e6d6e0e7bd1",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001062825ec7d35a000000000000000000000000000000000000000000000000866d6b31d3c9e03f000000000000000000000000000000000000000000000c05b4c26c22e1e030fc000000000000000000000000000000000000000000000000865d08af75020ce5000000000000000000000000000000000000000000000c05b4d2cea540a80456",
        "logIndex": 58,
        "blockHash": "0xf42b69d0746f77b1be8fad4955f27818947d92a065c8afb24ba27e067e92fc1a"
      }
    ],
    "blockNumber": 37384517,
    "cumulativeGasUsed": "5061025",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x224aEC6891d26e994D4Dbf207aE099ca029b3E67"],
  "numDeployments": 1,
  "solcInputHash": "6736b5a2b01ed07b57366e384b7e7c88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"ask\",\"type\":\"uint96\"}],\"name\":\"AskUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"}],\"name\":\"ProfileCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"ProfileDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminWallet\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"nodeId\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"sharesTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sharesTokenSymbol\",\"type\":\"string\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashingProxy\",\"outputs\":[{\"internalType\":\"contract HashingProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract Hub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityContract\",\"outputs\":[{\"internalType\":\"contract Identity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IdentityStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parametersStorage\",\"outputs\":[{\"internalType\":\"contract ParametersStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileStorage\",\"outputs\":[{\"internalType\":\"contract ProfileStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"},{\"internalType\":\"uint96\",\"name\":\"ask\",\"type\":\"uint96\"}],\"name\":\"setAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"stakeAccumulatedOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"startAccumulatedOperatorFeeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistStorage\",\"outputs\":[{\"internalType\":\"contract WhitelistStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"identityId\",\"type\":\"uint72\"}],\"name\":\"withdrawAccumulatedOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Profile.sol\":\"Profile\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ICustodian} from \\\"./interface/ICustodian.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Guardian is HubDependent {\\n    event TokenTransferred(address indexed custodian, uint256 amount);\\n    event MisplacedOTPWithdrawn(address indexed custodian, uint256 amount);\\n    event MisplacedTokensWithdrawn(address indexed custodian, address tokenContract, uint256 amount);\\n\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function transferTokens(address payable custodian) external onlyHubOwner {\\n        require(custodian != address(0x0), \\\"Custodian cannot be a zero address\\\");\\n        uint contractSize;\\n        assembly {\\n            contractSize := extcodesize(custodian)\\n        }\\n        require(contractSize > 0, \\\"Cannot transfer tokens to custodian that is not a contract!\\\");\\n\\n        ICustodian custodianContract = ICustodian(custodian);\\n        bool hasOwnersFunction = false;\\n        try custodianContract.getOwners() returns (address[] memory owners) {\\n            hasOwnersFunction = true;\\n            require(owners.length > 0, \\\"Cannot transfer tokens to custodian without owners defined!\\\");\\n        } catch {}\\n        require(hasOwnersFunction, \\\"Cannot transfer tokens to custodian without getOwners function!\\\");\\n\\n        uint256 balanceTransferred = tokenContract.balanceOf(address(this));\\n        bool transactionResult = tokenContract.transfer(custodian, balanceTransferred);\\n        require(transactionResult, \\\"Token transaction execution failed!\\\");\\n\\n        emit TokenTransferred(custodian, balanceTransferred);\\n    }\\n\\n    function withdrawMisplacedOTP() external onlyHubOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        emit MisplacedOTPWithdrawn(msg.sender, balance);\\n    }\\n\\n    function withdrawMisplacedTokens(address tokenContractAddress) external onlyHubOwner {\\n        require(tokenContractAddress != address(tokenContract), \\\"Cannot use this function with the TRAC contract\\\");\\n        IERC20 misplacedTokensContract = IERC20(tokenContractAddress);\\n\\n        uint256 balance = misplacedTokensContract.balanceOf(address(this));\\n        if (balance > 0) {\\n            bool transactionResult = misplacedTokensContract.transfer(msg.sender, balance);\\n            require(transactionResult, \\\"Token transaction execution failed\\\");\\n        }\\n        emit MisplacedTokensWithdrawn(msg.sender, tokenContractAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x2dcef9797032f7c9aae94d003e52a83ae8e978b1ca5b3fbca261e552252d3de8\",\"license\":\"MIT\"},\"contracts/HashingProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {IHashFunction} from \\\"./interface/IHashFunction.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedIndexableContractDynamicSetLib} from \\\"./utils/UnorderedIndexableContractDynamicSet.sol\\\";\\n\\ncontract HashingProxy is Named, Versioned, ContractStatus {\\n    using UnorderedIndexableContractDynamicSetLib for UnorderedIndexableContractDynamicSetLib.Set;\\n\\n    event NewHashFunctionContract(uint8 indexed hashFunctionId, address newContractAddress);\\n    event HashFunctionContractChanged(uint8 indexed hashFunctionId, address newContractAddress);\\n\\n    string private constant _NAME = \\\"HashingProxy\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    UnorderedIndexableContractDynamicSetLib.Set internal hashFunctionSet;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(uint8 hashFunctionId, address hashingContractAddress) external onlyHubOwner {\\n        if (hashFunctionSet.exists(hashFunctionId)) {\\n            hashFunctionSet.update(hashFunctionId, hashingContractAddress);\\n            emit HashFunctionContractChanged(hashFunctionId, hashingContractAddress);\\n        } else {\\n            hashFunctionSet.append(hashFunctionId, hashingContractAddress);\\n            emit NewHashFunctionContract(hashFunctionId, hashingContractAddress);\\n        }\\n    }\\n\\n    function removeContract(uint8 hashFunctionId) external onlyHubOwner {\\n        hashFunctionSet.remove(hashFunctionId);\\n    }\\n\\n    function callHashFunction(uint8 hashFunctionId, bytes calldata data) external view returns (bytes32) {\\n        return IHashFunction(hashFunctionSet.get(hashFunctionId).addr).hash(data);\\n    }\\n\\n    function getHashFunctionName(uint8 hashFunctionId) external view returns (string memory) {\\n        return Named(hashFunctionSet.get(hashFunctionId).addr).name();\\n    }\\n\\n    function getHashFunctionContractAddress(uint8 hashFunctionId) external view returns (address) {\\n        return hashFunctionSet.get(hashFunctionId).addr;\\n    }\\n\\n    function getAllHashFunctions() external view returns (UnorderedIndexableContractDynamicSetLib.Contract[] memory) {\\n        return hashFunctionSet.getAll();\\n    }\\n\\n    function isHashFunction(uint8 hashFunctionId) external view returns (bool) {\\n        return hashFunctionSet.exists(hashFunctionId);\\n    }\\n}\\n\",\"keccak256\":\"0x025adfeec4c165b83247442a9d36fee0bf311c01c3527bbd23401ce9879f5eee\",\"license\":\"MIT\"},\"contracts/Hub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedNamedContractDynamicSetLib} from \\\"./utils/UnorderedNamedContractDynamicSet.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Hub is Named, Versioned, Ownable {\\n    using UnorderedNamedContractDynamicSetLib for UnorderedNamedContractDynamicSetLib.Set;\\n\\n    event NewContract(string contractName, address newContractAddress);\\n    event ContractChanged(string contractName, address newContractAddress);\\n    event NewAssetStorage(string contractName, address newContractAddress);\\n    event AssetStorageChanged(string contractName, address newContractAddress);\\n\\n    string private constant _NAME = \\\"Hub\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    UnorderedNamedContractDynamicSetLib.Set internal contractSet;\\n    UnorderedNamedContractDynamicSetLib.Set internal assetStorageSet;\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setContractAddress(string calldata contractName, address newContractAddress) external onlyOwner {\\n        if (contractSet.exists(contractName)) {\\n            emit ContractChanged(contractName, newContractAddress);\\n            contractSet.update(contractName, newContractAddress);\\n        } else {\\n            emit NewContract(contractName, newContractAddress);\\n            contractSet.append(contractName, newContractAddress);\\n        }\\n    }\\n\\n    function setAssetStorageAddress(string calldata assetStorageName, address assetStorageAddress) external onlyOwner {\\n        if (assetStorageSet.exists(assetStorageName)) {\\n            emit AssetStorageChanged(assetStorageName, assetStorageAddress);\\n            assetStorageSet.update(assetStorageName, assetStorageAddress);\\n        } else {\\n            emit NewAssetStorage(assetStorageName, assetStorageAddress);\\n            assetStorageSet.append(assetStorageName, assetStorageAddress);\\n        }\\n    }\\n\\n    function getContractAddress(string calldata contractName) external view returns (address) {\\n        return contractSet.get(contractName).addr;\\n    }\\n\\n    function getAssetStorageAddress(string calldata assetStorageName) external view returns (address) {\\n        return assetStorageSet.get(assetStorageName).addr;\\n    }\\n\\n    function getAllContracts() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return contractSet.getAll();\\n    }\\n\\n    function getAllAssetStorages() external view returns (UnorderedNamedContractDynamicSetLib.Contract[] memory) {\\n        return assetStorageSet.getAll();\\n    }\\n\\n    function isContract(string calldata contractName) external view returns (bool) {\\n        return contractSet.exists(contractName);\\n    }\\n\\n    function isContract(address selectedContractAddress) external view returns (bool) {\\n        return contractSet.exists(selectedContractAddress);\\n    }\\n\\n    function isAssetStorage(string calldata assetStorageName) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageName);\\n    }\\n\\n    function isAssetStorage(address assetStorageAddress) external view returns (bool) {\\n        return assetStorageSet.exists(assetStorageAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf93b8b90622b1a49cd00a3558f64766e6bbca7b2f192f8e036a773d01e5c3382\",\"license\":\"MIT\"},\"contracts/Identity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ADMIN_KEY, OPERATIONAL_KEY, ECDSA, RSA} from \\\"./constants/IdentityConstants.sol\\\";\\n\\ncontract Identity is Named, Versioned, ContractStatus, Initializable {\\n    event IdentityCreated(uint72 indexed identityId, bytes32 indexed operationalKey, bytes32 indexed adminKey);\\n    event IdentityDeleted(uint72 indexed identityId);\\n\\n    string private constant _NAME = \\\"Identity\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    IdentityStorage public identityStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    modifier onlyAdmin(uint72 identityId) {\\n        _checkAdmin(identityId);\\n        _;\\n    }\\n\\n    function initialize() public onlyHubOwner {\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createIdentity(address operational, address admin) external onlyContracts returns (uint72) {\\n        require(operational != address(0), \\\"Operational address can't be 0x0\\\");\\n        require(admin != address(0), \\\"Admin address can't be 0x0\\\");\\n        require(admin != operational, \\\"Admin should != Operational\\\");\\n\\n        IdentityStorage ids = identityStorage;\\n\\n        uint72 identityId = ids.generateIdentityId();\\n\\n        bytes32 adminKey = keccak256(abi.encodePacked(admin));\\n        ids.addKey(identityId, adminKey, ADMIN_KEY, ECDSA);\\n\\n        bytes32 operationalKey = keccak256(abi.encodePacked(operational));\\n        ids.addKey(identityId, operationalKey, OPERATIONAL_KEY, ECDSA);\\n\\n        ids.setOperationalKeyIdentityId(operationalKey, identityId);\\n\\n        emit IdentityCreated(identityId, operationalKey, adminKey);\\n\\n        return identityId;\\n    }\\n\\n    function deleteIdentity(uint72 identityId) external onlyContracts {\\n        identityStorage.deleteIdentity(identityId);\\n\\n        emit IdentityDeleted(identityId);\\n    }\\n\\n    function addKey(\\n        uint72 identityId,\\n        bytes32 key,\\n        uint256 keyPurpose,\\n        uint256 keyType\\n    ) external onlyAdmin(identityId) {\\n        require(key != bytes32(0), \\\"Key arg is empty\\\");\\n\\n        IdentityStorage ids = identityStorage;\\n\\n        bytes32 attachedKey;\\n        (, , attachedKey) = ids.getKey(identityId, key);\\n        require(attachedKey != key, \\\"Key is already attached\\\");\\n\\n        ids.addKey(identityId, key, keyPurpose, keyType);\\n\\n        if (keyPurpose == OPERATIONAL_KEY) {\\n            ids.setOperationalKeyIdentityId(key, identityId);\\n        }\\n    }\\n\\n    function removeKey(uint72 identityId, bytes32 key) external onlyAdmin(identityId) {\\n        require(key != bytes32(0), \\\"Key arg is empty\\\");\\n\\n        IdentityStorage ids = identityStorage;\\n\\n        uint256 purpose;\\n        bytes32 attachedKey;\\n        (purpose, , attachedKey) = ids.getKey(identityId, key);\\n        require(attachedKey == key, \\\"Key isn't attached\\\");\\n\\n        require(\\n            !(ids.getKeysByPurpose(identityId, ADMIN_KEY).length == 1 && ids.keyHasPurpose(identityId, key, ADMIN_KEY)),\\n            \\\"Cannot delete the only admin key\\\"\\n        );\\n        require(\\n            !(ids.getKeysByPurpose(identityId, OPERATIONAL_KEY).length == 1 &&\\n                ids.keyHasPurpose(identityId, key, OPERATIONAL_KEY)),\\n            \\\"Cannot delete the only oper. key\\\"\\n        );\\n\\n        ids.removeKey(identityId, key);\\n\\n        if (purpose == OPERATIONAL_KEY) {\\n            ids.removeOperationalKeyIdentityId(key);\\n        }\\n    }\\n\\n    function _checkAdmin(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\\n            \\\"Admin function\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x66a5ccd55ac2c55d3a4a99d6057439bc8aeed0d978088e1a96eedfc9adc4d6a0\",\"license\":\"MIT\"},\"contracts/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HashingProxy} from \\\"./HashingProxy.sol\\\";\\nimport {Identity} from \\\"./Identity.sol\\\";\\nimport {Shares} from \\\"./Shares.sol\\\";\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ParametersStorage} from \\\"./storage/ParametersStorage.sol\\\";\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {Staking} from \\\"./Staking.sol\\\";\\nimport {WhitelistStorage} from \\\"./storage/WhitelistStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {UnorderedIndexableContractDynamicSetLib} from \\\"./utils/UnorderedIndexableContractDynamicSet.sol\\\";\\nimport {ADMIN_KEY, OPERATIONAL_KEY} from \\\"./constants/IdentityConstants.sol\\\";\\n\\ncontract Profile is Named, Versioned, ContractStatus, Initializable {\\n    event ProfileCreated(uint72 indexed identityId, bytes nodeId);\\n    event ProfileDeleted(uint72 indexed identityId);\\n    event AskUpdated(uint72 indexed identityId, bytes nodeId, uint96 ask);\\n\\n    string private constant _NAME = \\\"Profile\\\";\\n    string private constant _VERSION = \\\"1.0.2\\\";\\n\\n    HashingProxy public hashingProxy;\\n    Identity public identityContract;\\n    Staking public stakingContract;\\n    IdentityStorage public identityStorage;\\n    ParametersStorage public parametersStorage;\\n    ProfileStorage public profileStorage;\\n    WhitelistStorage public whitelistStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    modifier onlyIdentityOwner(uint72 identityId) {\\n        _checkIdentityOwner(identityId);\\n        _;\\n    }\\n\\n    modifier onlyAdmin(uint72 identityId) {\\n        _checkAdmin(identityId);\\n        _;\\n    }\\n\\n    modifier onlyOperational(uint72 identityId) {\\n        _checkOperational(identityId);\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        _checkWhitelist();\\n        _;\\n    }\\n\\n    function initialize() public onlyHubOwner {\\n        hashingProxy = HashingProxy(hub.getContractAddress(\\\"HashingProxy\\\"));\\n        identityContract = Identity(hub.getContractAddress(\\\"Identity\\\"));\\n        stakingContract = Staking(hub.getContractAddress(\\\"Staking\\\"));\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n        parametersStorage = ParametersStorage(hub.getContractAddress(\\\"ParametersStorage\\\"));\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        whitelistStorage = WhitelistStorage(hub.getContractAddress(\\\"WhitelistStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createProfile(\\n        address adminWallet,\\n        bytes calldata nodeId,\\n        string calldata sharesTokenName,\\n        string calldata sharesTokenSymbol\\n    ) external onlyWhitelisted {\\n        IdentityStorage ids = identityStorage;\\n        ProfileStorage ps = profileStorage;\\n\\n        require(ids.getIdentityId(msg.sender) == 0, \\\"Identity already exists\\\");\\n        require(nodeId.length != 0, \\\"Node ID can't be empty\\\");\\n        require(!ps.nodeIdsList(nodeId), \\\"Node ID is already registered\\\");\\n        require(\\n            keccak256(abi.encodePacked(sharesTokenName)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"Token name cannot be empty\\\"\\n        );\\n        require(\\n            keccak256(abi.encodePacked(sharesTokenSymbol)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"Token symbol cannot be empty\\\"\\n        );\\n        require(!ps.sharesNames(sharesTokenName), \\\"Token name is already taken\\\");\\n        require(!ps.sharesSymbols(sharesTokenSymbol), \\\"Token symbol is already taken\\\");\\n\\n        uint72 identityId = identityContract.createIdentity(msg.sender, adminWallet);\\n\\n        Shares sharesContract = new Shares(address(hub), sharesTokenName, sharesTokenSymbol);\\n\\n        ps.createProfile(identityId, nodeId, address(sharesContract));\\n        _setAvailableNodeAddresses(identityId);\\n\\n        emit ProfileCreated(identityId, nodeId);\\n    }\\n\\n    function setAsk(uint72 identityId, uint96 ask) external onlyIdentityOwner(identityId) {\\n        require(ask != 0, \\\"Ask cannot be 0\\\");\\n        ProfileStorage ps = profileStorage;\\n        ps.setAsk(identityId, ask);\\n\\n        emit AskUpdated(identityId, ps.getNodeId(identityId), ask);\\n    }\\n\\n    // function deleteProfile(uint72 identityId) external onlyAdmin(identityId) {\\n    //     // TODO: add checks\\n    //     profileStorage.deleteProfile(identityId);\\n    //     identityContract.deleteIdentity(identityId);\\n    //\\n    //     emit ProfileDeleted(identityId);\\n    // }\\n\\n    // function changeNodeId(uint72 identityId, bytes calldata nodeId) external onlyOperational(identityId) {\\n    //     require(nodeId.length != 0, \\\"Node ID can't be empty\\\");\\n\\n    //     profileStorage.setNodeId(identityId, nodeId);\\n    // }\\n\\n    // function addNewNodeIdHash(uint72 identityId, uint8 hashFunctionId) external onlyOperational(identityId) {\\n    //     HashingProxy hp = hashingProxy;\\n    //     require(hp.isHashFunction(hashFunctionId), \\\"Hash function doesn't exist\\\");\\n\\n    //     profileStorage.setNodeAddress(\\n    //         identityId,\\n    //         hashFunctionId,\\n    //         hp.callHashFunction(hashFunctionId, profileStorage.getNodeId(identityId))\\n    //     );\\n    // }\\n\\n    // TODO: Define where it can be called, change internal modifier\\n    function _setAvailableNodeAddresses(uint72 identityId) internal virtual {\\n        ProfileStorage ps = profileStorage;\\n        HashingProxy hp = hashingProxy;\\n\\n        bytes memory nodeId = ps.getNodeId(identityId);\\n        bytes32 nodeAddress;\\n\\n        UnorderedIndexableContractDynamicSetLib.Contract[] memory hashFunctions = hp.getAllHashFunctions();\\n        uint256 hashFunctionsNumber = hashFunctions.length;\\n        uint8 hashFunctionId;\\n        for (uint8 i; i < hashFunctionsNumber; ) {\\n            hashFunctionId = hashFunctions[i].id;\\n            nodeAddress = hp.callHashFunction(hashFunctionId, nodeId);\\n            ps.setNodeAddress(identityId, hashFunctionId, nodeAddress);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function stakeAccumulatedOperatorFee(uint72 identityId) external onlyAdmin(identityId) {\\n        ProfileStorage ps = profileStorage;\\n\\n        uint96 accumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\\n        require(accumulatedOperatorFee != 0, \\\"You have no operator fees\\\");\\n\\n        ps.setAccumulatedOperatorFee(identityId, 0);\\n        stakingContract.addStake(msg.sender, identityId, accumulatedOperatorFee);\\n    }\\n\\n    function startAccumulatedOperatorFeeWithdrawal(uint72 identityId) external onlyAdmin(identityId) {\\n        ProfileStorage ps = profileStorage;\\n\\n        uint96 accumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\\n\\n        require(accumulatedOperatorFee != 0, \\\"You have no operator fees\\\");\\n\\n        ps.setAccumulatedOperatorFee(identityId, 0);\\n        ps.setAccumulatedOperatorFeeWithdrawalAmount(\\n            identityId,\\n            ps.getAccumulatedOperatorFeeWithdrawalAmount(identityId) + accumulatedOperatorFee\\n        );\\n        ps.setAccumulatedOperatorFeeWithdrawalTimestamp(\\n            identityId,\\n            block.timestamp + parametersStorage.stakeWithdrawalDelay()\\n        );\\n    }\\n\\n    function withdrawAccumulatedOperatorFee(uint72 identityId) external onlyAdmin(identityId) {\\n        ProfileStorage ps = profileStorage;\\n\\n        uint96 withdrawalAmount = ps.getAccumulatedOperatorFeeWithdrawalAmount(identityId);\\n\\n        require(withdrawalAmount != 0, \\\"Withdrawal hasn't been initiated\\\");\\n        require(\\n            ps.getAccumulatedOperatorFeeWithdrawalTimestamp(identityId) < block.timestamp,\\n            \\\"Withdrawal period hasn't ended\\\"\\n        );\\n\\n        ps.setAccumulatedOperatorFeeWithdrawalAmount(identityId, 0);\\n        ps.setAccumulatedOperatorFeeWithdrawalTimestamp(identityId, 0);\\n        ps.transferAccumulatedOperatorFee(msg.sender, withdrawalAmount);\\n    }\\n\\n    function _checkIdentityOwner(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY) ||\\n                identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), OPERATIONAL_KEY),\\n            \\\"Fn can be used only by id owner\\\"\\n        );\\n    }\\n\\n    function _checkAdmin(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\\n            \\\"Admin function\\\"\\n        );\\n    }\\n\\n    function _checkOperational(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), OPERATIONAL_KEY),\\n            \\\"Fn can be called only by oper.\\\"\\n        );\\n    }\\n\\n    function _checkWhitelist() internal view virtual {\\n        WhitelistStorage ws = whitelistStorage;\\n        if (ws.whitelistingEnabled()) {\\n            require(ws.whitelisted(msg.sender), \\\"Address isn't whitelisted\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8721e611712ee2e75f529f0a7481a9aa0d8b3ab2c159987110d3356384e5149\",\"license\":\"MIT\"},\"contracts/ShardingTable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"./structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"./constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTable is Named, Versioned, ContractStatus, Initializable {\\n    event NodeAdded(uint72 indexed identityId, bytes nodeId, uint96 ask, uint96 stake);\\n    event NodeRemoved(uint72 indexed identityId, bytes nodeId);\\n\\n    string private constant _NAME = \\\"ShardingTable\\\";\\n    string private constant _VERSION = \\\"1.0.1\\\";\\n\\n    ProfileStorage public profileStorage;\\n    ShardingTableStorage public shardingTableStorage;\\n    StakingStorage public stakingStorage;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        return _getShardingTable(startingIdentityId, nodesNumber);\\n    }\\n\\n    function getShardingTable() external view returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStorage sts = shardingTableStorage;\\n        return _getShardingTable(sts.head(), sts.nodesCount());\\n    }\\n\\n    function pushBack(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.tail() != NULL) sts.link(sts.tail(), identityId);\\n\\n        sts.setTail(identityId);\\n\\n        if (sts.head() == NULL) sts.setHead(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function pushFront(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        sts.createNodeObject(identityId, NULL, NULL);\\n\\n        if (sts.head() != NULL) sts.link(identityId, sts.head());\\n\\n        shardingTableStorage.setHead(identityId);\\n\\n        if (sts.tail() == NULL) sts.setTail(identityId);\\n\\n        sts.incrementNodesCount();\\n\\n        emit NodeAdded(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            ps.getAsk(identityId),\\n            stakingStorage.totalStakes(identityId)\\n        );\\n    }\\n\\n    function removeNode(uint72 identityId) external onlyContracts {\\n        ProfileStorage ps = profileStorage;\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        ShardingTableStructs.Node memory nodeToRemove = sts.getNode(identityId);\\n\\n        uint72 head = sts.head();\\n        uint72 tail = sts.tail();\\n\\n        if ((head == identityId) && (tail == identityId)) {\\n            sts.setHead(NULL);\\n            sts.setTail(NULL);\\n        } else if (tail == identityId) {\\n            sts.setTail(nodeToRemove.prevIdentityId);\\n            sts.setNextIdentityId(tail, NULL);\\n        } else if (head == identityId) {\\n            sts.setHead(nodeToRemove.nextIdentityId);\\n            sts.setPrevIdentityId(head, NULL);\\n        } else {\\n            sts.link(nodeToRemove.prevIdentityId, nodeToRemove.nextIdentityId);\\n        }\\n\\n        sts.deleteNodeObject(identityId);\\n        sts.decrementNodesCount();\\n\\n        emit NodeRemoved(identityId, ps.getNodeId(identityId));\\n    }\\n\\n    function _getShardingTable(\\n        uint72 startingIdentityId,\\n        uint72 nodesNumber\\n    ) internal view virtual returns (ShardingTableStructs.NodeInfo[] memory) {\\n        ShardingTableStructs.NodeInfo[] memory nodesPage;\\n        ShardingTableStorage sts = shardingTableStorage;\\n\\n        if ((sts.nodesCount() == 0) || (nodesNumber == 0)) {\\n            return nodesPage;\\n        }\\n\\n        ShardingTableStructs.Node memory startingNode = sts.getNode(startingIdentityId);\\n\\n        require((startingIdentityId == NULL) || (startingNode.identityId != NULL), \\\"Wrong starting Identity ID\\\");\\n\\n        nodesPage = new ShardingTableStructs.NodeInfo[](nodesNumber);\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        nodesPage[0] = ShardingTableStructs.NodeInfo({\\n            nodeId: ps.getNodeId(startingIdentityId),\\n            identityId: startingIdentityId,\\n            ask: ps.getAsk(startingNode.identityId),\\n            stake: ss.totalStakes(startingNode.identityId)\\n        });\\n\\n        uint72 nextIdentityId = startingIdentityId;\\n        uint72 i = 1;\\n        while ((i < nodesNumber) && (nextIdentityId != NULL)) {\\n            nextIdentityId = sts.getNode(nextIdentityId).nextIdentityId;\\n\\n            nodesPage[i] = ShardingTableStructs.NodeInfo({\\n                nodeId: ps.getNodeId(nextIdentityId),\\n                identityId: nextIdentityId,\\n                ask: ps.getAsk(nextIdentityId),\\n                stake: ss.totalStakes(nextIdentityId)\\n            });\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n}\\n\",\"keccak256\":\"0xdc5fcd9c08b1794fc7c251733a15ae9af7f8744ec80b1a70924f6219ca3e62cd\",\"license\":\"MIT\"},\"contracts/Shares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./abstract/HubDependent.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract Shares is HubDependent, ERC20, ERC20Burnable {\\n    constructor(\\n        address hubAddress,\\n        string memory name,\\n        string memory symbol\\n    )\\n        HubDependent(hubAddress)\\n        ERC20(name, symbol) // solhint-disable-next-line no-empty-blocks\\n    {}\\n\\n    function mint(address to, uint256 amount) external onlyContracts {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5ba555c0e9109f8e9a17a98a7a30643c9849059ea9b80693c9e2d460d679666d\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ShardingTable} from \\\"./ShardingTable.sol\\\";\\nimport {Shares} from \\\"./Shares.sol\\\";\\nimport {IdentityStorage} from \\\"./storage/IdentityStorage.sol\\\";\\nimport {ParametersStorage} from \\\"./storage/ParametersStorage.sol\\\";\\nimport {ProfileStorage} from \\\"./storage/ProfileStorage.sol\\\";\\nimport {ServiceAgreementStorageProxy} from \\\"./storage/ServiceAgreementStorageProxy.sol\\\";\\nimport {ShardingTableStorage} from \\\"./storage/ShardingTableStorage.sol\\\";\\nimport {StakingStorage} from \\\"./storage/StakingStorage.sol\\\";\\nimport {ContractStatus} from \\\"./abstract/ContractStatus.sol\\\";\\nimport {Initializable} from \\\"./interface/Initializable.sol\\\";\\nimport {Named} from \\\"./interface/Named.sol\\\";\\nimport {Versioned} from \\\"./interface/Versioned.sol\\\";\\nimport {ADMIN_KEY} from \\\"./constants/IdentityConstants.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Staking is Named, Versioned, ContractStatus, Initializable {\\n    event StakeIncreased(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        address indexed staker,\\n        uint96 oldStake,\\n        uint96 newStake\\n    );\\n    event StakeWithdrawalStarted(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        address indexed staker,\\n        uint96 oldStake,\\n        uint96 newStake,\\n        uint256 withdrawalPeriodEnd\\n    );\\n    event StakeWithdrawn(uint72 indexed identityId, bytes nodeId, address indexed staker, uint96 withdrawnStakeAmount);\\n    event AccumulatedOperatorFeeIncreased(\\n        uint72 indexed identityId,\\n        bytes nodeId,\\n        uint96 oldAccumulatedOperatorFee,\\n        uint96 newAccumulatedOperatorFee\\n    );\\n    event OperatorFeeUpdated(uint72 indexed identityId, bytes nodeId, uint8 operatorFee);\\n\\n    string private constant _NAME = \\\"Staking\\\";\\n    string private constant _VERSION = \\\"1.0.2\\\";\\n\\n    ShardingTable public shardingTableContract;\\n    IdentityStorage public identityStorage;\\n    ParametersStorage public parametersStorage;\\n    ProfileStorage public profileStorage;\\n    StakingStorage public stakingStorage;\\n    ServiceAgreementStorageProxy public serviceAgreementStorageProxy;\\n    ShardingTableStorage public shardingTableStorage;\\n    IERC20 public tokenContract;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) ContractStatus(hubAddress) {}\\n\\n    modifier onlyAdmin(uint72 identityId) {\\n        _checkAdmin(identityId);\\n        _;\\n    }\\n\\n    function initialize() public onlyHubOwner {\\n        shardingTableContract = ShardingTable(hub.getContractAddress(\\\"ShardingTable\\\"));\\n        identityStorage = IdentityStorage(hub.getContractAddress(\\\"IdentityStorage\\\"));\\n        parametersStorage = ParametersStorage(hub.getContractAddress(\\\"ParametersStorage\\\"));\\n        profileStorage = ProfileStorage(hub.getContractAddress(\\\"ProfileStorage\\\"));\\n        stakingStorage = StakingStorage(hub.getContractAddress(\\\"StakingStorage\\\"));\\n        serviceAgreementStorageProxy = ServiceAgreementStorageProxy(\\n            hub.getContractAddress(\\\"ServiceAgreementStorageProxy\\\")\\n        );\\n        shardingTableStorage = ShardingTableStorage(hub.getContractAddress(\\\"ShardingTableStorage\\\"));\\n        tokenContract = IERC20(hub.getContractAddress(\\\"Token\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function addStake(address sender, uint72 identityId, uint96 stakeAmount) external onlyContracts {\\n        _addStake(sender, identityId, stakeAmount);\\n    }\\n\\n    function addStake(uint72 identityId, uint96 stakeAmount) external onlyAdmin(identityId) {\\n        _addStake(msg.sender, identityId, stakeAmount);\\n    }\\n\\n    function startStakeWithdrawal(uint72 identityId, uint96 sharesToBurn) external {\\n        require(sharesToBurn != 0, \\\"Withdrawal amount cannot be 0\\\");\\n\\n        ProfileStorage ps = profileStorage;\\n        StakingStorage ss = stakingStorage;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\\n\\n        require(sharesToBurn <= sharesContract.balanceOf(msg.sender), \\\"sharesToBurn must be <= balance\\\");\\n\\n        uint96 oldStake = ss.totalStakes(identityId);\\n        uint96 stakeWithdrawalAmount = uint96((uint256(oldStake) * sharesToBurn) / sharesContract.totalSupply());\\n        uint96 newStake = oldStake - stakeWithdrawalAmount;\\n        uint96 newStakeWithdrawalAmount = ss.getWithdrawalRequestAmount(identityId, msg.sender) + stakeWithdrawalAmount;\\n\\n        ParametersStorage params = parametersStorage;\\n\\n        uint256 withdrawalPeriodEnd = block.timestamp + params.stakeWithdrawalDelay();\\n        ss.createWithdrawalRequest(identityId, msg.sender, newStakeWithdrawalAmount, withdrawalPeriodEnd);\\n        ss.setTotalStake(identityId, newStake);\\n        sharesContract.burnFrom(msg.sender, sharesToBurn);\\n\\n        if (shardingTableStorage.nodeExists(identityId) && (newStake < params.minimumStake())) {\\n            shardingTableContract.removeNode(identityId);\\n        }\\n\\n        emit StakeWithdrawalStarted(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            msg.sender,\\n            oldStake,\\n            newStake,\\n            withdrawalPeriodEnd\\n        );\\n    }\\n\\n    function withdrawStake(uint72 identityId) external {\\n        ProfileStorage ps = profileStorage;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n\\n        StakingStorage ss = stakingStorage;\\n\\n        uint96 stakeWithdrawalAmount;\\n        uint256 withdrawalTimestamp;\\n        (stakeWithdrawalAmount, withdrawalTimestamp) = ss.withdrawalRequests(identityId, msg.sender);\\n\\n        require(stakeWithdrawalAmount != 0, \\\"Withdrawal hasn't been initiated\\\");\\n        require(withdrawalTimestamp < block.timestamp, \\\"Withdrawal period hasn't ended\\\");\\n\\n        ss.deleteWithdrawalRequest(identityId, msg.sender);\\n        ss.transferStake(msg.sender, stakeWithdrawalAmount);\\n\\n        emit StakeWithdrawn(identityId, ps.getNodeId(identityId), msg.sender, stakeWithdrawalAmount);\\n    }\\n\\n    function addReward(bytes32 agreementId, uint72 identityId, uint96 rewardAmount) external onlyContracts {\\n        ServiceAgreementStorageProxy sasProxy = serviceAgreementStorageProxy;\\n        StakingStorage ss = stakingStorage;\\n\\n        uint96 operatorFee = (rewardAmount * ss.operatorFees(identityId)) / 100;\\n        uint96 delegatorsReward = rewardAmount - operatorFee;\\n\\n        ProfileStorage ps = profileStorage;\\n\\n        uint96 oldAccumulatedOperatorFee = ps.getAccumulatedOperatorFee(identityId);\\n        uint96 oldStake = ss.totalStakes(identityId);\\n\\n        if (operatorFee != 0) {\\n            ps.setAccumulatedOperatorFee(identityId, oldAccumulatedOperatorFee + operatorFee);\\n            sasProxy.transferAgreementTokens(agreementId, address(ps), operatorFee);\\n        }\\n\\n        if (delegatorsReward != 0) {\\n            ss.setTotalStake(identityId, oldStake + delegatorsReward);\\n            sasProxy.transferAgreementTokens(agreementId, address(ss), delegatorsReward);\\n\\n            if (!shardingTableStorage.nodeExists(identityId) && oldStake >= parametersStorage.minimumStake()) {\\n                shardingTableContract.pushBack(identityId);\\n            }\\n        }\\n\\n        emit AccumulatedOperatorFeeIncreased(\\n            identityId,\\n            ps.getNodeId(identityId),\\n            oldAccumulatedOperatorFee,\\n            oldAccumulatedOperatorFee + operatorFee\\n        );\\n\\n        address sasAddress;\\n        if (sasProxy.agreementV1Exists(agreementId)) {\\n            sasAddress = sasProxy.agreementV1StorageAddress();\\n        } else {\\n            sasAddress = sasProxy.agreementV1U1StorageAddress();\\n        }\\n\\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sasAddress, oldStake, oldStake + delegatorsReward);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function slash(uint72 identityId) external onlyContracts {\\n        // TBD\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint8 operatorFee) external onlyAdmin(identityId) {\\n        require(operatorFee <= 100, \\\"Operator fee out of [0, 100]\\\");\\n        stakingStorage.setOperatorFee(identityId, operatorFee);\\n\\n        emit OperatorFeeUpdated(identityId, profileStorage.getNodeId(identityId), operatorFee);\\n    }\\n\\n    function _addStake(address sender, uint72 identityId, uint96 stakeAmount) internal virtual {\\n        StakingStorage ss = stakingStorage;\\n        ProfileStorage ps = profileStorage;\\n        ParametersStorage params = parametersStorage;\\n        IERC20 tknc = tokenContract;\\n\\n        uint96 oldStake = ss.totalStakes(identityId);\\n        uint96 newStake = oldStake + stakeAmount;\\n\\n        require(ps.profileExists(identityId), \\\"Profile doesn't exist\\\");\\n        require(tknc.allowance(sender, address(this)) >= stakeAmount, \\\"Allowance < stakeAmount\\\");\\n        require(newStake <= params.maximumStake(), \\\"Exceeded the maximum stake\\\");\\n\\n        Shares sharesContract = Shares(ps.getSharesContractAddress(identityId));\\n\\n        uint256 sharesMinted;\\n        if (sharesContract.totalSupply() == 0) {\\n            sharesMinted = stakeAmount;\\n        } else {\\n            sharesMinted = ((stakeAmount * sharesContract.totalSupply()) / oldStake);\\n        }\\n        sharesContract.mint(sender, sharesMinted);\\n\\n        ss.setTotalStake(identityId, newStake);\\n        tknc.transferFrom(sender, address(ss), stakeAmount);\\n\\n        if (!shardingTableStorage.nodeExists(identityId) && newStake >= params.minimumStake()) {\\n            shardingTableContract.pushBack(identityId);\\n        }\\n\\n        emit StakeIncreased(identityId, ps.getNodeId(identityId), sender, oldStake, newStake);\\n    }\\n\\n    function _checkAdmin(uint72 identityId) internal view virtual {\\n        require(\\n            identityStorage.keyHasPurpose(identityId, keccak256(abi.encodePacked(msg.sender)), ADMIN_KEY),\\n            \\\"Admin function\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8100c10505e4d64c2f1f7f388616bc7d82c3a00fa66299cfb79ad4e3a6538d9a\",\"license\":\"MIT\"},\"contracts/abstract/ContractStatus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"./HubDependent.sol\\\";\\n\\nabstract contract ContractStatus is HubDependent {\\n    bool public status;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function setStatus(bool _status) external onlyHubOwner {\\n        status = _status;\\n    }\\n}\\n\",\"keccak256\":\"0x1a770a3dea223c33b0d6d7e522186af2b41e6d1012209f329cd4b3cf4180ef61\",\"license\":\"MIT\"},\"contracts/abstract/HubDependent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Hub} from \\\"../Hub.sol\\\";\\n\\nabstract contract HubDependent {\\n    Hub public hub;\\n\\n    constructor(address hubAddress) {\\n        require(hubAddress != address(0), \\\"Hub Address cannot be 0x0\\\");\\n\\n        hub = Hub(hubAddress);\\n    }\\n\\n    modifier onlyHubOwner() {\\n        _checkHubOwner();\\n        _;\\n    }\\n\\n    modifier onlyContracts() {\\n        _checkHub();\\n        _;\\n    }\\n\\n    function _checkHubOwner() internal view virtual {\\n        require(msg.sender == hub.owner(), \\\"Fn can only be used by hub owner\\\");\\n    }\\n\\n    function _checkHub() internal view virtual {\\n        require(hub.isContract(msg.sender), \\\"Fn can only be called by the hub\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9cadb8d1ee628ef5ece2631ca5d622b30bfd54d4666812b401746a4e5643fbe\",\"license\":\"MIT\"},\"contracts/constants/IdentityConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint256 constant ADMIN_KEY = 1;\\nuint256 constant OPERATIONAL_KEY = 2;\\nuint256 constant ECDSA = 1;\\nuint256 constant RSA = 2;\\n\",\"keccak256\":\"0x29659af4aa4e72f889ceee74029f11aac7d40b5a3f6d3f55323863be1a2a587c\",\"license\":\"MIT\"},\"contracts/constants/ShardingTableConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nuint72 constant NULL = 0;\\n\",\"keccak256\":\"0xe80366170c622c9277da5d2bfbe7883b4b2e9d77c8f9407a3ce964c99ab24aa7\",\"license\":\"MIT\"},\"contracts/errors/GeneralErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary GeneralErrors {\\n    error OnlyHubOwnerFunction(address caller);\\n    error OnlyHubContractsFunction(address caller);\\n}\\n\",\"keccak256\":\"0x8b4676f9bcab2615efa6de8c4dd9a6b56a51388dd3dc4f3cab46b2951f3d53eb\",\"license\":\"MIT\"},\"contracts/interface/ICustodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ICustodian {\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf9c1575729c595ec1c4c6cec71e0890774efda80299b476b3c243b4fd168c69d\",\"license\":\"MIT\"},\"contracts/interface/IERC734Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IERC734Extended {\\n    event KeyAdded(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\\n    event KeyRemoved(uint72 indexed identityId, bytes32 indexed key, uint256 purpose, uint256 keyType);\\n\\n    struct Key {\\n        uint256 purpose; //e.g., ADMIN_KEY = 1, OPERATIONAL_KEY = 2, etc.\\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\\n        bytes32 key;\\n    }\\n\\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n\\n    function removeKey(uint72 identityId, bytes32 _key) external;\\n\\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n\\n    function getKey(\\n        uint72 identityId,\\n        bytes32 _key\\n    ) external view returns (uint256 purpose, uint256 keyType, bytes32 key);\\n\\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view returns (bytes32[] memory keys);\\n}\\n\",\"keccak256\":\"0xf96ebcda84c7f83dc1f91f97caf955724ef10c6f243a68f346e2715cc8700a88\",\"license\":\"MIT\"},\"contracts/interface/IHashFunction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IHashFunction {\\n    function hash(bytes calldata data) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2fca3d77fdcb26c5026f75259e19b326354d5c759775838fd070b49a766c75bd\",\"license\":\"MIT\"},\"contracts/interface/Indexable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Indexable {\\n    function id() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa5142e26633487e63c7448e3419186e24b97353b5d5c0b5b2886c2d15884cd9d\",\"license\":\"MIT\"},\"contracts/interface/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Initializable {\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0xac823de4540de0fac2d1ec548a5083404ab8abd858c34a69f4f8947b24789507\",\"license\":\"MIT\"},\"contracts/interface/Named.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Named {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb468c85b178d2377c1a6dd77f2e4f843fe280932663ffef8d9fba56dcdc7b796\",\"license\":\"MIT\"},\"contracts/interface/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface Versioned {\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6012f1a5c6b2fe5d8457ab1b913602c6f2d40dbea225bb4cec9fe3e325209f90\",\"license\":\"MIT\"},\"contracts/storage/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {IERC734Extended} from \\\"../interface/IERC734Extended.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ByteArr} from \\\"../utils/ByteArr.sol\\\";\\nimport {OPERATIONAL_KEY} from \\\"../constants/IdentityConstants.sol\\\";\\n\\ncontract IdentityStorage is IERC734Extended, Named, Versioned, HubDependent {\\n    using ByteArr for bytes32[];\\n\\n    string private constant _NAME = \\\"IdentityStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 private _identityId;\\n\\n    struct Identity {\\n        mapping(bytes32 => Key) keys;\\n        mapping(uint256 => bytes32[]) keysByPurpose;\\n    }\\n\\n    // operationalKey => identityId\\n    mapping(bytes32 => uint72) public identityIds;\\n    // identityId => Identity\\n    mapping(uint72 => Identity) internal identities;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        _identityId = 1;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function deleteIdentity(uint72 identityId) external onlyContracts {\\n        bytes32[] memory operationalKeys = identities[identityId].keysByPurpose[OPERATIONAL_KEY];\\n        uint256 operationalKeysNumber = operationalKeys.length;\\n\\n        for (uint256 i; i < operationalKeysNumber; ) {\\n            delete identityIds[operationalKeys[i]];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        delete identities[identityId];\\n    }\\n\\n    function addKey(uint72 identityId, bytes32 _key, uint256 _purpose, uint256 _type) external override onlyContracts {\\n        Identity storage identity = identities[identityId];\\n        identity.keys[_key].purpose = _purpose;\\n        identity.keys[_key].keyType = _type;\\n        identity.keys[_key].key = _key;\\n        identity.keysByPurpose[_purpose].push(_key);\\n\\n        emit KeyAdded(identityId, _key, _purpose, _type);\\n    }\\n\\n    function removeKey(uint72 identityId, bytes32 _key) external override onlyContracts {\\n        Identity storage identity = identities[identityId];\\n\\n        uint256 index;\\n        (index, ) = identity.keysByPurpose[identity.keys[_key].purpose].indexOf(_key);\\n        identity.keysByPurpose[identity.keys[_key].purpose].removeByIndex(index);\\n\\n        delete identity.keys[_key];\\n\\n        emit KeyRemoved(identityId, identity.keys[_key].key, identity.keys[_key].purpose, identity.keys[_key].keyType);\\n    }\\n\\n    function keyHasPurpose(uint72 identityId, bytes32 _key, uint256 _purpose) external view override returns (bool) {\\n        return identities[identityId].keys[_key].purpose == _purpose;\\n    }\\n\\n    function getKey(uint72 identityId, bytes32 _key) external view override returns (uint256, uint256, bytes32) {\\n        return (\\n            identities[identityId].keys[_key].purpose,\\n            identities[identityId].keys[_key].keyType,\\n            identities[identityId].keys[_key].key\\n        );\\n    }\\n\\n    function getKeysByPurpose(uint72 identityId, uint256 _purpose) external view override returns (bytes32[] memory) {\\n        return identities[identityId].keysByPurpose[_purpose];\\n    }\\n\\n    function getIdentityId(address operational) external view returns (uint72) {\\n        return identityIds[keccak256(abi.encodePacked(operational))];\\n    }\\n\\n    function setOperationalKeyIdentityId(bytes32 operationalKey, uint72 identityId) external onlyContracts {\\n        identityIds[operationalKey] = identityId;\\n    }\\n\\n    function removeOperationalKeyIdentityId(bytes32 operationalKey) external onlyContracts {\\n        delete identityIds[operationalKey];\\n    }\\n\\n    function generateIdentityId() external onlyContracts returns (uint72) {\\n        unchecked {\\n            return _identityId++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50d2f7a594213a4f2b6bf35019bafbab59b6a6b7cb151680031d3c8db572a0b1\",\"license\":\"MIT\"},\"contracts/storage/ParametersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ParametersStorage is Named, Versioned, HubDependent {\\n    event ParameterChanged(string parameterName, uint256 parameterValue);\\n\\n    string private constant _NAME = \\\"ParametersStorage\\\";\\n    string private constant _VERSION = \\\"1.1.0\\\";\\n\\n    // 0 - minProofWindowOffsetPerc\\n    // 1 - maxProofWindowOffsetPerc\\n    // 2 - commitWindowDurationPerc\\n    // 3 - proofWindowDurationPerc\\n    // 4 - replacementWindowDurationPerc\\n    // 5 - finalizationCommitsNumber\\n    uint8[6] internal args1;\\n\\n    // 0 - r0\\n    // 1 - r1\\n    // 2 - slashingFreezeDuration\\n    uint32[3] internal args2;\\n    uint48 public r2;\\n\\n    // 0 - minimumStake\\n    // 1 - maximumStake\\n    uint96[2] internal args3;\\n\\n    uint128 public epochLength;\\n\\n    // 0 - stakeWithdrawalDelay\\n    // 1 - rewardWithdrawalDelay\\n    uint24[2] internal args4;\\n\\n    uint16 public updateCommitWindowDuration;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        // minimumStake\\n        args3[0] = 50_000 ether;\\n        // maximumStake\\n        args3[1] = 5_000_000 ether;\\n\\n        r2 = 20;\\n        // r1\\n        args2[1] = 8;\\n        // r0\\n        args2[0] = 3;\\n\\n        // minProofWindowOffsetPerc\\n        args1[0] = 50;\\n        // maxProofWindowOffsetPerc\\n        args1[1] = 75;\\n        // commitWindowDurationPerc\\n        args1[2] = 25;\\n        // proofWindowDurationPerc\\n        args1[3] = 25;\\n        // replacementWindowDurationPerc\\n        args1[4] = 0;\\n\\n        epochLength = 90 days;\\n\\n        // stakeWithdrawalDelay\\n        args4[0] = 5 minutes;\\n        // rewardWithdrawalDelay\\n        args4[1] = 5 minutes;\\n        // slashingFreezeDuration\\n        args2[2] = 730 days;\\n\\n        updateCommitWindowDuration = 30 minutes;\\n\\n        // finalizationCommitsNumber\\n        args1[5] = 3;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function minimumStake() external view returns (uint96) {\\n        return args3[0];\\n    }\\n\\n    function setMinimumStake(uint96 newMinimumStake) external onlyHubOwner {\\n        args3[0] = newMinimumStake;\\n\\n        emit ParameterChanged(\\\"minimumStake\\\", newMinimumStake);\\n    }\\n\\n    function maximumStake() external view returns (uint96) {\\n        return args3[1];\\n    }\\n\\n    function setMaximumStake(uint96 newMaximumStake) external onlyHubOwner {\\n        args3[1] = newMaximumStake;\\n\\n        emit ParameterChanged(\\\"maximumStake\\\", newMaximumStake);\\n    }\\n\\n    function setR2(uint48 newR2) external onlyHubOwner {\\n        r2 = newR2;\\n\\n        emit ParameterChanged(\\\"r2\\\", newR2);\\n    }\\n\\n    function r1() external view returns (uint32) {\\n        return args2[1];\\n    }\\n\\n    function setR1(uint32 newR1) external onlyHubOwner {\\n        require(newR1 >= (2 * args2[0] - 1), \\\"R1 should be >= 2*R0-1\\\");\\n\\n        args2[1] = newR1;\\n\\n        emit ParameterChanged(\\\"r1\\\", newR1);\\n    }\\n\\n    function r0() external view returns (uint32) {\\n        return args2[0];\\n    }\\n\\n    function setR0(uint32 newR0) external onlyHubOwner {\\n        require(newR0 <= ((args2[1] + 1) / 2), \\\"R0 should be <= (R1+1)/2\\\");\\n\\n        args2[0] = newR0;\\n\\n        emit ParameterChanged(\\\"r0\\\", newR0);\\n    }\\n\\n    function minProofWindowOffsetPerc() external view returns (uint8) {\\n        return args1[0];\\n    }\\n\\n    function setMinProofWindowOffsetPerc(uint8 newMinProofWindowOffsetPerc) external onlyHubOwner {\\n        args1[0] = newMinProofWindowOffsetPerc;\\n\\n        emit ParameterChanged(\\\"minProofWindowOffsetPerc\\\", newMinProofWindowOffsetPerc);\\n    }\\n\\n    function maxProofWindowOffsetPerc() external view returns (uint8) {\\n        return args1[1];\\n    }\\n\\n    function setMaxProofWindowOffsetPerc(uint8 newMaxProofWindowOffsetPerc) external onlyHubOwner {\\n        args1[1] = newMaxProofWindowOffsetPerc;\\n\\n        emit ParameterChanged(\\\"maxProofWindowOffsetPerc\\\", newMaxProofWindowOffsetPerc);\\n    }\\n\\n    function commitWindowDurationPerc() external view returns (uint8) {\\n        return args1[2];\\n    }\\n\\n    function setCommitWindowDurationPerc(uint8 newCommitWindowDurationPerc) external onlyHubOwner {\\n        args1[2] = newCommitWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"commitWindowDurationPerc\\\", newCommitWindowDurationPerc);\\n    }\\n\\n    function proofWindowDurationPerc() external view returns (uint8) {\\n        return args1[3];\\n    }\\n\\n    function setProofWindowDurationPerc(uint8 newProofWindowDurationPerc) external onlyHubOwner {\\n        args1[3] = newProofWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"proofWindowDurationPerc\\\", newProofWindowDurationPerc);\\n    }\\n\\n    function replacementWindowDurationPerc() external view returns (uint8) {\\n        return args1[4];\\n    }\\n\\n    function setReplacementWindowDurationPerc(uint8 newReplacementWindowDurationPerc) external onlyHubOwner {\\n        args1[4] = newReplacementWindowDurationPerc;\\n\\n        emit ParameterChanged(\\\"replacementWindowDurationPerc\\\", newReplacementWindowDurationPerc);\\n    }\\n\\n    function setEpochLength(uint128 newEpochLength) external onlyHubOwner {\\n        epochLength = newEpochLength;\\n\\n        emit ParameterChanged(\\\"epochLength\\\", newEpochLength);\\n    }\\n\\n    function stakeWithdrawalDelay() external view returns (uint24) {\\n        return args4[0];\\n    }\\n\\n    function setStakeWithdrawalDelay(uint24 newStakeWithdrawalDelay) external onlyHubOwner {\\n        args4[0] = newStakeWithdrawalDelay;\\n\\n        emit ParameterChanged(\\\"stakeWithdrawalDelay\\\", newStakeWithdrawalDelay);\\n    }\\n\\n    function rewardWithdrawalDelay() external view returns (uint24) {\\n        return args4[1];\\n    }\\n\\n    function setRewardWithdrawalDelay(uint24 newRewardWithdrawalDelay) external onlyHubOwner {\\n        args4[1] = newRewardWithdrawalDelay;\\n\\n        emit ParameterChanged(\\\"rewardWithdrawalDelay\\\", newRewardWithdrawalDelay);\\n    }\\n\\n    function slashingFreezeDuration() external view returns (uint32) {\\n        return args2[2];\\n    }\\n\\n    function setSlashingFreezeDuration(uint32 newSlashingFreezeDuration) external onlyHubOwner {\\n        args2[2] = newSlashingFreezeDuration;\\n\\n        emit ParameterChanged(\\\"slashingFreezeDuration\\\", newSlashingFreezeDuration);\\n    }\\n\\n    function setUpdateCommitWindowDuration(uint16 newUpdateCommitWindowDuration) external onlyHubOwner {\\n        updateCommitWindowDuration = newUpdateCommitWindowDuration;\\n\\n        emit ParameterChanged(\\\"updateCommitWindowDuration\\\", newUpdateCommitWindowDuration);\\n    }\\n\\n    function finalizationCommitsNumber() external view returns (uint8) {\\n        return args1[5];\\n    }\\n\\n    function setFinalizationCommitsNumber(uint8 newFinalizationCommitsNumber) external onlyHubOwner {\\n        args1[5] = newFinalizationCommitsNumber;\\n\\n        emit ParameterChanged(\\\"finalizationCommitsNumber\\\", newFinalizationCommitsNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xcf85cdc898aa106de1841fc603229d8a8985c1bed128e8efd3c2e827b9c0cca1\",\"license\":\"MIT\"},\"contracts/storage/ProfileStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Shares} from \\\"../Shares.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract ProfileStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ProfileStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct ProfileDefinition {\\n        bytes nodeId;\\n        uint96 ask;\\n        uint96 accumulatedOperatorFee;\\n        uint96 accumulatedOperatorFeeWithdrawalAmount;\\n        uint256 operatorFeeWithdrawalTimestamp;\\n        address sharesContractAddress;\\n        mapping(uint8 => bytes32) nodeAddresses;\\n    }\\n\\n    // nodeId => isRegistered?\\n    mapping(bytes => bool) public nodeIdsList;\\n    // identityId => Profile\\n    mapping(uint72 => ProfileDefinition) internal profiles;\\n\\n    // shares token name => isTaken?\\n    mapping(string => bool) public sharesNames;\\n    // shares token ID => isTaken?\\n    mapping(string => bool) public sharesSymbols;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createProfile(\\n        uint72 identityId,\\n        bytes calldata nodeId,\\n        address sharesContractAddress\\n    ) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        profile.nodeId = nodeId;\\n        profile.sharesContractAddress = sharesContractAddress;\\n\\n        nodeIdsList[nodeId] = true;\\n\\n        Shares sharesContract = Shares(sharesContractAddress);\\n        sharesNames[sharesContract.name()] = true;\\n        sharesSymbols[sharesContract.symbol()] = true;\\n    }\\n\\n    function getProfile(\\n        uint72 identityId\\n    ) external view returns (bytes memory nodeId, uint96[2] memory profileSettings, address sharesContractAddress) {\\n        ProfileDefinition storage profile = profiles[identityId];\\n        return (profile.nodeId, [profile.ask, profile.accumulatedOperatorFee], profile.sharesContractAddress);\\n    }\\n\\n    function deleteProfile(uint72 identityId) external onlyContracts {\\n        nodeIdsList[profiles[identityId].nodeId] = false;\\n        delete profiles[identityId];\\n    }\\n\\n    function getNodeId(uint72 identityId) external view returns (bytes memory) {\\n        return profiles[identityId].nodeId;\\n    }\\n\\n    function setNodeId(uint72 identityId, bytes calldata nodeId) external onlyContracts {\\n        ProfileDefinition storage profile = profiles[identityId];\\n\\n        nodeIdsList[profile.nodeId] = false;\\n        profile.nodeId = nodeId;\\n        nodeIdsList[nodeId] = true;\\n    }\\n\\n    function getAsk(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].ask;\\n    }\\n\\n    function setAsk(uint72 identityId, uint96 ask) external onlyContracts {\\n        profiles[identityId].ask = ask;\\n    }\\n\\n    function getAccumulatedOperatorFee(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFee;\\n    }\\n\\n    function setAccumulatedOperatorFee(uint72 identityId, uint96 newOperatorFeeAmount) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFee = newOperatorFeeAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalAmount(uint72 identityId) external view returns (uint96) {\\n        return profiles[identityId].accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalAmount(\\n        uint72 identityId,\\n        uint96 accumulatedOperatorFeeWithdrawalAmount\\n    ) external onlyContracts {\\n        profiles[identityId].accumulatedOperatorFeeWithdrawalAmount = accumulatedOperatorFeeWithdrawalAmount;\\n    }\\n\\n    function getAccumulatedOperatorFeeWithdrawalTimestamp(uint72 identityId) external view returns (uint256) {\\n        return profiles[identityId].operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function setAccumulatedOperatorFeeWithdrawalTimestamp(\\n        uint72 identityId,\\n        uint256 operatorFeeWithdrawalTimestamp\\n    ) external onlyContracts {\\n        profiles[identityId].operatorFeeWithdrawalTimestamp = operatorFeeWithdrawalTimestamp;\\n    }\\n\\n    function getSharesContractAddress(uint72 identityId) external view returns (address) {\\n        return profiles[identityId].sharesContractAddress;\\n    }\\n\\n    function setSharesContractAddress(uint72 identityId, address sharesContractAddress) external onlyContracts {\\n        profiles[identityId].sharesContractAddress = sharesContractAddress;\\n    }\\n\\n    function getNodeAddress(uint72 identityId, uint8 hashFunctionId) external view returns (bytes32) {\\n        return profiles[identityId].nodeAddresses[hashFunctionId];\\n    }\\n\\n    function setNodeAddress(uint72 identityId, uint8 hashFunctionId, bytes32 nodeAddress) external onlyContracts {\\n        profiles[identityId].nodeAddresses[hashFunctionId] = nodeAddress;\\n    }\\n\\n    function profileExists(uint72 identityId) external view returns (bool) {\\n        return keccak256(profiles[identityId].nodeId) != keccak256(bytes(\\\"\\\"));\\n    }\\n\\n    function transferAccumulatedOperatorFee(address receiver, uint96 amount) external onlyContracts {\\n        tokenContract.transfer(receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x658280fecb28870447d89924e8114b8847a3107b674ca5c27d402499b1921332\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {ServiceAgreementStorageV1} from \\\"./ServiceAgreementStorageV1.sol\\\";\\nimport {ServiceAgreementStorageV1U1} from \\\"./ServiceAgreementStorageV1U1.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Initializable} from \\\"../interface/Initializable.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {GeneralErrors} from \\\"../errors/GeneralErrors.sol\\\";\\n\\ncontract ServiceAgreementStorageProxy is Named, Versioned, HubDependent, Initializable {\\n    string private constant _NAME = \\\"ServiceAgreementStorageProxy\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    ServiceAgreementStorageV1 public storageV1;\\n    ServiceAgreementStorageV1U1 public storageV1U1;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) HubDependent(hubAddress) {}\\n\\n    function initialize() public onlyHubOwner {\\n        storageV1 = ServiceAgreementStorageV1(hub.getContractAddress(\\\"ServiceAgreementStorageV1\\\"));\\n        storageV1U1 = ServiceAgreementStorageV1U1(hub.getContractAddress(\\\"ServiceAgreementStorageV1U1\\\"));\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function migrateV1ServiceAgreement(bytes32 agreementId) external onlyContracts {\\n        ServiceAgreementStorageV1 sasV1 = storageV1;\\n        ServiceAgreementStorageV1U1 sasV1U1 = storageV1U1;\\n\\n        uint96 tokenAmount = sasV1.getAgreementTokenAmount(agreementId);\\n\\n        sasV1.deleteServiceAgreementObject(agreementId);\\n\\n        sasV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        sasV1.transferAgreementTokens(address(sasV1U1), tokenAmount);\\n    }\\n\\n    function createV1U1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1U1.createServiceAgreementObject(\\n            agreementId,\\n            startTime,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function createV1ServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        storageV1.createServiceAgreementObject(\\n            agreementId,\\n            epochsNumber,\\n            epochLength,\\n            tokenAmount,\\n            scoreFunctionId,\\n            proofWindowOffsetPerc\\n        );\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.deleteServiceAgreementObject(agreementId);\\n        } else {\\n            storageV1U1.deleteServiceAgreementObject(agreementId);\\n        }\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        if (this.agreementV1Exists(agreementId)) {\\n            uint96 tokenAmount;\\n            (startTime, epochsNumber, epochLength, tokenAmount, scoreFunctionIdAndProofWindowOffsetPerc) = storageV1\\n                .getAgreementData(agreementId);\\n            return (\\n                startTime,\\n                epochsNumber,\\n                epochLength,\\n                [tokenAmount, storageV1U1.getAgreementUpdateTokenAmount(agreementId)],\\n                scoreFunctionIdAndProofWindowOffsetPerc\\n            );\\n        } else {\\n            return storageV1U1.getAgreementData(agreementId);\\n        }\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementStartTime(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementStartTime(agreementId);\\n        }\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementStartTime(agreementId, startTime);\\n        } else {\\n            storageV1U1.setAgreementStartTime(agreementId, startTime);\\n        }\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochsNumber(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochsNumber(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        } else {\\n            storageV1U1.setAgreementEpochsNumber(agreementId, epochsNumber);\\n        }\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementEpochLength(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementEpochLength(agreementId);\\n        }\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementEpochLength(agreementId, epochLength);\\n        } else {\\n            storageV1U1.setAgreementEpochLength(agreementId, epochLength);\\n        }\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementTokenAmount(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementTokenAmount(agreementId);\\n        }\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        } else {\\n            storageV1U1.setAgreementTokenAmount(agreementId, tokenAmount);\\n        }\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return storageV1U1.getAgreementUpdateTokenAmount(agreementId);\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        storageV1U1.setAgreementUpdateTokenAmount(agreementId, updateTokenAmount);\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementScoreFunctionId(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementScoreFunctionId(agreementId);\\n        }\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        } else {\\n            storageV1U1.setAgreementScoreFunctionId(agreementId, newScoreFunctionId);\\n        }\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementProofWindowOffsetPerc(agreementId);\\n        } else {\\n            return storageV1U1.getAgreementProofWindowOffsetPerc(agreementId);\\n        }\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        } else {\\n            storageV1U1.setAgreementProofWindowOffsetPerc(agreementId, proofWindowOffsetPerc);\\n        }\\n    }\\n\\n    function getV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return storageV1U1.getAgreementEpochSubmissionHead(agreementId, epoch, stateIndex);\\n    }\\n\\n    function getV1AgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return storageV1.getAgreementEpochSubmissionHead(agreementId, epoch);\\n    }\\n\\n    function setV1U1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1U1.setAgreementEpochSubmissionHead(agreementId, epoch, stateIndex, headCommitId);\\n    }\\n\\n    function setV1AgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        storageV1.setAgreementEpochSubmissionHead(agreementId, epoch, headCommitId);\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.incrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            storageV1U1.decrementAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        if (this.agreementV1Exists(agreementId)) {\\n            return storageV1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        } else {\\n            return storageV1U1.getAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        } else {\\n            storageV1U1.setAgreementRewardedNodesNumber(agreementId, epoch, rewardedNodesNumber);\\n        }\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.setAgreementRewardedNodesNumber(agreementId, epoch, 0);\\n        } else {\\n            storageV1U1.deleteAgreementRewardedNodesNumber(agreementId, epoch);\\n        }\\n    }\\n\\n    function createV1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1.createCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function createV1U1CommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        storageV1U1.createEpochStateCommitSubmissionObject(commitId, identityId, prevIdentityId, nextIdentityId, score);\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.deleteEpochStateCommitSubmissionsObject(commitId);\\n        } else {\\n            storageV1.deleteCommitSubmissionsObject(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmission(commitId);\\n        } else {\\n            return storageV1.getCommitSubmission(commitId);\\n        }\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionIdentityId(commitId, identityId);\\n        } else {\\n            storageV1.setCommitSubmissionIdentityId(commitId, identityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionPrevIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionPrevIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionPrevIdentityId(commitId, prevIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionNextIdentityId(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionNextIdentityId(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        } else {\\n            storageV1.setCommitSubmissionNextIdentityId(commitId, nextIdentityId);\\n        }\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.getEpochStateCommitSubmissionScore(commitId);\\n        } else {\\n            return storageV1.getCommitSubmissionScore(commitId);\\n        }\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        if (this.commitV1U1Exists(commitId)) {\\n            storageV1U1.setEpochStateCommitSubmissionScore(commitId, score);\\n        } else {\\n            storageV1.setCommitSubmissionScore(commitId, score);\\n        }\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        if (this.commitV1U1Exists(commitId)) {\\n            return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n        } else {\\n            return storageV1.commitSubmissionExists(commitId);\\n        }\\n    }\\n\\n    function incrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.incrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function decrementCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.decrementEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return storageV1U1.getEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function setCommitsCount(bytes32 epochStateId, uint8 epochStateCommitsCount) external onlyContracts {\\n        storageV1U1.setEpochStateCommitsCount(epochStateId, epochStateCommitsCount);\\n    }\\n\\n    function deleteCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        storageV1U1.deleteEpochStateCommitsCount(epochStateId);\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return storageV1U1.getUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        storageV1U1.setUpdateCommitsDeadline(stateId, deadline);\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        storageV1U1.deleteUpdateCommitsDeadline(stateId);\\n    }\\n\\n    function transferAgreementTokens(bytes32 agreementId, address receiver, uint96 tokenAmount) external onlyContracts {\\n        if (this.agreementV1Exists(agreementId)) {\\n            storageV1.transferAgreementTokens(receiver, tokenAmount);\\n        } else {\\n            storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n        }\\n    }\\n\\n    function transferV1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function transferV1U1AgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        storageV1U1.transferAgreementTokens(receiver, tokenAmount);\\n    }\\n\\n    function agreementV1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function agreementV1U1Exists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return storageV1.serviceAgreementExists(agreementId) || storageV1U1.serviceAgreementExists(agreementId);\\n    }\\n\\n    function commitV1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1.commitSubmissionExists(commitId);\\n    }\\n\\n    function commitV1U1Exists(bytes32 commitId) external view returns (bool) {\\n        return storageV1U1.epochStateCommitSubmissionExists(commitId);\\n    }\\n\\n    function agreementV1StorageAddress() external view returns (address) {\\n        return address(storageV1);\\n    }\\n\\n    function agreementV1U1StorageAddress() external view returns (address) {\\n        return address(storageV1U1);\\n    }\\n}\\n\",\"keccak256\":\"0x3615c48f64deb12c57692b15a052d523c3da362dd3c927ec3f2902a7c5307a06\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // CommitId [keccak256(agreementId + epoch + identityId)] => CommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal commitSubmissions;\\n\\n    // AgreementId [hash(asset type contract + tokenId + key)] => ServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ServiceAgreement) internal serviceAgreements;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = block.timestamp;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96 tokenAmount,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            serviceAgreements[agreementId].tokenAmount,\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(bytes32 agreementId, uint16 epoch) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[epoch];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[epoch] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        commitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return commitSubmissions[commitId];\\n    }\\n\\n    function getCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].identityId;\\n    }\\n\\n    function setCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        commitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setCommitSubmissionPrevIdentityId(bytes32 commitId, uint72 prevIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return commitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setCommitSubmissionNextIdentityId(bytes32 commitId, uint72 nextIdentityId) external onlyContracts {\\n        commitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return commitSubmissions[commitId].score;\\n    }\\n\\n    function setCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        commitSubmissions[commitId].score = score;\\n    }\\n\\n    function commitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return commitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c2b2d43615369d9fe71beb9d4267ea40c46fb416d4c7b22ab81272a2c690117\",\"license\":\"MIT\"},\"contracts/storage/ServiceAgreementStorageV1U1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ServiceAgreementStructsV1} from \\\"../structs/ServiceAgreementStructsV1.sol\\\";\\n\\ncontract ServiceAgreementStorageV1U1 is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"ServiceAgreementStorageV1U1\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    // AgreementId [hash(assetStorage + tokenId + key)] => ExtendedServiceAgreement\\n    mapping(bytes32 => ServiceAgreementStructsV1.ExtendedServiceAgreement) internal serviceAgreements;\\n\\n    // CommitId [keccak256(agreementId + epoch + stateIndex + identityId)] => stateCommitSubmission\\n    mapping(bytes32 => ServiceAgreementStructsV1.CommitSubmission) internal epochStateCommitSubmissions;\\n\\n    // EpochStateId [keccak256(agreementId + epoch + stateIndex)] => epochStateCommitsCount\\n    mapping(bytes32 => uint8) internal epochStateCommitsCount;\\n\\n    // StateId [keccak256(agreementId + stateIndex)] => updateCommitsDeadline\\n    mapping(bytes32 => uint256) internal updateCommitsDeadlines;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function createServiceAgreementObject(\\n        bytes32 agreementId,\\n        uint256 startTime,\\n        uint16 epochsNumber,\\n        uint128 epochLength,\\n        uint96 tokenAmount,\\n        uint8 scoreFunctionId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        ServiceAgreementStructsV1.ExtendedServiceAgreement storage agreement = serviceAgreements[agreementId];\\n        agreement.startTime = startTime;\\n        agreement.epochsNumber = epochsNumber;\\n        agreement.epochLength = epochLength;\\n        agreement.tokenAmount = tokenAmount;\\n        agreement.scoreFunctionId = scoreFunctionId;\\n        agreement.proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function deleteServiceAgreementObject(bytes32 agreementId) external onlyContracts {\\n        delete serviceAgreements[agreementId];\\n    }\\n\\n    function getAgreementData(\\n        bytes32 agreementId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint16 epochsNumber,\\n            uint128 epochLength,\\n            uint96[2] memory tokens,\\n            uint8[2] memory scoreFunctionIdAndProofWindowOffsetPerc\\n        )\\n    {\\n        return (\\n            serviceAgreements[agreementId].startTime,\\n            serviceAgreements[agreementId].epochsNumber,\\n            serviceAgreements[agreementId].epochLength,\\n            [serviceAgreements[agreementId].tokenAmount, serviceAgreements[agreementId].updateTokenAmount],\\n            [serviceAgreements[agreementId].scoreFunctionId, serviceAgreements[agreementId].proofWindowOffsetPerc]\\n        );\\n    }\\n\\n    function getAgreementStartTime(bytes32 agreementId) external view returns (uint256) {\\n        return serviceAgreements[agreementId].startTime;\\n    }\\n\\n    function setAgreementStartTime(bytes32 agreementId, uint256 startTime) external onlyContracts {\\n        serviceAgreements[agreementId].startTime = startTime;\\n    }\\n\\n    function getAgreementEpochsNumber(bytes32 agreementId) external view returns (uint16) {\\n        return serviceAgreements[agreementId].epochsNumber;\\n    }\\n\\n    function setAgreementEpochsNumber(bytes32 agreementId, uint16 epochsNumber) external onlyContracts {\\n        serviceAgreements[agreementId].epochsNumber = epochsNumber;\\n    }\\n\\n    function getAgreementEpochLength(bytes32 agreementId) external view returns (uint128) {\\n        return serviceAgreements[agreementId].epochLength;\\n    }\\n\\n    function setAgreementEpochLength(bytes32 agreementId, uint128 epochLength) external onlyContracts {\\n        serviceAgreements[agreementId].epochLength = epochLength;\\n    }\\n\\n    function getAgreementTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].tokenAmount;\\n    }\\n\\n    function setAgreementTokenAmount(bytes32 agreementId, uint96 tokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].tokenAmount = tokenAmount;\\n    }\\n\\n    function getAgreementUpdateTokenAmount(bytes32 agreementId) external view returns (uint96) {\\n        return serviceAgreements[agreementId].updateTokenAmount;\\n    }\\n\\n    function setAgreementUpdateTokenAmount(bytes32 agreementId, uint96 updateTokenAmount) external onlyContracts {\\n        serviceAgreements[agreementId].updateTokenAmount = updateTokenAmount;\\n    }\\n\\n    function getAgreementScoreFunctionId(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].scoreFunctionId;\\n    }\\n\\n    function setAgreementScoreFunctionId(bytes32 agreementId, uint8 newScoreFunctionId) external onlyContracts {\\n        serviceAgreements[agreementId].scoreFunctionId = newScoreFunctionId;\\n    }\\n\\n    function getAgreementProofWindowOffsetPerc(bytes32 agreementId) external view returns (uint8) {\\n        return serviceAgreements[agreementId].proofWindowOffsetPerc;\\n    }\\n\\n    function setAgreementProofWindowOffsetPerc(\\n        bytes32 agreementId,\\n        uint8 proofWindowOffsetPerc\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].proofWindowOffsetPerc = proofWindowOffsetPerc;\\n    }\\n\\n    function getAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex\\n    ) external view returns (bytes32) {\\n        return serviceAgreements[agreementId].epochSubmissionHeads[keccak256(abi.encodePacked(epoch, stateIndex))];\\n    }\\n\\n    function setAgreementEpochSubmissionHead(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint256 stateIndex,\\n        bytes32 headCommitId\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].epochSubmissionHeads[\\n            keccak256(abi.encodePacked(epoch, stateIndex))\\n        ] = headCommitId;\\n    }\\n\\n    function incrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]++;\\n    }\\n\\n    function decrementAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch]--;\\n    }\\n\\n    function getAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external view returns (uint32) {\\n        return serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function setAgreementRewardedNodesNumber(\\n        bytes32 agreementId,\\n        uint16 epoch,\\n        uint32 rewardedNodesNumber\\n    ) external onlyContracts {\\n        serviceAgreements[agreementId].rewardedNodesNumber[epoch] = rewardedNodesNumber;\\n    }\\n\\n    function deleteAgreementRewardedNodesNumber(bytes32 agreementId, uint16 epoch) external onlyContracts {\\n        delete serviceAgreements[agreementId].rewardedNodesNumber[epoch];\\n    }\\n\\n    function serviceAgreementExists(bytes32 agreementId) external view returns (bool) {\\n        return serviceAgreements[agreementId].startTime != 0;\\n    }\\n\\n    function createEpochStateCommitSubmissionObject(\\n        bytes32 commitId,\\n        uint72 identityId,\\n        uint72 prevIdentityId,\\n        uint72 nextIdentityId,\\n        uint40 score\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId] = ServiceAgreementStructsV1.CommitSubmission({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId,\\n            score: score\\n        });\\n    }\\n\\n    function deleteEpochStateCommitSubmissionsObject(bytes32 commitId) external onlyContracts {\\n        delete epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmission(\\n        bytes32 commitId\\n    ) external view returns (ServiceAgreementStructsV1.CommitSubmission memory) {\\n        return epochStateCommitSubmissions[commitId];\\n    }\\n\\n    function getEpochStateCommitSubmissionIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].identityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionIdentityId(bytes32 commitId, uint72 identityId) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].identityId = identityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionPrevIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].prevIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionPrevIdentityId(\\n        bytes32 commitId,\\n        uint72 prevIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].prevIdentityId = prevIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionNextIdentityId(bytes32 commitId) external view returns (uint72) {\\n        return epochStateCommitSubmissions[commitId].nextIdentityId;\\n    }\\n\\n    function setEpochStateCommitSubmissionNextIdentityId(\\n        bytes32 commitId,\\n        uint72 nextIdentityId\\n    ) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].nextIdentityId = nextIdentityId;\\n    }\\n\\n    function getEpochStateCommitSubmissionScore(bytes32 commitId) external view returns (uint40) {\\n        return epochStateCommitSubmissions[commitId].score;\\n    }\\n\\n    function setEpochStateCommitSubmissionScore(bytes32 commitId, uint40 score) external onlyContracts {\\n        epochStateCommitSubmissions[commitId].score = score;\\n    }\\n\\n    function epochStateCommitSubmissionExists(bytes32 commitId) external view returns (bool) {\\n        return epochStateCommitSubmissions[commitId].identityId != 0;\\n    }\\n\\n    function incrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]++;\\n    }\\n\\n    function decrementEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        epochStateCommitsCount[epochStateId]--;\\n    }\\n\\n    function getEpochStateCommitsCount(bytes32 epochStateId) external view returns (uint8) {\\n        return epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function setEpochStateCommitsCount(bytes32 epochStateId, uint8 newEpochStateCommitsCount) external onlyContracts {\\n        epochStateCommitsCount[epochStateId] = newEpochStateCommitsCount;\\n    }\\n\\n    function deleteEpochStateCommitsCount(bytes32 epochStateId) external onlyContracts {\\n        delete epochStateCommitsCount[epochStateId];\\n    }\\n\\n    function getUpdateCommitsDeadline(bytes32 stateId) external view returns (uint256) {\\n        return updateCommitsDeadlines[stateId];\\n    }\\n\\n    function setUpdateCommitsDeadline(bytes32 stateId, uint256 deadline) external onlyContracts {\\n        updateCommitsDeadlines[stateId] = deadline;\\n    }\\n\\n    function deleteUpdateCommitsDeadline(bytes32 stateId) external onlyContracts {\\n        delete updateCommitsDeadlines[stateId];\\n    }\\n\\n    function transferAgreementTokens(address receiver, uint96 tokenAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d25de399b6bccc3a892d0f71abd185892b50a717106fe88328a42fc1e52d98\",\"license\":\"MIT\"},\"contracts/storage/ShardingTableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\nimport {ShardingTableStructs} from \\\"../structs/ShardingTableStructs.sol\\\";\\nimport {NULL} from \\\"../constants/ShardingTableConstants.sol\\\";\\n\\ncontract ShardingTableStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"ShardingTableStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    uint72 public head;\\n    uint72 public tail;\\n    uint72 public nodesCount;\\n\\n    // identityId => Node\\n    mapping(uint72 => ShardingTableStructs.Node) internal nodes;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        head = NULL;\\n        tail = NULL;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function incrementNodesCount() external onlyContracts {\\n        nodesCount++;\\n    }\\n\\n    function decrementNodesCount() external onlyContracts {\\n        nodesCount--;\\n    }\\n\\n    function setHead(uint72 identityId) external onlyContracts {\\n        head = identityId;\\n    }\\n\\n    function setTail(uint72 identityId) external onlyContracts {\\n        tail = identityId;\\n    }\\n\\n    function createNodeObject(uint72 identityId, uint72 prevIdentityId, uint72 nextIdentityId) external onlyContracts {\\n        nodes[identityId] = ShardingTableStructs.Node({\\n            identityId: identityId,\\n            prevIdentityId: prevIdentityId,\\n            nextIdentityId: nextIdentityId\\n        });\\n    }\\n\\n    function getNode(uint72 identityId) external view returns (ShardingTableStructs.Node memory) {\\n        return nodes[identityId];\\n    }\\n\\n    function deleteNodeObject(uint72 identityId) external onlyContracts {\\n        delete nodes[identityId];\\n    }\\n\\n    function nodeExists(uint72 identityId) external view returns (bool) {\\n        return nodes[identityId].identityId != 0;\\n    }\\n\\n    function setPrevIdentityId(uint72 identityId, uint72 newPrevIdentityId) external onlyContracts {\\n        nodes[identityId].prevIdentityId = newPrevIdentityId;\\n    }\\n\\n    function setNextIdentityId(uint72 identityId, uint72 newNextIdentityId) external onlyContracts {\\n        nodes[identityId].nextIdentityId = newNextIdentityId;\\n    }\\n\\n    function getMultipleNodes(\\n        uint72 firstIdentityId,\\n        uint16 nodesNumber\\n    ) external view returns (ShardingTableStructs.Node[] memory) {\\n        ShardingTableStructs.Node[] memory nodesPage = new ShardingTableStructs.Node[](nodesNumber);\\n\\n        ShardingTableStructs.Node memory currentNode = nodes[firstIdentityId];\\n        for (uint256 i; i < nodesNumber; ) {\\n            nodesPage[i] = currentNode;\\n            currentNode = nodes[currentNode.nextIdentityId];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        return nodesPage;\\n    }\\n\\n    function link(uint72 leftNodeIdentityId, uint72 rightNodeIdentityId) external onlyContracts {\\n        nodes[leftNodeIdentityId].nextIdentityId = rightNodeIdentityId;\\n        nodes[rightNodeIdentityId].prevIdentityId = leftNodeIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xac72b874995c1c6d181539ef17b90b5165f242076235e4c05282f2bd0311f3cf\",\"license\":\"MIT\"},\"contracts/storage/StakingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Guardian} from \\\"../Guardian.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract StakingStorage is Named, Versioned, Guardian {\\n    string private constant _NAME = \\\"StakingStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    struct WithdrawalRequest {\\n        uint96 amount;\\n        uint256 timestamp;\\n    }\\n\\n    // identityId => totalStake\\n    mapping(uint72 => uint96) public totalStakes;\\n\\n    // identityId => operatorFee\\n    mapping(uint72 => uint96) public operatorFees;\\n\\n    // identityId => withdrawalRequest\\n    mapping(uint72 => mapping(address => WithdrawalRequest)) public withdrawalRequests;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address hubAddress) Guardian(hubAddress) {}\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function setTotalStake(uint72 identityId, uint96 newTotalStake) external onlyContracts {\\n        totalStakes[identityId] = newTotalStake;\\n    }\\n\\n    function setOperatorFee(uint72 identityId, uint96 operatorFee) external onlyContracts {\\n        operatorFees[identityId] = operatorFee;\\n    }\\n\\n    function createWithdrawalRequest(\\n        uint72 identityId,\\n        address staker,\\n        uint96 amount,\\n        uint256 timestamp\\n    ) external onlyContracts {\\n        withdrawalRequests[identityId][staker] = WithdrawalRequest({amount: amount, timestamp: timestamp});\\n    }\\n\\n    function deleteWithdrawalRequest(uint72 identityId, address staker) external onlyContracts {\\n        delete withdrawalRequests[identityId][staker];\\n    }\\n\\n    function getWithdrawalRequestAmount(uint72 identityId, address staker) external view returns (uint96) {\\n        return withdrawalRequests[identityId][staker].amount;\\n    }\\n\\n    function getWithdrawalRequestTimestamp(uint72 identityId, address staker) external view returns (uint256) {\\n        return withdrawalRequests[identityId][staker].timestamp;\\n    }\\n\\n    function withdrawalRequestExists(uint72 identityId, address staker) external view returns (bool) {\\n        return withdrawalRequests[identityId][staker].amount != 0;\\n    }\\n\\n    function transferStake(address receiver, uint96 stakeAmount) external onlyContracts {\\n        tokenContract.transfer(receiver, stakeAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x1901534fb150957d6433fa06b6a59a2c2d1594fc9b9a4e9901f024fea947a4db\",\"license\":\"MIT\"},\"contracts/storage/WhitelistStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {HubDependent} from \\\"../abstract/HubDependent.sol\\\";\\nimport {Named} from \\\"../interface/Named.sol\\\";\\nimport {Versioned} from \\\"../interface/Versioned.sol\\\";\\n\\ncontract WhitelistStorage is Named, Versioned, HubDependent {\\n    string private constant _NAME = \\\"WhitelistStorage\\\";\\n    string private constant _VERSION = \\\"1.0.0\\\";\\n\\n    bool public whitelistingEnabled;\\n\\n    mapping(address => bool) public whitelisted;\\n\\n    constructor(address hubAddress) HubDependent(hubAddress) {\\n        whitelistingEnabled = false;\\n    }\\n\\n    function name() external pure virtual override returns (string memory) {\\n        return _NAME;\\n    }\\n\\n    function version() external pure virtual override returns (string memory) {\\n        return _VERSION;\\n    }\\n\\n    function whitelistAddress(address addr) external onlyHubOwner {\\n        whitelisted[addr] = true;\\n    }\\n\\n    function blacklistAddress(address addr) external onlyHubOwner {\\n        whitelisted[addr] = false;\\n    }\\n\\n    function enableWhitelist() external onlyHubOwner {\\n        whitelistingEnabled = true;\\n    }\\n\\n    function disableWhitelist() external onlyHubOwner {\\n        whitelistingEnabled = false;\\n    }\\n}\\n\",\"keccak256\":\"0xa13a9a92d3bd5bc1d2e9672d2d71fd97e689f5a2c02028292b17f5d10f1b4bf7\",\"license\":\"MIT\"},\"contracts/structs/ServiceAgreementStructsV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ServiceAgreementStructsV1 {\\n    struct CommitSubmission {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n        uint40 score;\\n    }\\n\\n    struct ServiceAgreementInputArgs {\\n        address assetCreator;\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epochsNumber;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n    }\\n\\n    struct ServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // epoch => headCommitId\\n        mapping(uint16 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct ExtendedServiceAgreement {\\n        uint256 startTime;\\n        uint16 epochsNumber;\\n        uint128 epochLength;\\n        uint96 tokenAmount;\\n        uint96 updateTokenAmount;\\n        uint8 scoreFunctionId;\\n        uint8 proofWindowOffsetPerc;\\n        // keccak256(epoch + stateIndex) => headCommitId\\n        mapping(bytes32 => bytes32) epochSubmissionHeads;\\n        // epoch => number of nodes received rewards\\n        mapping(uint16 => uint32) rewardedNodesNumber;\\n    }\\n\\n    struct CommitInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n    }\\n\\n    struct ProofInputArgs {\\n        address assetContract;\\n        uint256 tokenId;\\n        bytes keyword;\\n        uint8 hashFunctionId;\\n        uint16 epoch;\\n        bytes32[] proof;\\n        bytes32 chunkHash;\\n    }\\n}\\n\",\"keccak256\":\"0x5b33bc12e685dacf652dfe81b7fff14806297132be7df872c45a598ff783d638\",\"license\":\"MIT\"},\"contracts/structs/ShardingTableStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ShardingTableStructs {\\n    struct NodeInfo {\\n        bytes nodeId;\\n        uint72 identityId;\\n        uint96 ask;\\n        uint96 stake;\\n    }\\n\\n    struct Node {\\n        uint72 identityId;\\n        uint72 prevIdentityId;\\n        uint72 nextIdentityId;\\n    }\\n}\\n\",\"keccak256\":\"0xf6f18e4e0643f4c6fa96480189e89d8c7e6fb8de7a4a3f36da24ab3b0ea31d76\",\"license\":\"MIT\"},\"contracts/utils/ByteArr.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ByteArr {\\n    function indexOf(bytes32[] storage self, bytes32 item) internal view returns (uint index, bool isThere) {\\n        for (uint i; i < self.length; i++) {\\n            if (self[i] == item) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function removeByIndex(bytes32[] storage self, uint256 index) internal returns (bytes32[] memory) {\\n        require(index < self.length, \\\"Index is out of array length\\\");\\n\\n        self[index] = self[self.length - 1];\\n        self.pop();\\n\\n        return self;\\n    }\\n\\n    function getFuncHash(bytes storage _data) internal view returns (bytes4) {\\n        bytes4 output;\\n        for (uint i; i < 4; i++) {\\n            output |= bytes4(_data[i] & 0xFF) >> (i * 8);\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xa1a88491b2a586eeebb1f6a6fb7f026931633fb3fb6a5635c74e62621b9f03ba\",\"license\":\"MIT\"},\"contracts/utils/UnorderedIndexableContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {Indexable} from \\\"../interface/Indexable.sol\\\";\\n\\nlibrary UnorderedIndexableContractDynamicSetLib {\\n    struct Contract {\\n        uint8 id;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(uint8 => uint256) indexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, uint8 id, address addr) internal {\\n        require(id != 0, \\\"IndexableContractSet: ID canot be 0\\\");\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, id), \\\"IndexableContractSet: Contract with given ID already exists\\\");\\n        self.indexPointers[id] = size(self);\\n        self.contractList.push(Contract(id, addr));\\n    }\\n\\n    function update(Set storage self, uint8 id, address addr) internal {\\n        require(addr != address(0), \\\"IndexableContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        self.contractList[self.indexPointers[id]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, uint8 id) internal {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        uint256 contractToRemoveIndex = self.indexPointers[id];\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n        uint8 contractToMoveId = Indexable(contractToMove.addr).id();\\n\\n        self.indexPointers[contractToMoveId] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.indexPointers[id];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, uint8 id) internal view returns (Contract memory) {\\n        require(exists(self, id), \\\"IndexableContractSet: Contract with given ID doesn't exists\\\");\\n        return self.contractList[self.indexPointers[id]];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, uint8 id) internal view returns (uint256) {\\n        return self.indexPointers[id];\\n    }\\n\\n    function getByIndex(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function exists(Set storage self, uint8 id) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return self.contractList[self.indexPointers[id]].id == id;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0xc255ea1ea548b3deb7384a5e8f2b706c53688631ca423c73c24ec5cf674055d6\",\"license\":\"MIT\"},\"contracts/utils/UnorderedNamedContractDynamicSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary UnorderedNamedContractDynamicSetLib {\\n    struct Contract {\\n        string name;\\n        address addr;\\n    }\\n\\n    struct Set {\\n        mapping(string => uint256) stringIndexPointers;\\n        mapping(address => uint256) addressIndexPointers;\\n        Contract[] contractList;\\n    }\\n\\n    function append(Set storage self, string calldata name, address addr) internal {\\n        require(\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"\\\")),\\n            \\\"NamedContractSet: Name cannot be empty\\\"\\n        );\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(!exists(self, name), \\\"NamedContractSet: Contract with given name already exists\\\");\\n        self.stringIndexPointers[name] = size(self);\\n        self.addressIndexPointers[addr] = size(self);\\n        self.contractList.push(Contract(name, addr));\\n    }\\n\\n    function update(Set storage self, string calldata name, address addr) internal {\\n        require(addr != address(0), \\\"NamedContractSet: Address cannot be 0x0\\\");\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exists\\\");\\n        delete self.addressIndexPointers[self.contractList[self.stringIndexPointers[name]].addr];\\n        self.addressIndexPointers[addr] = self.stringIndexPointers[name];\\n        self.contractList[self.stringIndexPointers[name]].addr = addr;\\n    }\\n\\n    function remove(Set storage self, string calldata name) internal {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.stringIndexPointers[name];\\n\\n        delete self.addressIndexPointers[self.contractList[contractToRemoveIndex].addr];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.stringIndexPointers[name];\\n        self.contractList.pop();\\n    }\\n\\n    function remove(Set storage self, address addr) internal {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        uint256 contractToRemoveIndex = self.addressIndexPointers[addr];\\n\\n        delete self.stringIndexPointers[self.contractList[contractToRemoveIndex].name];\\n\\n        Contract memory contractToMove = self.contractList[size(self) - 1];\\n\\n        self.stringIndexPointers[contractToMove.name] = contractToRemoveIndex;\\n        self.addressIndexPointers[contractToMove.addr] = contractToRemoveIndex;\\n        self.contractList[contractToRemoveIndex] = contractToMove;\\n\\n        delete self.addressIndexPointers[addr];\\n        self.contractList.pop();\\n    }\\n\\n    function get(Set storage self, string calldata name) internal view returns (Contract memory) {\\n        require(exists(self, name), \\\"NamedContractSet: Contract with given name doesn't exist\\\");\\n        return self.contractList[self.stringIndexPointers[name]];\\n    }\\n\\n    function get(Set storage self, address addr) internal view returns (Contract memory) {\\n        require(exists(self, addr), \\\"NamedContractSet: Contract with given address doesn't exist\\\");\\n        return self.contractList[self.addressIndexPointers[addr]];\\n    }\\n\\n    function get(Set storage self, uint256 index) internal view returns (Contract memory) {\\n        return self.contractList[index];\\n    }\\n\\n    function getAll(Set storage self) internal view returns (Contract[] memory) {\\n        return self.contractList;\\n    }\\n\\n    function getIndex(Set storage self, string calldata name) internal view returns (uint256) {\\n        return self.stringIndexPointers[name];\\n    }\\n\\n    function getIndex(Set storage self, address addr) internal view returns (uint256) {\\n        return self.addressIndexPointers[addr];\\n    }\\n\\n    function exists(Set storage self, string calldata name) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return\\n            keccak256(abi.encodePacked(self.contractList[self.stringIndexPointers[name]].name)) ==\\n            keccak256(abi.encodePacked(name));\\n    }\\n\\n    function exists(Set storage self, address addr) internal view returns (bool) {\\n        if (size(self) == 0) return false;\\n        return addr == self.contractList[self.addressIndexPointers[addr]].addr;\\n    }\\n\\n    function size(Set storage self) internal view returns (uint256) {\\n        return self.contractList.length;\\n    }\\n}\\n\",\"keccak256\":\"0x2da60d9913c236156764f13a514bc7a9a294feadd4fad9c7a111072fd6bef25a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100bf57601f61321238819003918201601f19168301916001600160401b038311848410176100c4578084926020946040528339810103126100bf57516001600160a01b038116908190036100bf57801561007a57600080546001600160a01b03191691909117905560405161313790816100db8239f35b60405162461bcd60e51b815260206004820152601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260043610156200001357600080fd5b6000803560e01c8063051785f61462001b2257806306fdde031462001ad457806311c94ee81462001aa9578063200d2ed21462001a82578063365a86fc1462001a5957806354fd4d501462001a095780635c40f6f414620019c0578063639a86a3146200199557806367031bae146200196a5780638129fc1c146200153757806385404ed114620012bc5780639e2469ec1462001291578063a1e344d01462000fa1578063d184a8691462000c98578063dbab8cd61462000179578063ee99205c146200014e578063f11abfd814620001235763f42cb03814620000f657600080fd5b3462000120578060031936011262000120576006546040516001600160a01b039091168152602090f35b80fd5b503462000120578060031936011262000120576004546040516001600160a01b039091168152602090f35b503462000120578060031936011262000120576003546040516001600160a01b039091168152602090f35b5034620001205760803660031901126200012057600435906001600160a01b038216820362000120576024356001600160401b03811162000c9457620001c490369060040162001cd3565b90926044356001600160401b03811162000c9057620001e890369060040162001cd3565b6064356001600160401b03811162000c8c576200020a90369060040162001cd3565b600754604051635b0c29eb60e01b81526001600160a01b0390911690602081600481855afa908115620009b557899162000c68575b5062000bc3575b506004805460065460405163010cf48d60e71b815233938101939093526001600160a01b0390811696929160209183916024918391165afa908115620009b557906001600160481b03918a9162000b9f575b501662000b5a57861562000b1c5760405163947bb61560e01b81526020600482018190528180620002ce602482018c8f62001dc1565b0381895afa908115620009b557899162000af8575b5062000ab357604051602081019085838337620003106020828881018d8382015203808452018262001d4f565b519020604051898152620003248162001d33565b602081519101201462000a6e57604051602081019083858337620003586020828681018d8382015203808452018262001d4f565b5190206040518981526200036c8162001d33565b602081519101201462000a295760405163cbb12bed60e01b81526020600482018190528180620003a160248201898762001dc1565b0381895afa908115620009b557899162000a05575b50620009c057604051637208606b60e11b81526020600482018190528180620003e460248201878962001dc1565b0381895afa908115620009b55789916200097f575b506200093a5760025460405163d10e73ab60e01b81523360048201526001600160a01b03978816602482015296602091889160449183918d91165af19586156200092f578896620008f7575b50875460405194906001600160a01b03166001600160401b036110998701908111908711176200087557859492620004b694926200049f926110996200206989396110998801908152606060208201819052019162001dc1565b916110998501830360406110998701015262001dc1565b039085f0908115620008e857803b15620008f35760405163dc827de960e01b81526001600160481b038416600482015260606024820152918591839182908490829062000508606483018b8e62001dc1565b6001600160a01b03909116604483015203925af18015620008e857908491620008cc575b50506006546001546040516320e085cd60e11b81526001600160481b03841660048201526001600160a01b039182169492909116918582602481865afa918215620008c157869262000898575b50604051635ac55ea360e11b8152908682600481895afa9182156200088d5787926200073a575b50815190875b60ff811683811015620006e95784511115620006d55760ff6020611fe08360051b168601015151166040516345ed59e560e01b81528160048201526040602482015260208180620005fb604482018b62001cac565b03818d5afa908115620006ca578b9162000692575b50873b156200068e576040519163efe0aa2d60e01b83526001600160481b038a166004840152602483015260448201528981606481838b5af180156200068357908a9162000667575b505060010160ff16620005a6565b620006729062001d03565b6200067f57883862000659565b8880fd5b6040513d8c823e3d90fd5b8a80fd5b90506020813d602011620006c1575b81620006b06020938362001d4f565b810103126200068e57513862000610565b3d9150620006a1565b6040513d8d823e3d90fd5b634e487b7160e01b89526032600452602489fd5b5088827f1e1141aabf8a6876b928816de88db5e6ba4ba57cdb2f84229da1cc8e020d3e1c6001600160481b038a620007328f604051938493602085521695602084019162001dc1565b0390a2604051f35b9091503d8088833e6200074e818362001d4f565b602082828101031262000889578151906001600160401b0382116200067f57808301601f8385010112156200067f5781830151906001600160401b038211620008755760405193620007a760208460051b018662001d4f565b828552602085019382820160208560061b8385010101116200087157602081830101945b60208560061b83850101018610620007eb575050505050509038620005a0565b60408685850103126200086d576040518060408101106001600160401b03604083011117620008575760408101604052865160ff811681036200085357602093928285926040945262000840838b0162001d71565b83820152815201960195909150620007cb565b8e80fd5b634e487b7160e01b600052604160045260246000fd5b8c80fd5b8b80fd5b634e487b7160e01b8a52604160045260248afd5b8780fd5b6040513d89823e3d90fd5b620008b99192503d8088833e620008b0818362001d4f565b81019062001de2565b903862000579565b6040513d88823e3d90fd5b620008d79062001d03565b620008e45782386200052c565b8280fd5b6040513d86823e3d90fd5b8480fd5b6200091f91965060203d60201162000927575b62000916818362001d4f565b81019062001d86565b943862000445565b503d6200090a565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601d60248201527f546f6b656e2073796d626f6c20697320616c72656164792074616b656e0000006044820152606490fd5b620009a6915060203d602011620009ad575b6200099d818362001d4f565b81019062001da7565b38620003f9565b503d62000991565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601b60248201527f546f6b656e206e616d6520697320616c72656164792074616b656e00000000006044820152606490fd5b62000a22915060203d602011620009ad576200099d818362001d4f565b38620003b6565b60405162461bcd60e51b815260206004820152601c60248201527f546f6b656e2073796d626f6c2063616e6e6f7420626520656d707479000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e616d652063616e6e6f7420626520656d7074790000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f4e6f646520494420697320616c726561647920726567697374657265640000006044820152606490fd5b62000b15915060203d602011620009ad576200099d818362001d4f565b38620002e3565b60405162461bcd60e51b81526020600482015260166024820152754e6f64652049442063616e277420626520656d70747960501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4964656e7469747920616c7265616479206578697374730000000000000000006044820152606490fd5b62000bbc915060203d602011620009275762000916818362001d4f565b3862000298565b602060249160405192838092636c9b2a3f60e11b82523360048301525afa9081156200092f57889162000c44575b501562000bff573862000246565b60405162461bcd60e51b815260206004820152601960248201527f416464726573732069736e27742077686974656c6973746564000000000000006044820152606490fd5b62000c61915060203d602011620009ad576200099d818362001d4f565b3862000bf1565b62000c85915060203d602011620009ad576200099d818362001d4f565b386200023f565b8580fd5b8380fd5b5080fd5b503462000120576040366003190112620001205762000cb662001c6b565b6024908135916001600160601b03831691828403620008f35760018060a01b0390816004541694604051926020938481013360601b918282526014815262000cfe8162001d17565b51902097604051631af27dbd60e11b8082526001600160481b0387169a8b600484015289830152600160448301528782606481865afa93841562000f965788928d9562000f72575b50841562000ef5575b505050501562000eb157851562000e7b57908792916006541691823b1562000c905760405163d184a86960e01b81526001600160481b039190911660048201526001600160601b03919091166024820152828160448183865af190811562000e7057839162000e58575b5050604051938480926320e085cd60e11b82528860048301525afa90811562000e4d577f49030f1a1927583e71883baca5a4776a7878294f0f0e1e1788734a335d0dfe7f9362000e2193879362000e2d575b5060405193849360408552604085019062001cac565b918301520390a2604051f35b62000e459193503d8089833e620008b0818362001d4f565b913862000e0b565b6040513d87823e3d90fd5b62000e639062001d03565b62000c9457813862000db9565b6040513d85823e3d90fd5b60405162461bcd60e51b815260048101859052600f818701526e041736b2063616e6e6f74206265203608c1b6044820152606490fd5b60405162461bcd60e51b815260048101859052601f818701527f466e2063616e2062652075736564206f6e6c79206279206964206f776e6572006044820152606490fd5b606491929394506040518481019182526014815262000f148162001d17565b51902091604051948593849283528d60048401528b830152600260448301525afa908115620009b557899162000f50575b503885818062000d4f565b62000f6b9150853d8711620009ad576200099d818362001d4f565b3862000f45565b62000f8e919550833d8511620009ad576200099d818362001d4f565b933862000d46565b6040513d8e823e3d90fd5b5034620001205760209081600319360112620001205762000fc162001c6b565b9162000fcd8362001ec4565b600654604051636095a63b60e11b81526001600160481b038516600482018190526024956001600160a01b0393841694919391929083828981895afa9182156200088d5787926200126d575b506001600160601b038092166200103281151562001e77565b863b1562000889576040516368751ff760e11b8152866004820152888a8201528881604481838c5af18015620009b55790899162001255575b505060405163e6c79da560e01b81526004810187905285818b818b5afa908115620009b5579084918a9162001221575b5016019182116200120e57853b156200120a5760405163eb2145e360e01b81526001600160481b039190911660048201526001600160601b03919091166024820152858160448183895af18015620008c157908691620011f2575b50509080600492600554166040519384809263151db1b960e01b82525afa90811562000e4d578591620011ae575b5062ffffff9150164201918242116200119a57938484953b15620008f35784928360449260405196879586946315aaf86160e21b865260048601528401525af180156200118f5762001177575b50604051f35b620011829062001d03565b6200012057803862001171565b6040513d84823e3d90fd5b5050634e487b7160e01b8252506011600452fd5b905081813d8311620011ea575b620011c7818362001d4f565b8101031262000c90575162ffffff8116810362000c905762ffffff903862001124565b503d620011bb565b620011fd9062001d03565b620008f3578438620010f6565b8680fd5b634e487b7160e01b875260116004528787fd5b620012469150873d89116200124d575b6200123d818362001d4f565b81019062001e56565b386200109b565b503d62001231565b620012609062001d03565b620008895787386200106b565b62001289919250843d86116200124d576200123d818362001d4f565b903862001019565b503462000120578060031936011262000120576007546040516001600160a01b039091168152602090f35b50346200012057602090816003193601126200012057620012dc62001c6b565b620012e78162001ec4565b60018060a01b0360065416906001600160481b036040519163e6c79da560e01b8352169384600483015260249181818481875afa90811562000e4d57906001600160601b0391869162001515575b5016908115620014d357604051631913cd5560e01b81526004810187905281818581885afa908115620008c1578691620014a0575b504211156200145d57508394833b15620008f35760405163eb2145e360e01b81528160048201528584820152858160448183895af1908115620008c157869162001445575b5050833b15620008f357604051906315aaf86160e21b825260048201528483820152848160448183885af190811562000e4d5785916200142d575b5050823b15620014285760448492836040519586948593632ea7919360e21b85523360048601528401525af180156200118f57620011775750604051f35b505050fd5b620014389062001d03565b62001428578338620013ea565b620014509062001d03565b620008f3578438620013af565b606490601e846040519262461bcd60e51b845260048401528201527f5769746864726177616c20706572696f64206861736e277420656e64656400006044820152fd5b90508181813d8311620014cb575b620014ba818362001d4f565b8101031262000c8c5751386200136a565b503d620014ae565b826064916040519162461bcd60e51b83528160048401528201527f5769746864726177616c206861736e2774206265656e20696e697469617465646044820152fd5b620015309150833d85116200124d576200123d818362001d4f565b3862001335565b503462000120578060031936011262000120576200155462001fa1565b60018060a01b03808254169060405191630110ceef60e21b8084526020918260048601526024600c818701526044926b48617368696e6750726f787960a01b8488015260649085888381875afa978815620009b55789986200192b575b50866001600160601b0360a01b9816886001541617600155604051818152866004820152600884820152674964656e7469747960c01b8682015286818481885afa8015620006835788918b91620018eb575b5016886002541617600255604051818152866004820152600784820152665374616b696e6760c81b8682015286818481885afa8015620006835788918b91620018ab575b5016886003541617600355604051818152866004820152600f848201526e4964656e7469747953746f7261676560881b8682015286818481885afa8015620006835788918b916200186b575b501688600454161760045560405181815286600482015260118482015270506172616d657465727353746f7261676560781b8682015286818481885afa8015620006835788918b916200182b575b501688600554161760055560405193818552866004860152600e848601526d50726f66696c6553746f7261676560901b8686015286858481845afa9485156200068357879589918c91620017cb575b50966f57686974656c69737453746f7261676560801b91601098168b6006541617600655604051978896879586528860048701528501528301525afa91821562000e4d5785926200178d575b505016906007541617600755604051f35b90809250813d8311620017c3575b620017a7818362001d4f565b8101031262000c9057620017bb9062001d71565b38806200177c565b503d6200179b565b97968092508891503d831162001823575b620017e8818362001d4f565b810103126200181f576f57686974656c69737453746f7261676560801b8795896200181560109962001d71565b9198509162001730565b8980fd5b503d620017dc565b809250888092503d831162001863575b62001847818362001d4f565b810103126200181f576200185c889162001d71565b38620016e1565b503d6200183b565b809250888092503d8311620018a3575b62001887818362001d4f565b810103126200181f576200189c889162001d71565b3862001693565b503d6200187b565b809250888092503d8311620018e3575b620018c7818362001d4f565b810103126200181f57620018dc889162001d71565b3862001647565b503d620018bb565b809250888092503d831162001923575b62001907818362001d4f565b810103126200181f576200191c889162001d71565b3862001603565b503d620018fb565b9097508581813d831162001962575b62001946818362001d4f565b810103126200067f576200195a9062001d71565b9638620015b1565b503d6200193a565b503462000120578060031936011262000120576002546040516001600160a01b039091168152602090f35b503462000120578060031936011262000120576005546040516001600160a01b039091168152602090f35b503462000120576020366003190112620001205760043580151580910362000c9457620019ec62001fa1565b815460ff60a01b191660a09190911b60ff60a01b16178155604051f35b5034620001205780600319360112620001205762001a5560405162001a2e8162001d17565b6005815264189718171960d91b602082015260405191829160208352602083019062001cac565b0390f35b50346200012057806003193601126200012057546040516001600160a01b039091168152602090f35b5034620001205780600319360112620001205760ff6020915460a01c166040519015158152f35b503462000120578060031936011262000120576001546040516001600160a01b039091168152602090f35b5034620001205780600319360112620001205762001a5560405162001af98162001d17565b600781526650726f66696c6560c81b602082015260405191829160208352602083019062001cac565b50346200012057602036600319011262000120578062001b4162001c6b565b62001b4c8162001ec4565b600654604051636095a63b60e11b81526001600160481b03909216600483018190526001600160a01b0391821692909190602081602481875afa801562000e4d576001600160601b0391869162001c48575b50169262001bae84151562001e77565b803b15620008f35784906044604051809881936368751ff760e11b83528760048401528160248401525af18015620008e85762001c31575b8394506003541691823b156200142857606484928360405195869485936309a35b7960e21b8552336004860152602485015260448401525af180156200118f57620011775750604051f35b92909362001c3f9062001d03565b91839062001be6565b62001c64915060203d81116200124d576200123d818362001d4f565b3862001b9e565b600435906001600160481b038216820362001c8257565b600080fd5b60005b83811062001c9b5750506000910152565b818101518382015260200162001c8a565b9060209162001cc78151809281855285808601910162001c87565b601f01601f1916010190565b9181601f8401121562001c82578235916001600160401b03831162001c82576020838186019501011162001c8257565b6001600160401b0381116200085757604052565b604081019081106001600160401b038211176200085757604052565b602081019081106001600160401b038211176200085757604052565b90601f801991011681019081106001600160401b038211176200085757604052565b51906001600160a01b038216820362001c8257565b9081602091031262001c8257516001600160481b038116810362001c825790565b9081602091031262001c825751801515810362001c825790565b908060209392818452848401376000828201840152601f01601f1916010190565b60208183031262001c825780516001600160401b039182821162001c8257019082601f8301121562001c8257815190811162000857576040519262001e32601f8301601f19166020018562001d4f565b8184526020828401011162001c825762001e53916020808501910162001c87565b90565b9081602091031262001c8257516001600160601b038116810362001c825790565b1562001e7f57565b60405162461bcd60e51b815260206004820152601960248201527f596f752068617665206e6f206f70657261746f722066656573000000000000006044820152606490fd5b60206001600160481b03606460018060a01b036004541693604051848101903360601b82526014815262001ef88162001d17565b519020946040519586948593631af27dbd60e11b85521660048401526024830152600160448301525afa90811562001f955760009162001f72575b501562001f3c57565b60405162461bcd60e51b815260206004820152600e60248201526d20b236b4b710333ab731ba34b7b760911b6044820152606490fd5b62001f8e915060203d8111620009ad576200099d818362001d4f565b3862001f33565b6040513d6000823e3d90fd5b600054604051638da5cb5b60e01b81526020916001600160a01b03919083908290600490829086165afa90811562001f95576000916200202b575b5016330362001fe85750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b908382813d831162002060575b62002044818362001d4f565b81010312620001205750620020599062001d71565b3862001fdc565b503d6200203856fe608060405234620003955762001099803803806200001d816200039a565b9283398101606082820312620003955781516001600160a01b0381169290839003620003955760208181015190926001600160401b039290918381116200039557826200006c918301620003d6565b9160408201518481116200039557620000869201620003d6565b84156200035057600080546001600160a01b03191690951785558151908382116200033c576004958654926001948585811c9516801562000331575b888610146200031e578190601f95868111620002cb575b508890868311600114620002675784926200025b575b5050600019600383901b1c191690851b1787555b815194851162000248576005968754908582811c921680156200023d575b888310146200022a5750838111620001e4575b50859285116001146200017d57939450849291908362000171575b50501b916000199060031b1c19161790555b604051610c509081620004498239f35b0151925038806200014f565b86815285812093958591601f198316915b88838310620001c95750505010620001af575b505050811b01905562000161565b015160001960f88460031b161c19169055388080620001a1565b8587015188559096019594850194879350908101906200018e565b878252868220848088018a1c82019289891062000220575b01891c019085905b8281106200021457505062000134565b83815501859062000204565b92508192620001fc565b634e487b7160e01b835260229052602482fd5b91607f169162000121565b634e487b7160e01b815260418752602490fd5b015190503880620000ef565b8a85528985208894509190601f198416865b8c828210620002b457505084116200029a575b505050811b01875562000103565b015160001960f88460031b161c191690553880806200028c565b8385015186558b9790950194938401930162000279565b9091508984528884208680850160051c8201928b861062000314575b918991869594930160051c01915b82811062000305575050620000d9565b868155859450899101620002f5565b92508192620002e7565b634e487b7160e01b835260228952602483fd5b94607f1694620000c2565b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b815260048101859052601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620003c057604052565b634e487b7160e01b600052604160045260246000fd5b919080601f84011215620003955782516001600160401b038111620003c0576020906200040c601f8201601f191683016200039a565b92818452828287010111620003955760005b8181106200043457508260009394955001015290565b85810183015184820184015282016200041e56fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461061b57508163095ea7b3146105f157816318160ddd146105d257816323b872dd14610595578163313ce56714610579578163365a86fc14610551578163395093511461050157816340c10f191461037e57816342966c681461036057816370a082311461032857816379cc6790146102f457816395d89b41146101ed578163a457c2d71461014557508063a9059cbb146101155763dd62ed3e146100ca57600080fd5b34610111578060031936011261011157806020926100e6610756565b6100ee610771565b6001600160a01b0391821683526002865283832091168252845220549051908152f35b5080fd5b503461011157806003193601126101115760209061013e610134610756565b60243590336107e2565b5160018152f35b905082346101ea57826003193601126101ea57610160610756565b918360243592338152600260205281812060018060a01b03861682526020522054908282106101995760208561013e8585038733610959565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b919050346102f057826003193601126102f057805191836005549060019082821c9282811680156102e6575b60209586861082146102d357508488529081156102b15750600114610258575b610254868661024a828b0383610787565b519182918261070d565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061029e57505050826102549461024a928201019438610239565b8054868501880152928601928101610281565b60ff191687860152505050151560051b830101925061024a8261025438610239565b634e487b7160e01b845260229052602483fd5b93607f1693610219565b8280fd5b505034610111578060031936011261011157610325610311610756565b60243590610320823383610a5b565b610af3565b51f35b5050346101115760203660031901126101115760209181906001600160a01b03610350610756565b1681526001845220549051908152f35b9050346102f05760203660031901126102f057610325903533610af3565b9050346102f057816003193601126102f057610398610756565b83548351631627905560e01b8152338482015260209260248035936001600160a01b0393918691839190829087165afa9081156104f75788916104bd575b501561047b571692831561043857508491816104157fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936003546107bf565b6003558484526001825285842061042d8282546107bf565b90558551908152a351f35b845162461bcd60e51b8152908101839052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b50505080606493519262461bcd60e51b845283015260248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b90508481813d83116104f0575b6104d48183610787565b810103126104ec575180151581036104ec57386103d6565b8780fd5b503d6104ca565b87513d8a823e3d90fd5b50503461011157806003193601126101115761013e60209261054a610524610756565b338352600286528483206001600160a01b038216845286529184902054602435906107bf565b9033610959565b505034610111578160031936011261011157905490516001600160a01b039091168152602090f35b5050346101115781600319360112610111576020905160128152f35b5050346101115760603660031901126101115760209061013e6105b6610756565b6105be610771565b604435916105cd833383610a5b565b6107e2565b5050346101115781600319360112610111576020906003549051908152f35b50503461011157806003193601126101115760209061013e610611610756565b6024359033610959565b8385346101ea57806003193601126101ea57809380549160019083821c92828516948515610703575b60209586861081146106f0578589529081156106cc5750600114610674575b610254878761024a828c0383610787565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106106b957505050826102549461024a92820101948680610663565b805486850188015292860192810161069b565b60ff19168887015250505050151560051b830101925061024a826102548680610663565b634e487b7160e01b845260228352602484fd5b93607f1693610644565b6020808252825181830181905290939260005b82811061074257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610720565b600435906001600160a01b038216820361076c57565b600080fd5b602435906001600160a01b038216820361076c57565b90601f8019910116810190811067ffffffffffffffff8211176107a957604052565b634e487b7160e01b600052604160045260246000fd5b919082018092116107cc57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561090657169182156108b5576000828152600160205260408120549180831061086157604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652600186520382822055868152206108568282546107bf565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610a0a57169182156109ba5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260028252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9060018060a01b0380831660005260026020526040600020908216600052602052604060002054926000198403610a93575b50505050565b808410610aae57610aa5930391610959565b38808080610a8d565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b6001600160a01b03168015610bcb5760009181835260016020526040832054818110610b7b5781908385526001602052036040842055600354818103908111610b67577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091600355604051908152a3565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfea2646970667358221220acff48da0b168182c3ab60f68f9779c79914a2d4f9a8f102ae554b53c5eda7b764736f6c63430008100033a264697066735822122057b39f085b076e185729bede771c4588cd2ce253fa083c06587f82c5ad275aab64736f6c63430008100033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b6000803560e01c8063051785f61462001b2257806306fdde031462001ad457806311c94ee81462001aa9578063200d2ed21462001a82578063365a86fc1462001a5957806354fd4d501462001a095780635c40f6f414620019c0578063639a86a3146200199557806367031bae146200196a5780638129fc1c146200153757806385404ed114620012bc5780639e2469ec1462001291578063a1e344d01462000fa1578063d184a8691462000c98578063dbab8cd61462000179578063ee99205c146200014e578063f11abfd814620001235763f42cb03814620000f657600080fd5b3462000120578060031936011262000120576006546040516001600160a01b039091168152602090f35b80fd5b503462000120578060031936011262000120576004546040516001600160a01b039091168152602090f35b503462000120578060031936011262000120576003546040516001600160a01b039091168152602090f35b5034620001205760803660031901126200012057600435906001600160a01b038216820362000120576024356001600160401b03811162000c9457620001c490369060040162001cd3565b90926044356001600160401b03811162000c9057620001e890369060040162001cd3565b6064356001600160401b03811162000c8c576200020a90369060040162001cd3565b600754604051635b0c29eb60e01b81526001600160a01b0390911690602081600481855afa908115620009b557899162000c68575b5062000bc3575b506004805460065460405163010cf48d60e71b815233938101939093526001600160a01b0390811696929160209183916024918391165afa908115620009b557906001600160481b03918a9162000b9f575b501662000b5a57861562000b1c5760405163947bb61560e01b81526020600482018190528180620002ce602482018c8f62001dc1565b0381895afa908115620009b557899162000af8575b5062000ab357604051602081019085838337620003106020828881018d8382015203808452018262001d4f565b519020604051898152620003248162001d33565b602081519101201462000a6e57604051602081019083858337620003586020828681018d8382015203808452018262001d4f565b5190206040518981526200036c8162001d33565b602081519101201462000a295760405163cbb12bed60e01b81526020600482018190528180620003a160248201898762001dc1565b0381895afa908115620009b557899162000a05575b50620009c057604051637208606b60e11b81526020600482018190528180620003e460248201878962001dc1565b0381895afa908115620009b55789916200097f575b506200093a5760025460405163d10e73ab60e01b81523360048201526001600160a01b03978816602482015296602091889160449183918d91165af19586156200092f578896620008f7575b50875460405194906001600160a01b03166001600160401b036110998701908111908711176200087557859492620004b694926200049f926110996200206989396110998801908152606060208201819052019162001dc1565b916110998501830360406110998701015262001dc1565b039085f0908115620008e857803b15620008f35760405163dc827de960e01b81526001600160481b038416600482015260606024820152918591839182908490829062000508606483018b8e62001dc1565b6001600160a01b03909116604483015203925af18015620008e857908491620008cc575b50506006546001546040516320e085cd60e11b81526001600160481b03841660048201526001600160a01b039182169492909116918582602481865afa918215620008c157869262000898575b50604051635ac55ea360e11b8152908682600481895afa9182156200088d5787926200073a575b50815190875b60ff811683811015620006e95784511115620006d55760ff6020611fe08360051b168601015151166040516345ed59e560e01b81528160048201526040602482015260208180620005fb604482018b62001cac565b03818d5afa908115620006ca578b9162000692575b50873b156200068e576040519163efe0aa2d60e01b83526001600160481b038a166004840152602483015260448201528981606481838b5af180156200068357908a9162000667575b505060010160ff16620005a6565b620006729062001d03565b6200067f57883862000659565b8880fd5b6040513d8c823e3d90fd5b8a80fd5b90506020813d602011620006c1575b81620006b06020938362001d4f565b810103126200068e57513862000610565b3d9150620006a1565b6040513d8d823e3d90fd5b634e487b7160e01b89526032600452602489fd5b5088827f1e1141aabf8a6876b928816de88db5e6ba4ba57cdb2f84229da1cc8e020d3e1c6001600160481b038a620007328f604051938493602085521695602084019162001dc1565b0390a2604051f35b9091503d8088833e6200074e818362001d4f565b602082828101031262000889578151906001600160401b0382116200067f57808301601f8385010112156200067f5781830151906001600160401b038211620008755760405193620007a760208460051b018662001d4f565b828552602085019382820160208560061b8385010101116200087157602081830101945b60208560061b83850101018610620007eb575050505050509038620005a0565b60408685850103126200086d576040518060408101106001600160401b03604083011117620008575760408101604052865160ff811681036200085357602093928285926040945262000840838b0162001d71565b83820152815201960195909150620007cb565b8e80fd5b634e487b7160e01b600052604160045260246000fd5b8c80fd5b8b80fd5b634e487b7160e01b8a52604160045260248afd5b8780fd5b6040513d89823e3d90fd5b620008b99192503d8088833e620008b0818362001d4f565b81019062001de2565b903862000579565b6040513d88823e3d90fd5b620008d79062001d03565b620008e45782386200052c565b8280fd5b6040513d86823e3d90fd5b8480fd5b6200091f91965060203d60201162000927575b62000916818362001d4f565b81019062001d86565b943862000445565b503d6200090a565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601d60248201527f546f6b656e2073796d626f6c20697320616c72656164792074616b656e0000006044820152606490fd5b620009a6915060203d602011620009ad575b6200099d818362001d4f565b81019062001da7565b38620003f9565b503d62000991565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601b60248201527f546f6b656e206e616d6520697320616c72656164792074616b656e00000000006044820152606490fd5b62000a22915060203d602011620009ad576200099d818362001d4f565b38620003b6565b60405162461bcd60e51b815260206004820152601c60248201527f546f6b656e2073796d626f6c2063616e6e6f7420626520656d707479000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206e616d652063616e6e6f7420626520656d7074790000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f4e6f646520494420697320616c726561647920726567697374657265640000006044820152606490fd5b62000b15915060203d602011620009ad576200099d818362001d4f565b38620002e3565b60405162461bcd60e51b81526020600482015260166024820152754e6f64652049442063616e277420626520656d70747960501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4964656e7469747920616c7265616479206578697374730000000000000000006044820152606490fd5b62000bbc915060203d602011620009275762000916818362001d4f565b3862000298565b602060249160405192838092636c9b2a3f60e11b82523360048301525afa9081156200092f57889162000c44575b501562000bff573862000246565b60405162461bcd60e51b815260206004820152601960248201527f416464726573732069736e27742077686974656c6973746564000000000000006044820152606490fd5b62000c61915060203d602011620009ad576200099d818362001d4f565b3862000bf1565b62000c85915060203d602011620009ad576200099d818362001d4f565b386200023f565b8580fd5b8380fd5b5080fd5b503462000120576040366003190112620001205762000cb662001c6b565b6024908135916001600160601b03831691828403620008f35760018060a01b0390816004541694604051926020938481013360601b918282526014815262000cfe8162001d17565b51902097604051631af27dbd60e11b8082526001600160481b0387169a8b600484015289830152600160448301528782606481865afa93841562000f965788928d9562000f72575b50841562000ef5575b505050501562000eb157851562000e7b57908792916006541691823b1562000c905760405163d184a86960e01b81526001600160481b039190911660048201526001600160601b03919091166024820152828160448183865af190811562000e7057839162000e58575b5050604051938480926320e085cd60e11b82528860048301525afa90811562000e4d577f49030f1a1927583e71883baca5a4776a7878294f0f0e1e1788734a335d0dfe7f9362000e2193879362000e2d575b5060405193849360408552604085019062001cac565b918301520390a2604051f35b62000e459193503d8089833e620008b0818362001d4f565b913862000e0b565b6040513d87823e3d90fd5b62000e639062001d03565b62000c9457813862000db9565b6040513d85823e3d90fd5b60405162461bcd60e51b815260048101859052600f818701526e041736b2063616e6e6f74206265203608c1b6044820152606490fd5b60405162461bcd60e51b815260048101859052601f818701527f466e2063616e2062652075736564206f6e6c79206279206964206f776e6572006044820152606490fd5b606491929394506040518481019182526014815262000f148162001d17565b51902091604051948593849283528d60048401528b830152600260448301525afa908115620009b557899162000f50575b503885818062000d4f565b62000f6b9150853d8711620009ad576200099d818362001d4f565b3862000f45565b62000f8e919550833d8511620009ad576200099d818362001d4f565b933862000d46565b6040513d8e823e3d90fd5b5034620001205760209081600319360112620001205762000fc162001c6b565b9162000fcd8362001ec4565b600654604051636095a63b60e11b81526001600160481b038516600482018190526024956001600160a01b0393841694919391929083828981895afa9182156200088d5787926200126d575b506001600160601b038092166200103281151562001e77565b863b1562000889576040516368751ff760e11b8152866004820152888a8201528881604481838c5af18015620009b55790899162001255575b505060405163e6c79da560e01b81526004810187905285818b818b5afa908115620009b5579084918a9162001221575b5016019182116200120e57853b156200120a5760405163eb2145e360e01b81526001600160481b039190911660048201526001600160601b03919091166024820152858160448183895af18015620008c157908691620011f2575b50509080600492600554166040519384809263151db1b960e01b82525afa90811562000e4d578591620011ae575b5062ffffff9150164201918242116200119a57938484953b15620008f35784928360449260405196879586946315aaf86160e21b865260048601528401525af180156200118f5762001177575b50604051f35b620011829062001d03565b6200012057803862001171565b6040513d84823e3d90fd5b5050634e487b7160e01b8252506011600452fd5b905081813d8311620011ea575b620011c7818362001d4f565b8101031262000c90575162ffffff8116810362000c905762ffffff903862001124565b503d620011bb565b620011fd9062001d03565b620008f3578438620010f6565b8680fd5b634e487b7160e01b875260116004528787fd5b620012469150873d89116200124d575b6200123d818362001d4f565b81019062001e56565b386200109b565b503d62001231565b620012609062001d03565b620008895787386200106b565b62001289919250843d86116200124d576200123d818362001d4f565b903862001019565b503462000120578060031936011262000120576007546040516001600160a01b039091168152602090f35b50346200012057602090816003193601126200012057620012dc62001c6b565b620012e78162001ec4565b60018060a01b0360065416906001600160481b036040519163e6c79da560e01b8352169384600483015260249181818481875afa90811562000e4d57906001600160601b0391869162001515575b5016908115620014d357604051631913cd5560e01b81526004810187905281818581885afa908115620008c1578691620014a0575b504211156200145d57508394833b15620008f35760405163eb2145e360e01b81528160048201528584820152858160448183895af1908115620008c157869162001445575b5050833b15620008f357604051906315aaf86160e21b825260048201528483820152848160448183885af190811562000e4d5785916200142d575b5050823b15620014285760448492836040519586948593632ea7919360e21b85523360048601528401525af180156200118f57620011775750604051f35b505050fd5b620014389062001d03565b62001428578338620013ea565b620014509062001d03565b620008f3578438620013af565b606490601e846040519262461bcd60e51b845260048401528201527f5769746864726177616c20706572696f64206861736e277420656e64656400006044820152fd5b90508181813d8311620014cb575b620014ba818362001d4f565b8101031262000c8c5751386200136a565b503d620014ae565b826064916040519162461bcd60e51b83528160048401528201527f5769746864726177616c206861736e2774206265656e20696e697469617465646044820152fd5b620015309150833d85116200124d576200123d818362001d4f565b3862001335565b503462000120578060031936011262000120576200155462001fa1565b60018060a01b03808254169060405191630110ceef60e21b8084526020918260048601526024600c818701526044926b48617368696e6750726f787960a01b8488015260649085888381875afa978815620009b55789986200192b575b50866001600160601b0360a01b9816886001541617600155604051818152866004820152600884820152674964656e7469747960c01b8682015286818481885afa8015620006835788918b91620018eb575b5016886002541617600255604051818152866004820152600784820152665374616b696e6760c81b8682015286818481885afa8015620006835788918b91620018ab575b5016886003541617600355604051818152866004820152600f848201526e4964656e7469747953746f7261676560881b8682015286818481885afa8015620006835788918b916200186b575b501688600454161760045560405181815286600482015260118482015270506172616d657465727353746f7261676560781b8682015286818481885afa8015620006835788918b916200182b575b501688600554161760055560405193818552866004860152600e848601526d50726f66696c6553746f7261676560901b8686015286858481845afa9485156200068357879589918c91620017cb575b50966f57686974656c69737453746f7261676560801b91601098168b6006541617600655604051978896879586528860048701528501528301525afa91821562000e4d5785926200178d575b505016906007541617600755604051f35b90809250813d8311620017c3575b620017a7818362001d4f565b8101031262000c9057620017bb9062001d71565b38806200177c565b503d6200179b565b97968092508891503d831162001823575b620017e8818362001d4f565b810103126200181f576f57686974656c69737453746f7261676560801b8795896200181560109962001d71565b9198509162001730565b8980fd5b503d620017dc565b809250888092503d831162001863575b62001847818362001d4f565b810103126200181f576200185c889162001d71565b38620016e1565b503d6200183b565b809250888092503d8311620018a3575b62001887818362001d4f565b810103126200181f576200189c889162001d71565b3862001693565b503d6200187b565b809250888092503d8311620018e3575b620018c7818362001d4f565b810103126200181f57620018dc889162001d71565b3862001647565b503d620018bb565b809250888092503d831162001923575b62001907818362001d4f565b810103126200181f576200191c889162001d71565b3862001603565b503d620018fb565b9097508581813d831162001962575b62001946818362001d4f565b810103126200067f576200195a9062001d71565b9638620015b1565b503d6200193a565b503462000120578060031936011262000120576002546040516001600160a01b039091168152602090f35b503462000120578060031936011262000120576005546040516001600160a01b039091168152602090f35b503462000120576020366003190112620001205760043580151580910362000c9457620019ec62001fa1565b815460ff60a01b191660a09190911b60ff60a01b16178155604051f35b5034620001205780600319360112620001205762001a5560405162001a2e8162001d17565b6005815264189718171960d91b602082015260405191829160208352602083019062001cac565b0390f35b50346200012057806003193601126200012057546040516001600160a01b039091168152602090f35b5034620001205780600319360112620001205760ff6020915460a01c166040519015158152f35b503462000120578060031936011262000120576001546040516001600160a01b039091168152602090f35b5034620001205780600319360112620001205762001a5560405162001af98162001d17565b600781526650726f66696c6560c81b602082015260405191829160208352602083019062001cac565b50346200012057602036600319011262000120578062001b4162001c6b565b62001b4c8162001ec4565b600654604051636095a63b60e11b81526001600160481b03909216600483018190526001600160a01b0391821692909190602081602481875afa801562000e4d576001600160601b0391869162001c48575b50169262001bae84151562001e77565b803b15620008f35784906044604051809881936368751ff760e11b83528760048401528160248401525af18015620008e85762001c31575b8394506003541691823b156200142857606484928360405195869485936309a35b7960e21b8552336004860152602485015260448401525af180156200118f57620011775750604051f35b92909362001c3f9062001d03565b91839062001be6565b62001c64915060203d81116200124d576200123d818362001d4f565b3862001b9e565b600435906001600160481b038216820362001c8257565b600080fd5b60005b83811062001c9b5750506000910152565b818101518382015260200162001c8a565b9060209162001cc78151809281855285808601910162001c87565b601f01601f1916010190565b9181601f8401121562001c82578235916001600160401b03831162001c82576020838186019501011162001c8257565b6001600160401b0381116200085757604052565b604081019081106001600160401b038211176200085757604052565b602081019081106001600160401b038211176200085757604052565b90601f801991011681019081106001600160401b038211176200085757604052565b51906001600160a01b038216820362001c8257565b9081602091031262001c8257516001600160481b038116810362001c825790565b9081602091031262001c825751801515810362001c825790565b908060209392818452848401376000828201840152601f01601f1916010190565b60208183031262001c825780516001600160401b039182821162001c8257019082601f8301121562001c8257815190811162000857576040519262001e32601f8301601f19166020018562001d4f565b8184526020828401011162001c825762001e53916020808501910162001c87565b90565b9081602091031262001c8257516001600160601b038116810362001c825790565b1562001e7f57565b60405162461bcd60e51b815260206004820152601960248201527f596f752068617665206e6f206f70657261746f722066656573000000000000006044820152606490fd5b60206001600160481b03606460018060a01b036004541693604051848101903360601b82526014815262001ef88162001d17565b519020946040519586948593631af27dbd60e11b85521660048401526024830152600160448301525afa90811562001f955760009162001f72575b501562001f3c57565b60405162461bcd60e51b815260206004820152600e60248201526d20b236b4b710333ab731ba34b7b760911b6044820152606490fd5b62001f8e915060203d8111620009ad576200099d818362001d4f565b3862001f33565b6040513d6000823e3d90fd5b600054604051638da5cb5b60e01b81526020916001600160a01b03919083908290600490829086165afa90811562001f95576000916200202b575b5016330362001fe85750565b6064906040519062461bcd60e51b825280600483015260248201527f466e2063616e206f6e6c79206265207573656420627920687562206f776e65726044820152fd5b908382813d831162002060575b62002044818362001d4f565b81010312620001205750620020599062001d71565b3862001fdc565b503d6200203856fe608060405234620003955762001099803803806200001d816200039a565b9283398101606082820312620003955781516001600160a01b0381169290839003620003955760208181015190926001600160401b039290918381116200039557826200006c918301620003d6565b9160408201518481116200039557620000869201620003d6565b84156200035057600080546001600160a01b03191690951785558151908382116200033c576004958654926001948585811c9516801562000331575b888610146200031e578190601f95868111620002cb575b508890868311600114620002675784926200025b575b5050600019600383901b1c191690851b1787555b815194851162000248576005968754908582811c921680156200023d575b888310146200022a5750838111620001e4575b50859285116001146200017d57939450849291908362000171575b50501b916000199060031b1c19161790555b604051610c509081620004498239f35b0151925038806200014f565b86815285812093958591601f198316915b88838310620001c95750505010620001af575b505050811b01905562000161565b015160001960f88460031b161c19169055388080620001a1565b8587015188559096019594850194879350908101906200018e565b878252868220848088018a1c82019289891062000220575b01891c019085905b8281106200021457505062000134565b83815501859062000204565b92508192620001fc565b634e487b7160e01b835260229052602482fd5b91607f169162000121565b634e487b7160e01b815260418752602490fd5b015190503880620000ef565b8a85528985208894509190601f198416865b8c828210620002b457505084116200029a575b505050811b01875562000103565b015160001960f88460031b161c191690553880806200028c565b8385015186558b9790950194938401930162000279565b9091508984528884208680850160051c8201928b861062000314575b918991869594930160051c01915b82811062000305575050620000d9565b868155859450899101620002f5565b92508192620002e7565b634e487b7160e01b835260228952602483fd5b94607f1694620000c2565b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b815260048101859052601960248201527f48756220416464726573732063616e6e6f7420626520307830000000000000006044820152606490fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620003c057604052565b634e487b7160e01b600052604160045260246000fd5b919080601f84011215620003955782516001600160401b038111620003c0576020906200040c601f8201601f191683016200039a565b92818452828287010111620003955760005b8181106200043457508260009394955001015290565b85810183015184820184015282016200041e56fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461061b57508163095ea7b3146105f157816318160ddd146105d257816323b872dd14610595578163313ce56714610579578163365a86fc14610551578163395093511461050157816340c10f191461037e57816342966c681461036057816370a082311461032857816379cc6790146102f457816395d89b41146101ed578163a457c2d71461014557508063a9059cbb146101155763dd62ed3e146100ca57600080fd5b34610111578060031936011261011157806020926100e6610756565b6100ee610771565b6001600160a01b0391821683526002865283832091168252845220549051908152f35b5080fd5b503461011157806003193601126101115760209061013e610134610756565b60243590336107e2565b5160018152f35b905082346101ea57826003193601126101ea57610160610756565b918360243592338152600260205281812060018060a01b03861682526020522054908282106101995760208561013e8585038733610959565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b919050346102f057826003193601126102f057805191836005549060019082821c9282811680156102e6575b60209586861082146102d357508488529081156102b15750600114610258575b610254868661024a828b0383610787565b519182918261070d565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061029e57505050826102549461024a928201019438610239565b8054868501880152928601928101610281565b60ff191687860152505050151560051b830101925061024a8261025438610239565b634e487b7160e01b845260229052602483fd5b93607f1693610219565b8280fd5b505034610111578060031936011261011157610325610311610756565b60243590610320823383610a5b565b610af3565b51f35b5050346101115760203660031901126101115760209181906001600160a01b03610350610756565b1681526001845220549051908152f35b9050346102f05760203660031901126102f057610325903533610af3565b9050346102f057816003193601126102f057610398610756565b83548351631627905560e01b8152338482015260209260248035936001600160a01b0393918691839190829087165afa9081156104f75788916104bd575b501561047b571692831561043857508491816104157fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936003546107bf565b6003558484526001825285842061042d8282546107bf565b90558551908152a351f35b845162461bcd60e51b8152908101839052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b50505080606493519262461bcd60e51b845283015260248201527f466e2063616e206f6e6c792062652063616c6c656420627920746865206875626044820152fd5b90508481813d83116104f0575b6104d48183610787565b810103126104ec575180151581036104ec57386103d6565b8780fd5b503d6104ca565b87513d8a823e3d90fd5b50503461011157806003193601126101115761013e60209261054a610524610756565b338352600286528483206001600160a01b038216845286529184902054602435906107bf565b9033610959565b505034610111578160031936011261011157905490516001600160a01b039091168152602090f35b5050346101115781600319360112610111576020905160128152f35b5050346101115760603660031901126101115760209061013e6105b6610756565b6105be610771565b604435916105cd833383610a5b565b6107e2565b5050346101115781600319360112610111576020906003549051908152f35b50503461011157806003193601126101115760209061013e610611610756565b6024359033610959565b8385346101ea57806003193601126101ea57809380549160019083821c92828516948515610703575b60209586861081146106f0578589529081156106cc5750600114610674575b610254878761024a828c0383610787565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106106b957505050826102549461024a92820101948680610663565b805486850188015292860192810161069b565b60ff19168887015250505050151560051b830101925061024a826102548680610663565b634e487b7160e01b845260228352602484fd5b93607f1693610644565b6020808252825181830181905290939260005b82811061074257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610720565b600435906001600160a01b038216820361076c57565b600080fd5b602435906001600160a01b038216820361076c57565b90601f8019910116810190811067ffffffffffffffff8211176107a957604052565b634e487b7160e01b600052604160045260246000fd5b919082018092116107cc57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561090657169182156108b5576000828152600160205260408120549180831061086157604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652600186520382822055868152206108568282546107bf565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610a0a57169182156109ba5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260028252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9060018060a01b0380831660005260026020526040600020908216600052602052604060002054926000198403610a93575b50505050565b808410610aae57610aa5930391610959565b38808080610a8d565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b6001600160a01b03168015610bcb5760009181835260016020526040832054818110610b7b5781908385526001602052036040842055600354818103908111610b67577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091600355604051908152a3565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfea2646970667358221220acff48da0b168182c3ab60f68f9779c79914a2d4f9a8f102ae554b53c5eda7b764736f6c63430008100033a264697066735822122057b39f085b076e185729bede771c4588cd2ce253fa083c06587f82c5ad275aab64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15408,
        "contract": "contracts/Profile.sol:Profile",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Hub)9211"
      },
      {
        "astId": 15379,
        "contract": "contracts/Profile.sol:Profile",
        "label": "status",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10204,
        "contract": "contracts/Profile.sol:Profile",
        "label": "hashingProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(HashingProxy)8950"
      },
      {
        "astId": 10207,
        "contract": "contracts/Profile.sol:Profile",
        "label": "identityContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Identity)10138"
      },
      {
        "astId": 10210,
        "contract": "contracts/Profile.sol:Profile",
        "label": "stakingContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Staking)15211"
      },
      {
        "astId": 10213,
        "contract": "contracts/Profile.sol:Profile",
        "label": "identityStorage",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IdentityStorage)18485"
      },
      {
        "astId": 10216,
        "contract": "contracts/Profile.sol:Profile",
        "label": "parametersStorage",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ParametersStorage)19108"
      },
      {
        "astId": 10219,
        "contract": "contracts/Profile.sol:Profile",
        "label": "profileStorage",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ProfileStorage)19582"
      },
      {
        "astId": 10222,
        "contract": "contracts/Profile.sol:Profile",
        "label": "whitelistStorage",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(WhitelistStorage)23445"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(HashingProxy)8950": {
        "encoding": "inplace",
        "label": "contract HashingProxy",
        "numberOfBytes": "20"
      },
      "t_contract(Hub)9211": {
        "encoding": "inplace",
        "label": "contract Hub",
        "numberOfBytes": "20"
      },
      "t_contract(Identity)10138": {
        "encoding": "inplace",
        "label": "contract Identity",
        "numberOfBytes": "20"
      },
      "t_contract(IdentityStorage)18485": {
        "encoding": "inplace",
        "label": "contract IdentityStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ParametersStorage)19108": {
        "encoding": "inplace",
        "label": "contract ParametersStorage",
        "numberOfBytes": "20"
      },
      "t_contract(ProfileStorage)19582": {
        "encoding": "inplace",
        "label": "contract ProfileStorage",
        "numberOfBytes": "20"
      },
      "t_contract(Staking)15211": {
        "encoding": "inplace",
        "label": "contract Staking",
        "numberOfBytes": "20"
      },
      "t_contract(WhitelistStorage)23445": {
        "encoding": "inplace",
        "label": "contract WhitelistStorage",
        "numberOfBytes": "20"
      }
    }
  }
}
